"use strict";(function(){class e{#e;#t;#n;constructor(){this.#e={};this.#t={};this.#n=BX.componentParameters.get("userJwt")}getTokenCached(e){return this.#e[e]}async getToken(e){const t=this.#e[e];const n=this.#t[e];if(t){return t}else if(n){return n}this.#t[e]=new Promise((t=>{this.#s(e).then((()=>{delete this.#t[e];t(this.#e[e])}))}));return this.#t[e]}setToken(e,t){this.#e[e]=t}async getUserToken(e){const t=this.#t[e];if(this.#n){return this.#n}else if(t){return t}this.#t[e]=new Promise((t=>{this.#s(e).then((()=>{delete this.#t[e];t(this.#n)}))}));return this.#t[e]}setUserToken(e){this.#n=e}clearTokenList(){this.#e={};this.#t={};this.#n=null}async#s(e){try{const t=await BX.rest.callMethod("call.Call.getCallToken",{chatId:e});const n=t.data()?.callToken;const s=t.data()?.userToken;if(n){this.setToken(e,n)}if(s){this.setUserToken(s)}}catch(e){console.error("Error during call token retrieving",e)}}}window.TokenManager=e})();
//# sourceMappingURL=extension.map.js