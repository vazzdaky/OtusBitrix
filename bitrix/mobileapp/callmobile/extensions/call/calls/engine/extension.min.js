"use strict";(function(){const{EntityReady:e}=jn.require("entity-ready");const{EventType:t}=jn.require("call/const");const{CallSettingsManager:l}=jn.require("call/settings-manager");const a="/bitrix/js/im/images/blank.gif";const n={createCall:"im.call.create",createChildCall:"im.call.createChildCall",getPublicChannels:"pull.channel.public.list",getCall:"im.call.get",startTrack:"call.Track.start",stopTrack:"call.Track.stop"};const s=10;const i=45;BX.Call={};BX.Call.State={Incoming:"Incoming"};BX.Call.UserState={Idle:"Idle",Busy:"Busy",Calling:"Calling",Unavailable:"Unavailable",Declined:"Declined",Ready:"Ready",Connecting:"Connecting",Connected:"Connected",Failed:"Failed"};BX.Call.JoinStatus={None:"none",Local:"local",Remote:"remote"};BX.Call.Type={Instant:1,Permanent:2};BX.Call.Provider={Plain:"Plain",Voximplant:"Voximplant",Bitrix:"Bitrix"};BX.Call.RoomType={Small:1,Conference:2,Large:3,Personal:4};BX.Call.RecorderStatus={None:0,Ready:1,Enabled:2,Disabled:3,Paused:4,Destroyed:5};BX.Call.CallError={SecurityKeyChanged:"SECURITY_KEY_CHANGED",RoomClosed:"ROOM_CLOSED",EmptySignalingUrl:"EMPTY_SIGNALING_URL",EmptyCallToken:"EMPTY_CALL_TOKEN",MediaServerMissingParams:"MEDIA_SERVER_MISSING_PARAMS",MediaServerUnreachable:"MEDIA_SERVER_UNREACHABLE",CallNotFound:"CALL_NOT_FOUND"};BX.Call.StreamTag={Main:"main",Screen:"screen"};BX.Call.Direction={Incoming:"Incoming",Outgoing:"Outgoing"};BX.Call.Quality={VeryHigh:"very_high",High:"high",Medium:"medium",Low:"low",VeryLow:"very_low"};BX.Call.UserMnemonic={all:"all",none:"none"};BX.Call.Event={onUserInvited:"onUserInvited",onUserJoined:"onUserJoined",onUserStateChanged:"onUserStateChanged",onUserMicrophoneState:"onUserMicrophoneState",onUserCameraState:"onUserCameraState",onUserScreenState:"onUserScreenState",onUsersLimitExceeded:"onUsersLimitExceeded",onUserVoiceStarted:"onUserVoiceStarted",onUserVoiceStopped:"onUserVoiceStopped",onUserFloorRequest:"onUserFloorRequest",onUserEmotion:"onUserEmotion",onLocalMediaReceived:"onLocalMediaReceived",onLocalMediaStopped:"onLocalMediaStopped",onDeviceListUpdated:"onDeviceListUpdated",onRTCStatsReceived:"onRTCStatsReceived",onCallFailure:"onCallFailure",onStreamReceived:"onStreamReceived",onStreamRemoved:"onStreamRemoved",onJoin:"onJoin",onLeave:"onLeave",onActive:"onActive",onInactive:"onInactive",onDestroy:"onDestroy",onHangup:"onHangup",onPullEventUserInviteTimeout:"onPullEventUserInviteTimeout",onReconnected:"onReconnected",onSwitchTrackRecordStatus:"onSwitchTrackRecordStatus",onRecorderStatusChanged:"onRecorderStatusChanged",onCallTokenRequest:"onCallTokenRequest",onAllParticipantsVideoMuted:"onAllParticipantsVideoMuted",onAllParticipantsAudioMuted:"onAllParticipantsAudioMuted",onAllParticipantsScreenshareMuted:"onAllParticipantsScreenshareMuted",onRecordState:"onRecordState",onParticipantAudioMuted:"onParticipantAudioMuted",onParticipantVideoMuted:"onParticipantVideoMuted",onParticipantScreenshareMuted:"onParticipantScreenshareMuted",onRoomSettingsChanged:"onRoomSettingsChanged",onUserPermissionsChanged:"onUserPermissionsChanged",onCallConnected:"onCallConnected"};BX.Call.Scheme={classic:1,jwt:2};class r{constructor(){this.legacyCalls={};this.jwtCalls={};this.unknownCalls={};this.callsToProcessAfterMessengerReady={legacy:new Map,jwt:new Map};this.debugFlag=false;this.isMessengerReady=false;this.pullStatus="";this._onPullEventHandler=this._onPullEvent.bind(this);this._onPullClientEventHandler=this._onPullClientEvent.bind(this);BX.addCustomEvent("onPullEvent-im",this._onPullEventHandler);BX.addCustomEvent("onPullClientEvent-im",this._onPullClientEventHandler);BX.addCustomEvent("onPullEvent-call",this._onPullEventHandler);BX.addCustomEvent("onAppActive",this.onAppActive.bind(this));BX.addCustomEvent(t.imMobile.updateCallToken,this._onCallTokenUpdate.bind(this,true));BX.addCustomEvent("onPullStatus",(e=>{this.pullStatus=e.status;console.log(`[${CallUtil.getTimeForLog()}]: pull status: ${this.pullStatus}`)}));BX.addCustomEvent(t.imMobile.activeCallsReceived,this.onActiveCallsReceived.bind(this));this._onCallJoinHandler=this._onCallJoin.bind(this);this._onCallLeaveHandler=this._onCallLeave.bind(this);this._onCallDestroyHandler=this._onCallDestroy.bind(this);this._onCallInactiveHandler=this._onCallInactive.bind(this);this._onCallActiveHandler=this._onCallActive.bind(this);this._onNativeIncomingCallHandler=this._onNativeIncomingCall.bind(this);if("callservice"in window){callservice.on("incoming",this._onNativeIncomingCallHandler);if(callservice.currentCall()){setTimeout((()=>this._onNativeIncomingCall(callservice.currentCall())),0)}}this.timeOfLastPushNotificationWithAutoAnswer;this.startWithPush();setTimeout((()=>BX.postComponentEvent("onPullGetStatus",[],"communication")),100);e.wait("chat").then((()=>this._onMessengerReady())).catch((e=>console.error(e)))}onAppActive(){for(const e in this.jwtCalls){if(this.jwtCalls.hasOwnProperty(e)&&this.jwtCalls[e]instanceof PlainCall&&!this.jwtCalls[e].ready&&!this.isNativeCall(e)&&Date.now()-this.jwtCalls[e].created>3e4){console.warn(`Destroying stale call ${e}`);this.jwtCalls[e].destroy()}}for(const e in this.legacyCalls){if(this.legacyCalls.hasOwnProperty(e)&&this.legacyCalls[e]instanceof PlainCall&&!this.legacyCalls[e].ready&&!this.isNativeCall(e)&&Date.now()-this.legacyCalls[e].created>3e4){console.warn(`Destroying stale call ${e}`);this.legacyCalls[e].destroy()}}this.startWithPush()}onActiveCallsReceived(e){const t=e=>{e.off(BX.Call.Event.onDestroy,this._onCallDestroyHandler);e.off(BX.Call.Event.onJoin,this._onCallJoinHandler);e.off(BX.Call.Event.onLeave,this._onCallLeaveHandler);e.off(BX.Call.Event.onInactive,this._onCallInactiveHandler);e.off(BX.Call.Event.onActive,this._onCallActiveHandler)};Object.keys(this.legacyCalls).forEach((e=>{const l=this.legacyCalls[e];this._onCallInactive({callId:l.id});t(l)}));Object.keys(this.jwtCalls).forEach((e=>{const l=this.jwtCalls[e];this._onCallInactive({callUuid:l.uuid});t(l)}));this.legacyCalls={};this.jwtCalls={};Object.values(e).forEach((e=>{const t=this._instantiateCall(e,e.CONNECTION_DATA,e.USERS,e.LOG_TOKEN,e.USER_DATA);const l=CallUtil.isLegacyCall(e.PROVIDER,e.SCHEME);if(l){this.legacyCalls[e.ID]=t}else{this.jwtCalls[e.UUID]=t}}))}_onMessengerReady(){this.isMessengerReady=true;for(const e of this.callsToProcessAfterMessengerReady.legacy.values()){this._onCallActive(e)}this.callsToProcessAfterMessengerReady.legacy.clear();for(const e of this.callsToProcessAfterMessengerReady.jwt.values()){this._onCallActive(e)}this.callsToProcessAfterMessengerReady.jwt.clear()}startWithPush(){const e=Application.getLastNotification();if(!e.id||!e.id.startsWith("IM_CALL_")){return}let t;try{t=JSON.parse(e.params)}catch{navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#","E005"))}if(!t.ACTION||!t.ACTION.startsWith("IMINV_")||!t.PARAMS||!t.PARAMS.call){return}console.log("Starting with PUSH:",e);const l=t.PARAMS.call;const a=t.PARAMS.video;const n=l.ID;const s=l.UUID;const r=t.PARAMS.ts;const o=Date.now()/1e3-r;const c=l.PROVIDER;console.log("timeAgo:",o);if(CallUtil.isLegacyCall(c,l.SCHEME)){this._onUnknownCallPing(n,o,i).then((e=>{if(e&&this.legacyCalls[n]){BX.postComponentEvent("CallEvents::incomingCall",[{callId:n,callUuid:s,video:a,autoAnswer:true,provider:c}],"calls")}})).catch((e=>console.error(e)))}else{const e=this._instantiateCall(t.PARAMS.call);this.jwtCalls[s]=e;if(!tokenManager.getTokenCached(e.associatedEntity.chatId)){tokenManager.getToken(e.associatedEntity.chatId)}BX.postComponentEvent("CallEvents::incomingCall",[{callId:n,callUuid:s,video:a,autoAnswer:true,provider:c}],"calls")}}shouldCallBeAutoAnswered(e){if(Application.getPlatform()!=="android"){return false}const t=Application.getLastNotification();if(!t.id||!t.id.startsWith("IM_CALL_")){return false}if(!t.extra||!t.extra.server_time_unix||t.extra.server_time_unix==this.timeOfLastPushNotificationWithAutoAnswer){return false}try{const l=JSON.parse(t.params);if(!l.ACTION||!l.ACTION.startsWith("IMINV_")||!l.PARAMS||!l.PARAMS.call){return false}const a=l.PARAMS.call;const n=a.ID;const s=e==n;if(s){this.timeOfLastPushNotificationWithAutoAnswer=t.extra.server_time_unix}return s}catch{return false}}_onNativeIncomingCall(e){console.log("_onNativeIncomingCall",e);if(e.params.type!=="internal"){return}const t=e.params.video;const l=e.params.call.ID;const a=e.params.ts;const n=Date.now()/1e3-a;const s=e.params.call.PROVIDER;if(n>15){console.error("Call originated too long time ago")}this._instantiateCall(e.params.call,e.params.connectionData,e.params.users,e.params.logToken,e.params.userData);BX.postComponentEvent("CallEvents::incomingCall",[{callId:l,video:t,isNative:true,provider:s}],"calls")}createJwtCall(e){return new Promise((async(t,l)=>{const a=e.type||BX.Call.Type.Instant;const n=e.provider||"Plain";if(e.joinExisting){for(const a in this.jwtCalls){if(this.jwtCalls.hasOwnProperty(a)){const n=this.jwtCalls[a];if(n.provider==e.provider&&n.associatedEntity.type==e.entityType&&n.associatedEntity.id==e.entityId){this.log(a,"Found existing call, attaching to it");if(!n.hasConnectionData){try{await this.updateConnectionData(n)}catch(e){return l(e)}}return t({call:n,isNew:false})}}}}let s;const i=e.chatInfo.chatId;const r=this.getUuidv4();const o=await tokenManager.getToken(i);if(!o){return l({code:BX.Call.CallError.EmptyCallToken})}try{s=await CallUtil.getCallConnectionData({callToken:o,callType:a,provider:n,instanceId:r,isVideo:e.videoEnabled},i)}catch(e){return l(e)}if(this.jwtCalls[s.result.roomId]){const e=this.jwtCalls[s.result.roomId];if(e instanceof g){e.destroy()}else{console.warn(`Call ${s.result.roomId} already exists`);e.setConnectionData({mediaServerUrl:s.result.mediaServerUrl,roomData:s.result.roomData});return t({call:e,isNew:false})}}const c=this._getCallFactory(n,BX.Call.Scheme.jwt);const d=c.createCall({uuid:s.result.roomId,instanceId:r,direction:BX.Call.Direction.Outgoing,userData:CallUtil.getCurrentUserName(),videoEnabled:e.videoEnabled===true,enableMicAutoParameters:e.enableMicAutoParameters!==false,associatedEntity:e.chatInfo,events:{[BX.Call.Event.onDestroy]:this._onCallDestroyHandler,[BX.Call.Event.onJoin]:this._onCallJoinHandler,[BX.Call.Event.onLeave]:this._onCallLeaveHandler,[BX.Call.Event.onInactive]:this._onCallInactiveHandler,[BX.Call.Event.onActive]:this._onCallActiveHandler},connectionData:{mediaServerUrl:s.result.mediaServerUrl,roomData:s.result.roomData},debug:e.debug===true,scheme:BX.Call.Scheme.jwt});this.jwtCalls[d.uuid]=d;if(s.result.isNew){this.log(d.uuid,"Creating new call")}else{this.log(d.uuid,"Server returned existing call, attaching to it")}this._onCallActive({callUuid:d.uuid});t({call:d,isNew:s.result.isNew})}))}createLegacyCall(e){return new Promise(((t,l)=>{const a=e.type||BX.Call.Type.Instant;const s=e.provider||"Plain";if(e.joinExisting){for(const l in this.legacyCalls){if(this.legacyCalls.hasOwnProperty(l)){const a=this.legacyCalls[l];if(a.provider==e.provider&&a.associatedEntity.type==e.entityType&&a.associatedEntity.id==e.entityId){this.log(l,"Found existing call, attaching to it");return t({call:a,isNew:false})}}}}const i={type:a,provider:s,entityType:e.entityType,entityId:e.entityId,joinExisting:!!e.joinExisting,userIds:BX.type.isArray(e.userIds)?e.userIds:[]};console.log(`CallEngine.createCall.rest.callMethod - '${n.createCall}', callParameters:`,i);this.getRestClient().callMethod(n.createCall,i).then((a=>{console.log(`CallEngine.createCall.rest.callMethod - '${n.createCall}', verbose response:`,a);if(a.error()){const e=a.error().getError();return l({code:e.error,message:e.error_description})}const s=a.data();if(s.userData){}if(s.publicChannels){BX.PULL.setPublicIds(Object.values(s.publicChannels))}const i=s.call;if(this.legacyCalls[i.ID]){if(this.legacyCalls[i.ID]instanceof g){this.legacyCalls[i.ID].destroy()}else{console.warn(`Call ${i.ID} already exists`);return t({call:this.legacyCalls[i.ID],isNew:false})}}CallUtil.setUserData(s.userData);const r=this._getCallFactory(i.PROVIDER,BX.Call.Scheme.classic);const o=r.createCall({id:parseInt(i.ID,10),uuid:i.UUID,instanceId:this.getUuidv4(),direction:BX.Call.Direction.Outgoing,users:s.users,userData:CallUtil.getCurrentUserName(),videoEnabled:e.videoEnabled===true,enableMicAutoParameters:e.enableMicAutoParameters!==false,associatedEntity:i.ASSOCIATED_ENTITY,events:{[BX.Call.Event.onDestroy]:this._onCallDestroyHandler,[BX.Call.Event.onJoin]:this._onCallJoinHandler,[BX.Call.Event.onLeave]:this._onCallLeaveHandler,[BX.Call.Event.onInactive]:this._onCallInactiveHandler,[BX.Call.Event.onActive]:this._onCallActiveHandler},debug:e.debug===true,logToken:s.logToken,connectionData:s.connectionData,isCopilotActive:i.RECORD_AUDIO,scheme:BX.Call.Scheme.classic});this.legacyCalls[i.ID]=o;if(s.isNew){this.log(o.id,"Creating new call")}else{this.log(o.id,"Server returned existing call, attaching to it")}this._onCallActive({callId:o.id,callUuid:o.uuid});t({call:o,isNew:s.isNew})})).catch((e=>{console.warn(`CallEngine.createCall.rest.callMethod.catch - '${n.createCall}', verbose error:`,e);const t=e.answer||e;l({code:t.error||0,message:t.error_description||t})}))}))}getJwtCallWithId(e,t){return new Promise((async(l,a)=>{const n=this.jwtCalls[e];if(n){if(!n.hasConnectionData){try{await this.updateConnectionData(n)}catch(e){return a(e)}}return l({call:n,isNew:false})}if(t){try{const e=await this.createJwtCall(t);return l(e)}catch(e){return a(e)}}a({code:BX.Call.CallError.CallNotFound})}))}getLegacyCallWithId(e){return new Promise(((t,l)=>{if(this.legacyCalls[e]){return t({call:this.legacyCalls[e],isNew:false})}this.getRestClient().callMethod(n.getCall,{callId:e}).then((e=>{const a=e.data();if(a.call.END_DATE){const e={id:a.call.ID,uuid:a.call.UUID,provider:a.call.PROVIDER,associatedEntity:a.call.ASSOCIATED_ENTITY};BX.postComponentEvent("CallEvents::inactive",[e],"im.recent");BX.postComponentEvent("CallEvents::inactive",[e],"im.messenger");return l({code:"ALREADY_FINISHED"})}t({call:this._instantiateCall(a.call,a.connectionData,a.users,a.logToken,a.userData),isNew:false})})).catch((e=>{if(typeof e.error==="function"){e=e.error().getError()}l({code:e.error,message:e.error_description})}))}))}getCallWithDialogId(e){const t=Object.values(this.jwtCalls);const l=Object.values(this.legacyCalls);const a=t=>t.find((t=>t.associatedEntity?.id==e));return a(t)||a(l)}updateConnectionData(e){return new Promise(((t,l)=>{const a=e.associatedEntity.chatId;tokenManager.getToken(a).then((t=>{if(!t){return l({code:BX.Call.CallError.EmptyCallToken})}const n={callToken:t,callType:e.type,provider:e.provider,instanceId:e.instanceId,roomId:e.uuid};return CallUtil.getCallConnectionData(n,a)})).then((l=>{e.setConnectionData({mediaServerUrl:l.result.mediaServerUrl,roomData:l.result.roomData});return t()})).catch((e=>{l(e)}))}))}getUuidv4(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=Math.random()*16|0;const l=e=="x"?t:t&3|8;return l.toString(16)}))}debug(e){if(typeof e!=="boolean"){e=!this.debugFlag}this.debugFlag=e;console.warn(`Debug ${this.debugFlag?"enabled":"disabled"}`)}log(e,...t){const l=this.legacyCalls[e]||this.jwtCalls[e];if(l){l.log(...t)}else{console.log.apply(console,arguments)}}getRestClient(){return BX.rest}getLogService(){return BX.componentParameters.get("callLogService","")}isCallServerAllowed(){return BX.componentParameters.get("sfuServerEnabled")}isBitrixCallServerEnabled(){return BX.componentParameters.get("bitrixCallsEnabled")}isCallBetaIosEnabled(){return BX.componentParameters.get("callBetaIosEnabled",false)}isNativeCall(e){if(!("callservice"in window)){return false}const t=callservice.currentCall();return t&&t.params.call.ID==e}_isCallSupported(e){return e instanceof PlainCall||e instanceof PlainCallJwt||e instanceof VoximplantCall||e instanceof BitrixCallJwt&&callEngine.isBitrixCallServerEnabled()||e instanceof BitrixCallDev&&callEngine.isBitrixCallServerEnabled()}_onPullEvent(e,t,l){const a={chatUserAdd:this.#e.bind(this),chatUserLeave:this.#e.bind(this),"Call::incoming":this._onPullIncomingCall.bind(this),callTokenUpdate:this._onCallTokenUpdate.bind(this,false),"Call::clearCallTokens":this._onCallTokenClear.bind(this),"Call::callV2AvailabilityChanged":this._onCallV2AvailabilityChanged.bind(this)};if(e.startsWith("Call::")&&t.publicIds){BX.PULL.setPublicIds(Object.values(t.publicIds));console.warn("CallEngine._onPullEvent",e,t,l)}if(a[e]){a[e].call(this,t,l)}else if(e.startsWith("Call::")&&(t.call||t.callId)){const a=t?.call?.SCHEME||t?.call?.scheme;const n=a!==BX.Call.Scheme.jwt;const i=t.call?.ID||t.call?.id||t.callId;const r=t.call?.UUID||t.call?.uuid;const o=n?this.legacyCalls[i]:this.jwtCalls[r];if(o){o._onPullEvent(e,t,l)}else if(e==="Call::ping"){this._onUnknownCallPing(t.callId,l.server_time_ago,s).then((a=>{if(a&&this.legacyCalls[i]){this.legacyCalls[i]._onPullEvent(e,t,l)}}))}}}_onPullClientEvent(e,t,l){if(e.startsWith("Call::")&&t.callId){const a=t.callId;if(this.legacyCalls[a]){this.legacyCalls[a]._onPullEvent(e,t,l)}else if(e==="Call::ping"){this._onUnknownCallPing(t.callId,l.server_time_ago,s).then((n=>{if(n&&this.legacyCalls[a]){this.legacyCalls[a]._onPullEvent(e,t,l)}}))}}}_onCallTokenUpdate(e,t){if(e&&tokenManager.getTokenCached(t.chatId)){return}tokenManager.setToken(t.chatId,t.token)}_onCallTokenClear(){tokenManager.clearTokenList()}_onCallV2AvailabilityChanged(e){l.jwtCallsEnabled=e.isJwtEnabled;l.plainCallsUseJwt=e.isPlainUseJwt;if(e?.callBalancerUrl){l.callBalancerUrl=e.callBalancerUrl}}#e(e){BX.postComponentEvent(t.callMobile.chatUserChanged,[{dialogId:e.dialogId,userCount:e.userCount}],"calls")}_onPullIncomingCall(e,t){if(t.server_time_ago>30){console.error("Call was started too long time ago");return}const l=e.call;const a=parseInt(l.ID,10);const n=l.uuid;let s=this.legacyCalls[a]||this.jwtCalls[n];if(e.userData){}const i=l.PROVIDER||l.provider;const r=l.SCHEME||l.scheme;const o=CallUtil.isLegacyCall(i,r);if(!s){CallUtil.setUserData(e.userData);const t=this._getCallFactory(i,r);if(o){s=t.createCall({id:a,uuid:l.UUID,instanceId:this.getUuidv4(),parentId:l.PARENT_ID||null,callFromMobile:e.isLegacyMobile===true,direction:BX.Call.Direction.Incoming,users:e.users,userData:CallUtil.getCurrentUserName(),initiatorId:e.senderId||parseInt(l.INITIATOR_ID,10),associatedEntity:{userCounter:e.users?.length||0,...l.ASSOCIATED_ENTITY},type:l.TYPE,startDate:l.START_DATE,logToken:e.logToken,events:{[BX.Call.Event.onDestroy]:this._onCallDestroyHandler,[BX.Call.Event.onJoin]:this._onCallJoinHandler,[BX.Call.Event.onLeave]:this._onCallLeaveHandler,[BX.Call.Event.onInactive]:this._onCallInactiveHandler,[BX.Call.Event.onActive]:this._onCallActiveHandler},connectionData:e.connectionData,isCopilotActive:l.RECORD_AUDIO,scheme:l.SCHEME});this.legacyCalls[a]=s;this._onCallActive({callId:a,callUuid:n})}else{s=t.createCall({uuid:l.uuid,instanceId:this.getUuidv4(),parentUuid:l.parentUuid||null,callFromMobile:e.isLegacyMobile===true,direction:BX.Call.Direction.Incoming,users:e.users,userData:CallUtil.getCurrentUserName(),initiatorId:e.senderId||parseInt(l.initiatorId,10),associatedEntity:{userCounter:l.userCounter||0,...l.associatedEntity},type:l.type,startDate:l.startDate,logToken:l.logToken,events:{[BX.Call.Event.onDestroy]:this._onCallDestroyHandler,[BX.Call.Event.onJoin]:this._onCallJoinHandler,[BX.Call.Event.onLeave]:this._onCallLeaveHandler,[BX.Call.Event.onInactive]:this._onCallInactiveHandler,[BX.Call.Event.onActive]:this._onCallActiveHandler},scheme:l.scheme});this.jwtCalls[n]=s;this._onCallActive({callUuid:n})}}if(s&&!(s instanceof g)){if(o){if(e.invitedUsers){s.addInvitedUsers(e.invitedUsers)}}else if(!tokenManager.getTokenCached(s.associatedEntity.chatId)){tokenManager.getToken(s.associatedEntity.chatId)}BX.postComponentEvent("CallEvents::incomingCall",[{callId:s.id,callUuid:s.uuid,video:e.video===true,isLegacyMobile:e.isLegacyMobile===true,userData:e.userData||null,autoAnswer:this.shouldCallBeAutoAnswered(s.uuid),provider:i}],"calls");s.log(`Incoming call ${s.uuid}`)}}_onUnknownCallPing(e,t,l){return new Promise(((a,n)=>{e=parseInt(e,10);if(t>l){this.log(e,"Error: Ping was sent too long time ago");return a(false)}if(this.unknownCalls[e]){return a(false)}this.unknownCalls[e]=true;this.getLegacyCallWithId(e).then((t=>{this.unknownCalls[e]=false;a(true)})).catch((t=>{this.unknownCalls[e]=false;this.log(e,"Error: Could not instantiate call",t);a(false)}))}))}_instantiateCall(e,t,l,a,n){const s=e.ID;const i=e.UUID;let r=this.legacyCalls[s]||this.jwtCalls[i];if(r){console.warn(`Call ${s} already exists`);return r}CallUtil.setUserData(n);const o=this._getCallFactory(e.PROVIDER,e.SCHEME);const c=CallUtil.isLegacyCall(e.PROVIDER,e.SCHEME);r=o.createCall({id:parseInt(e.ID,10),uuid:e.UUID,instanceId:this.getUuidv4(),initiatorId:parseInt(e.INITIATOR_ID,10),parentId:e.PARENT_ID,parentUuid:e.PARENT_UUID,direction:e.INITIATOR_ID==env.userId?BX.Call.Direction.Outgoing:BX.Call.Direction.Incoming,users:l,userData:CallUtil.getCurrentUserName(),associatedEntity:{userCounter:l?.length||0,...e.ASSOCIATED_ENTITY},type:e.TYPE,startDate:e.START_DATE,logToken:a,events:{[BX.Call.Event.onDestroy]:this._onCallDestroyHandler,[BX.Call.Event.onJoin]:this._onCallJoinHandler,[BX.Call.Event.onLeave]:this._onCallLeaveHandler,[BX.Call.Event.onInactive]:this._onCallInactiveHandler,[BX.Call.Event.onActive]:this._onCallActiveHandler},connectionData:this._getValidConnectionData(t,c),isCopilotActive:e.RECORD_AUDIO,scheme:e.SCHEME});if(c){this.legacyCalls[s]=r;this._onCallActive({callId:s,callUuid:i})}else{this.jwtCalls[i]=r;this._onCallActive({callUuid:i})}return r}_getCallFields(e){return{id:e.id,uuid:e.uuid,provider:e.provider,associatedEntity:e.associatedEntity}}_getValidConnectionData(e,t){const l=t&&e?.endpoint&&e.jwt;const a=!t&&e.mediaServerUrl&&e.roomData;if(l||a){return e}return{}}_getCallFactory(e,t=null){if(e==BX.Call.Provider.Plain){const e=t===BX.Call.Scheme.jwt||!t&&l.isJwtInPlainCallsEnabled();return e?o:c}if(e==BX.Call.Provider.Voximplant){return d}if(e===BX.Call.Provider.Bitrix){const e=t===BX.Call.Scheme.jwt||!t&&l.isJwtCallsEnabled();return e?u:h}throw new Error(`Unknown call provider type ${e}`)}_onCallJoin(e){console.warn("CallEngine.CallEvents::join",e);this._onCallActive(e)}_onCallLeave(e){console.warn("CallEngine.CallEvents::leave",e);this._onCallActive(e)}_onCallInactive(e){console.warn("CallEngine.CallEvents::inactive",e);const t=this.legacyCalls[e.callId]||this.jwtCalls[e.callUuid];if(!t){return}if(!this.isMessengerReady){if(e.callId){this.callsToProcessAfterMessengerReady.legacy.delete(e.callId)}else{this.callsToProcessAfterMessengerReady.jwt.delete(e.callUuid)}return}BX.postComponentEvent("CallEvents::inactive",[this._getCallFields(t)],"im.recent");BX.postComponentEvent("CallEvents::inactive",[this._getCallFields(t)],"im.messenger")}_onCallActive(e){console.warn("CallEngine.CallEvents::active",e);const t=this.legacyCalls[e.callId]||this.jwtCalls[e.callUuid];if(t&&!(t instanceof g)&&callEngine._isCallSupported(t)){if(!this.isMessengerReady){if(e.callId){this.callsToProcessAfterMessengerReady.legacy.set(e.callId,e)}else{this.callsToProcessAfterMessengerReady.jwt.set(e.callUuid,e)}return}BX.postComponentEvent("CallEvents::active",[this._getCallFields(t),t.joinStatus],"im.recent");BX.postComponentEvent("CallEvents::active",[this._getCallFields(t),t.joinStatus],"im.messenger")}}_onCallDestroy(e){const t=!!e.callId;const l=t?this.legacyCalls[e.callId]:this.jwtCalls[e.callUuid];const a=t?e.callId:e.callUuid;if(l){l.off(BX.Call.Event.onJoin,this._onCallJoinHandler).off(BX.Call.Event.onLeave,this._onCallLeaveHandler).off(BX.Call.Event.onDestroy,this._onCallDestroyHandler).off(BX.Call.Event.onInactive,this._onCallInactiveHandler).off(BX.Call.Event.onActive,this._onCallActiveHandler);if(this.isMessengerReady){console.warn("CallEvents::inactive",[e.callUuid]);BX.postComponentEvent("CallEvents::inactive",[this._getCallFields(l)],"im.recent");BX.postComponentEvent("CallEvents::inactive",[this._getCallFields(l)],"im.messenger")}else if(t){this.callsToProcessAfterMessengerReady.legacy.delete(a)}else{this.callsToProcessAfterMessengerReady.jwt.delete(a)}}const n=new g({callId:a,onDelete:()=>{if(t&&this.legacyCalls[a]){delete this.legacyCalls[a]}else if(this.jwtCalls[a]){delete this.jwtCalls[a]}}});if(t){this.legacyCalls[a]=n}else{this.jwtCalls[a]=n}}destroy(){BX.removeCustomEvent("onPullEvent-im",this._onPullEventHandler);BX.removeCustomEvent("onPullClientEvent-im",this._onPullClientEventHandler);BX.removeCustomEvent("onPullEvent-call",this._onPullCallEventHandler)}}let o={createCall(e){return new PlainCallJwt(e)}};let c={createCall(e){return new PlainCall(e)}};let d={createCall(e){return new VoximplantCall(e)}};let C={createCall(e){return new BitrixCall(e)}};let u={createCall(e){return new BitrixCallJwt(e)}};let h={createCall(e){return new BitrixCallDev(e)}};class g{constructor(e){this.callId=e.callId;this.lifetime=e.lifetime||120;this.callbacks={onDelete:BX.type.isFunction(e.onDelete)?e.onDelete:function(){}};this.deleteTimeout=setTimeout((()=>{this.callbacks.onDelete({callId:this.callId})}),this.lifetime*1e3)}_onPullEvent(e,t,l){}isAnyoneParticipating(){return false}addEventListener(){return false}removeEventListener(){return false}destroy(){clearTimeout(this.deleteTimeout);this.callbacks.onDelete=function(){}}}class v{constructor(){this.userData={};this.usersInProcess={};this.roomPermissions={AudioEnabled:false,VideoEnabled:false,ScreenShareEnabled:false};this.userPermissions={ask:false,audio:true,can_approve:false,change_role:false,change_settings:false,end_call:false,give_permissions:false,invite:false,join_call:false,kick_user:false,mute:true,mute_others:false,record_call:false,screen_share:true,update:false,video:true,view_users:false};const e={ADMIN:"ADMIN",MANAGER:"MANAGER",USER:"USER"};this.regularUserRoles=[e.USER];this.currentUserRole=e.USER}setCurrentUserRole(e){if(e){this.currentUserRole=e.toUpperCase()}}setRoomPermissions(e){if(!BX.type.isPlainObject(e)){return}this.roomPermissions=e}setUserPermissionsByRoomPermissions(e){if(this.isRegularUser(this.getCurrentUserRole())){let t=this.getUserPermissions();for(let l in e){if(e.hasOwnProperty(l)){switch(l){case"AudioEnabled":t.audio=e[l];break;case"VideoEnabled":t.video=e[l];break;case"ScreenShareEnabled":t.screen_share=e[l];break}}}this.setUserPermissions(t)}}updateUserPermissionByNewRoomPermission(e,t){if(this.isRegularUser(this.getCurrentUserRole())){let l=this.getUserPermissions();switch(e){case"audio":l.audio=t;break;case"video":l.video=t;break;case"screen_share":l.screen_share=t;break}this.setUserPermissions(l)}}isRegularUser(e){return this.regularUserRoles.includes(e)}getRoomPermissions(){return this.roomPermissions}setUserPermissions(e){if(BX.type.isPlainObject(e)){for(let t in e){if(this.userPermissions.hasOwnProperty(t)){this.userPermissions[t]=e[t]}}}}getUserPermissions(){return this.userPermissions}getCurrentUserRole(){return this.currentUserRole}havePermissionToBroadcast(e){let t=false;switch(e){case"mic":t=this.userPermissions.audio;break;case"cam":t=this.userPermissions.video;break;case"screenshare":t=this.userPermissions.screen_share;break}return t}canControlChangeSettings(){return!!this.userPermissions.change_settings}canControlGiveSpeakPermission(){return!!this.userPermissions.give_permissions}getUserRoleByUserId(e){if(this.userData.hasOwnProperty(e)){return this.userData[e].role}}updateUserData(e,t){const l=[];for(const e of t){if(this.userData.hasOwnProperty(e)){continue}l.push(e)}const a=new Promise(((a,n)=>{if(l.length===0){return a()}BX.rest.callMethod("im.call.getUsers",{callId:e,userIds:l}).then((e=>{const l=BX.type.isPlainObject(e.answer.result)?e.answer.result:{};t.forEach((e=>{if(l[e]){this.userData[e]=l[e]}delete this.usersInProcess[e]}));a()})).catch((e=>{n(e.answer)}))}));for(const e of l){this.usersInProcess[e]=a}return a}getUser(e,t){return new Promise(((l,a)=>{if(this.userData.hasOwnProperty(t)){return l(this.userData[t])}else if(this.usersInProcess.hasOwnProperty(t)){this.usersInProcess[t].then((()=>l(this.userData[t])))}else{this.updateUserData(e,[t]).then((()=>l(this.userData[t])))}}))}getUsers(e,t){return new Promise(((l,a)=>{this.updateUserData(e,t).then((()=>{const e={};t.forEach((t=>e[t]=this.userData[t]||{}));return l(e)})).catch((e=>a(e)))}))}setUserData(e){for(const t in e){this.userData[t]=e[t];if(!this.userData[t].color){this.userData[t].color=this.getAvatarBackground()}}}getCurrentUserName(){return this.userData[env.userId]?.name||env?.userId||""}getDateForLog(){const e=new Date;return`${e.getFullYear()}-${this.lpad(e.getMonth()+1,2,"0")}-${this.lpad(e.getDate(),2,"0")} ${this.lpad(e.getHours(),2,"0")}:${this.lpad(e.getMinutes(),2,"0")}:${this.lpad(e.getSeconds(),2,"0")}.${e.getMilliseconds()}`}getTimeForLog(){const e=new Date;return`${this.lpad(e.getHours(),2,"0")}:${this.lpad(e.getMinutes(),2,"0")}:${this.lpad(e.getSeconds(),2,"0")}.${e.getMilliseconds()}`}log(){console.log(this.getLogMessage.apply(this,arguments))}warn(){console.warn(this.getLogMessage.apply(this,arguments))}error(){console.error(this.getLogMessage.apply(this,arguments))}formatSeconds(e){e=Math.floor(e);const t=e%60;const l=(e-t)/60;return`${this.lpad(l,2,"0")}:${this.lpad(t,2,"0")}`}getTimeText(e){if(!e){return""}const t=new Date;let l=new Date(e);if(l.getTime()<t.getDate()){l=t}let a=t-l;if(a<=0){a=0}let n=Math.floor(a/1e3);let s=Math.floor(n/60/60);if(s>0){n-=s*60*60}const i=Math.floor(n/60);if(i>0){n-=i*60}return(s>0?s+":":"")+(s>0?i.toString().padStart(2,"0")+":":i+":")+n.toString().padStart(2,"0")}getTimeInSeconds(e){if(!e){return""}const t=new Date;let l=new Date(e);if(l.getTime()<t.getDate()){l=t}let a=t-l;if(a<=0){a=0}return Math.floor(a/1e3)}lpad(e,t,l){e=e.toString();l=l||" ";if(e.length>t){return e}let a="";for(let n=0;n<t-e.length;n++){a+=l}return a+e}isAvatarBlank(e){return typeof e!=="string"||e==""||e.endsWith(a)}getAvatarBackground(){const e=["#006484","#00A2E8","#559BE6","#688800","#7FA800","#11A9D9","#0B66C3","#004F69","#00789E","#506900","#828B95"];return e[Math.floor(Math.random()*e.length)]}makeAbsolute(e){let t;if(typeof e!=="string"){return e}if(e.startsWith("http")){t=e}else{t=e.startsWith("/")?currentDomain+e:`${currentDomain}/${e}`}return t}convertKeysToUpper(e){var t=JSON.parse(JSON.stringify(e));for(let e in t){const l=e.toUpperCase();if(l!=e){t[l]=t[e];delete t[e]}}return t}getCustomMessage(e,t){let l;if(!BX.type.isPlainObject(t)){t={}}if(t.gender&&BX.message.hasOwnProperty(`${e}_${t.gender}`)){l=BX.message(`${e}_${t.gender}`)}else{l=BX.message(e)}t=this.convertKeysToUpper(t);return l.replace(/#.+?#/gm,(e=>{const l=e.slice(1,1+e.length-2);return t.hasOwnProperty(l)?t[l]:e}))}isCallServerAllowed(){return BX.message("call_server_enabled")==="Y"}getUserLimit(){if(this.isCallServerAllowed()){return parseInt(BX.message("call_server_max_users"))}return parseInt(BX.message("turn_server_max_users"))}getLogMessage(){let e=this.getDateForLog();for(const t of arguments){if(t instanceof Error){e=`${t.message}\n${t.stack}`}else{try{e=`${e} | ${typeof t==="object"?this.printObject(t):t}`}catch{e+=" | (circular structure)"}}}return e}printObject(e){let t="[";for(const l in e){if(e.hasOwnProperty(l)){const a=e[l];switch(typeof a){case"object":t+=l+(a===null?": null; ":": (object); ");break;case"string":case"number":case"boolean":t+=`${l}: ${a.toString()}; `;break;default:t+=`${l}: (${typeof a}); `}}}return`${t}]`}getUuidv4(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=Math.random()*16|0;const l=e=="x"?t:t&3|8;return l.toString(16)}))}debounce(e,t,l){let a=0;return function(){clearTimeout(a);a=setTimeout((()=>e.apply(l,arguments)),t)}}array_flip(e){const t={};for(const l in e){t[e[l]]=l}return t}isDeviceSupported(){return Application.getApiVersion()>=36}forceBackgroundConnectPull(e=10){return new Promise(((t,l)=>{if(callEngine&&callEngine.pullStatus==="online"){t();return}const a=function(){console.error("Timeout while waiting for p&p to connect");BX.removeCustomEvent("onPullStatus",s);l("connect timeout")};const n=setTimeout(a,e*1e3);var s=({status:e,additional:a})=>{if(!a){a={}}if(e==="online"){BX.removeCustomEvent("onPullStatus",s);clearTimeout(n);t()}if(e==="offline"&&a.isError){BX.removeCustomEvent("onPullStatus",s);clearTimeout(n);l("connect error")}};BX.addCustomEvent("onPullStatus",s);BX.postComponentEvent("onPullForceBackgroundConnect",[],"communication")}))}showDeviceAccessConfirm(e,t=()=>{},l=()=>{}){return new Promise((a=>{navigator.notification.confirm(e?BX.message("MOBILE_CALL_MICROPHONE_CAMERA_REQUIRED"):BX.message("MOBILE_CALL_MICROPHONE_REQUIRED"),(e=>e==1?t():l()),e?BX.message("MOBILE_CALL_NO_MICROPHONE_CAMERA_ACCESS"):BX.message("MOBILE_CALL_NO_MICROPHONE_ACCESS"),[BX.message("MOBILE_CALL_MICROPHONE_SETTINGS"),BX.message("MOBILE_CALL_MICROPHONE_CANCEL")])}))}getSdkAudioManager(){if(BX.componentParameters.get("bitrixCallsEnabled")){return JNBXAudioManager}return JNVIAudioManager}isAIServiceEnabled(e=false){return BX.componentParameters.get("isAIServiceEnabled",false)&&!e}isLegacyCall(e,t=null){if(t){return t===BX.Call.Scheme.classic}const a=e===BX.Call.Provider.Plain&&!l.isJwtInPlainCallsEnabled();const n=e===BX.Call.Provider.Bitrix&&!l.isJwtCallsEnabled();return a||n}isJwtCallsSupported(){return l.isJwtCallsSupported()}getApiVersion(){return l.isJwtCallsSupported()?"2.0.0":"1.0.0"}async getLegacyCallConnectionData(e){return new Promise(((t,l)=>{let a=`${e.endpoint}/join`;a+=`?token=${e.jwt}`;a+=`&clientVersion=${this.getApiVersion()}`;a+=`&clientPlatform=${Application.getPlatform()}`;BX.ajax({url:a,method:"GET",dataType:"json",prepareData:false,skipAuthCheck:true,timeout:60}).then((e=>{if(e.result?.mediaServerUrl&&e.result?.roomData){t(`${e.result.mediaServerUrl}?roomData=${e.result.roomData}`)}l({name:"MEDIASERVER_MISSING_PARAMS",message:`Incorrect signaling response`})})).catch((e=>{l(e)}))}))}getCallConnectionData(e,t){if(!BX.type.isPlainObject(e)){e={}}return new Promise((async(a,n)=>{const s=l.callBalancerUrl;const i=e.provider===BX.Call.Provider.Plain&&l.isJwtInPlainCallsEnabled()?BX.Call.RoomType.Personal:BX.Call.RoomType.Small;const r=CallUtil.getApiVersion();const o=Application.getPlatform();const c=`${s}/v2/join`;const d=await tokenManager.getUserToken(t);const C=JSON.stringify({userToken:d,roomType:i,clientVersion:r,clientPlatform:o,...e},t);BX.ajax({url:c,method:"POST",data:C,prepareData:false,dataType:"json",skipAuthCheck:true,timeout:60}).then((e=>{if(e.result?.mediaServerUrl&&e.result?.roomData){a(e)}n({code:BX.Call.CallError.MediaServerMissingParams})})).catch((e=>{try{const t=JSON.parse(e.xhr.responseText);if(t.error.message){n({code:t.error.message})}}catch(e){console.log(e)}n({code:BX.Call.CallError.MediaServerUnreachable})}))}))}async getCallConnectionDataById(e){try{const t=callEngine.jwtCalls[e];if(!t){throw{code:BX.Call.CallError.CallNotFound}}return this.getCallConnectionData({callType:t.type,instanceId:t.instanceId,provider:t.provider,roomId:t.uuid,callToken:tokenManager.getTokenCached(t.associatedEntity.chatId)},t.associatedEntity.chatId)}catch(e){throw e}}isNewMobileGridEnabled(){return BX.componentParameters.get("isNewMobileGridEnabled",false)}}class m extends Error{constructor(e){super("Media access denied");this.name="DeviceAccessError";this.justDenied=e}}class E extends Error{constructor(){super("Call joined elsewhere");this.name="CallJoinedElseWhereError"}}window.DeviceAccessError=m;window.CallJoinedElseWhereError=E;window.CallEngine=r;window.CCallUtil=v;window.CallStub=g})();
//# sourceMappingURL=extension.map.js