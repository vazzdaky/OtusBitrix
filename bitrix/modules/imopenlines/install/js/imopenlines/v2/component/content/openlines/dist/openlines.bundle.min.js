this.BX=this.BX||{};this.BX.OpenLines=this.BX.OpenLines||{};this.BX.OpenLines.v2=this.BX.OpenLines.v2||{};this.BX.OpenLines.v2.Component=this.BX.OpenLines.v2.Component||{};(function(t,e,n,i,s,o,r,a,l,c,u,d,h,p,g,m,C,f,T,S,I){"use strict";const v="user";const _={name:"ChatTransferContent",components:{ChatButton:d.ChatButton,ChatSearch:c.AddToChat},props:{dialogId:{type:String,required:true}},data(){return{searchQuery:"",selectedItems:new Set}},computed:{ButtonSize:()=>d.ButtonSize,ButtonColor:()=>d.ButtonColor},created(){this.membersSelector=this.getTagSelector()},mounted(){this.membersSelector.renderTo(this.$refs["tag-selector"]);this.membersSelector.focusTextBox()},methods:{getTagSelector(){return new l.TagSelector({maxHeight:150,showAddButton:false,showTextBox:true,showCreateButton:false,events:{onAfterTagAdd:t=>{const{tag:e}=t.getData();this.selectedItems.add(e.id)},onAfterTagRemove:t=>{const{tag:e}=t.getData();this.selectedItems.delete(e.id)},onInput:()=>{this.searchQuery=this.membersSelector.getTextBoxValue()}}})},onSelectItem(t){const{dialogId:e,nativeEvent:n}=t;if(this.selectedItems.has(e)){const t={id:e,entityId:v};this.membersSelector.removeTag(t)}else{this.membersSelector.removeTags();const t=this.getTagsByDialogId(e);this.membersSelector.addTag(t)}this.membersSelector.clearTextBox();if(!n.altKey){this.searchQuery=""}},getTagsByDialogId(t){const e=this.$store.getters["users/get"](t,true);return{id:t,entityId:v,title:e.name,avatar:e.avatar.length>0?e.avatar:null}},onChatTransfer(){const t=[...this.selectedItems][0];return this.getTransferService().chatTransfer(this.dialogId,t)},getTransferService(){if(!this.transferService){this.transferService=new C.TransferService}return this.transferService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-imol-entity-selector-chat-transfer__container">\n\t\t\t<div class="bx-imol-entity-selector-chat-transfer__input" ref="tag-selector"></div>\n\t\t\t<div class="bx-imol-entity-selector-chat-transfer__search-result-container">\n\t\t\t\t<ChatSearch\n\t\t\t\t\t:query="searchQuery"\n\t\t\t\t\t:dialogId="dialogId"\n\t\t\t\t\t:selectedItems="[...selectedItems]"\n\t\t\t\t\t@clickItem="onSelectItem"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div class="bx-imol-entity-selector-chat-transfer__buttons">\n\t\t\t\t<ChatButton\n\t\t\t\t\t:size="ButtonSize.L"\n\t\t\t\t\t:color="ButtonColor.Primary"\n\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t:text="loc('IMOL_CONTENT_BUTTON_TRANSFER')"\n\t\t\t\t\t:isDisabled="selectedItems.size === 0"\n\t\t\t\t\t@click="onChatTransfer"\n\t\t\t\t/>\n\t\t\t\t<ChatButton\n\t\t\t\t\t:size="ButtonSize.L"\n\t\t\t\t\t:color="ButtonColor.LightBorder"\n\t\t\t\t\t:isRounded="true"\n\t\t\t\t\t:text="loc('IMOL_ENTITY_SELECTOR_CHAT_TRANSFER_CANCEL_BUTTON')"\n\t\t\t\t\t@click="$emit('close')"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</div>\n\t`};const B="imol-chat-transfer-popup";const b={name:"ChatTransfer",components:{MessengerPopup:a.MessengerPopup,ChatTransferContent:_},props:{showPopup:{type:Boolean,required:true},bindElement:{type:Object,required:true},dialogId:{type:String,required:true},popupConfig:{type:Object,required:true}},emits:["close"],computed:{POPUP_ID:()=>B,config(){return{titleBar:this.$Bitrix.Loc.getMessage("IMOL_CONTENT_BUTTON_TRANSFER"),closeIcon:true,bindElement:this.bindElement,offsetTop:this.popupConfig.offsetTop,offsetLeft:this.popupConfig.offsetLeft,padding:0,contentPadding:0,contentBackground:"#fff",className:"bx-imol-entity-selector-chat-transfer__container"}}},template:`\n\t\t<MessengerPopup\n\t\t\tv-if="showPopup"\n\t\t\t:config="config"\n\t\t\t@close="$emit('close')"\n\t\t\t:id="POPUP_ID"\n\t\t>\n\t\t\t<ChatTransferContent :dialogId="dialogId" @close="$emit('close')"/>\n\t\t</MessengerPopup>\n\t`};const O="#eef0f2";const L="#535658";const x="#dfe0e3";const y={name:"ChatControlPanel",components:{ChatButton:d.ChatButton,ChatTransfer:b},props:{dialogId:{type:String,required:true},isQueueTypeAll:{type:Boolean,required:true}},data(){return{showChatTransferPopup:false}},computed:{ButtonSize:()=>d.ButtonSize,ButtonColor:()=>d.ButtonColor,buttonColorScheme(){return{backgroundColor:O,borderColor:"transparent",iconColor:O,textColor:L,hoverColor:x}}},methods:{replyDialog(){return this.getAnswerService().requestAnswer(this.dialogId)},skipDialog(){return this.getSkipService().requestSkip(this.dialogId)},getAnswerService(){if(!this.answerService){this.answerService=new C.AnswerService}return this.answerService},getSkipService(){if(!this.skipService){this.skipService=new C.SkipService}return this.skipService},openChatTransferPopup(){this.showChatTransferPopup=true},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ul class="bx-imol-textarea_join-panel-list-button">\n\t\t\t<li class="bx-imol-textarea_join-panel-item-button">\n\t\t\t\t<ChatButton\n\t\t\t\t\t:size="ButtonSize.L"\n\t\t\t\t\t:color="ButtonColor.Success"\n\t\t\t\t\t:text="loc('IMOL_CONTENT_TEXTAREA_JOIN_PANEL_ANSWER')"\n\t\t\t\t\t@click="replyDialog"\n\t\t\t\t/>\n\t\t\t</li>\n\t\t\t<li v-if="!isQueueTypeAll" class="bx-imol-textarea_join-panel-item-button">\n\t\t\t\t<ChatButton\n\t\t\t\t\t:size="ButtonSize.L"\n\t\t\t\t\t:color="ButtonColor.Danger"\n\t\t\t\t\t:text="loc('IMOL_CONTENT_TEXTAREA_JOIN_PANEL_SKIP')"\n\t\t\t\t\t@click="skipDialog"\n\t\t\t\t/>\n\t\t\t</li>\n\t\t\t<li class="bx-imol-textarea_join-panel-item-button" ref="transfer-chat">\n\t\t\t\t<ChatButton\n\t\t\t\t\t:size="ButtonSize.L"\n\t\t\t\t\t:customColorScheme="buttonColorScheme"\n\t\t\t\t\t:text="loc('IMOL_CONTENT_BUTTON_TRANSFER')"\n\t\t\t\t\t@click="openChatTransferPopup"\n\t\t\t\t/>\n\t\t\t</li>\n\t\t</ul>\n\t\t<ChatTransfer\n\t\t\t:bindElement="$refs['transfer-chat'] || {}"\n\t\t\t:dialogId="dialogId"\n\t\t\t:showPopup="showChatTransferPopup"\n\t\t\t:popupConfig="{offsetTop: -700, offsetLeft: 0}"\n\t\t\t@close="showChatTransferPopup = false"\n\t\t/>\n\n\t`};const N={name:"JoinPanel",components:{ChatButton:d.ChatButton},props:{dialogId:{type:String,required:true},isNewSession:{type:Boolean,required:true},isClosed:{type:Boolean,required:true}},computed:{ButtonSize:()=>d.ButtonSize,ButtonColor:()=>d.ButtonColor,textStartJoinButtons(){return this.isClosed?this.loc("IMOL_CONTENT_TEXTAREA_JOIN_PANEL_START"):this.loc("IMOL_CONTENT_TEXTAREA_JOIN_PANEL_JOIN_BUTTON")}},methods:{handleDialogAccess(){if(this.isClosed){return this.getStartService().startDialog(this.dialogId)}return this.getJoinService().joinToDialog(this.dialogId)},closeDialog(){void u.Messenger.openLines();p.LayoutManager.getInstance().setLastOpenedElement(h.Layout.openlinesV2.name,"")},getStartService(){if(!this.startService){this.startService=new C.StartService}return this.startService},getJoinService(){if(!this.joinService){this.joinService=new C.JoinService}return this.joinService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<ul class="bx-imol-textarea_join-panel-list-button">\n\t\t\t<li v-if="!isNewSession" class="bx-imol-textarea_join-panel-item-button">\n\t\t\t\t<ChatButton\n\t\t\t\t\t:size="ButtonSize.L"\n\t\t\t\t\t:color="ButtonColor.Success"\n\t\t\t\t\t:text=textStartJoinButtons\n\t\t\t\t\t@click="handleDialogAccess"\n\t\t\t\t/>\n\t\t\t</li>\n\t\t\t<li class="bx-imol-textarea_join-panel-item-button">\n\t\t\t\t<ChatButton\n\t\t\t\t\t:size="ButtonSize.L"\n\t\t\t\t\t:color="ButtonColor.Danger"\n\t\t\t\t\t:text="loc('IMOL_CONTENT_TEXTAREA_JOIN_PANEL_CLOSE')"\n\t\t\t\t\t@click="closeDialog"\n\t\t\t\t/>\n\t\t\t</li>\n\t\t</ul>\n\t`};const E={name:"JoinPanelContainer",components:{OpenLinesButton:d.ChatButton,ChatControlPanel:y,JoinPanel:N},props:{dialogId:{type:String,required:true},isQueueTypeAll:{type:Boolean,required:true}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},session(){return this.$store.getters["sessions/getByChatId"](this.dialog.chatId,true)},isNewSession(){if(!this.session){return false}return this.session.status===m.StatusGroup.new},isOperator(){const t=g.Core.getUserId();return t===this.session.operatorId},isClosed(){return this.session?this.session.isClosed:false}},template:`\n\t\t<div class="bx-imol-textarea_join-panel-container">\n\t\t\t<ChatControlPanel v-if="(isNewSession && isOperator) || isQueueTypeAll" :dialogId="dialogId" :isQueueTypeAll="isQueueTypeAll"/>\n\t\t\t<JoinPanel v-else :dialogId="dialogId" :isClosed="isClosed" :isNewSession="isNewSession"/>\n\t\t</div>\n\t`};const M={name:"OpenLinesHeader",components:{ChatHeader:f.ChatHeader,ChatTransfer:b},props:{dialogId:{type:String,required:true},isQueueTypeAll:{type:Boolean,required:true}},data(){return{showChatTransferPopup:false}},computed:{dialog(){return this.$store.getters["chats/get"](this.dialogId,true)},session(){return this.$store.getters["sessions/getByChatId"](this.dialog.chatId,true)},isPinned(){return this.session?this.session.pinned:false},isClosed(){return this.session?this.session.isClosed:false},isOwner(){const t=this.dialog.ownerId;if(!t){return false}const e=g.Core.getUserId();return t===e},isNewSession(){if(!this.session){return false}return this.session.status===m.StatusGroup.new},isOperator(){const t=g.Core.getUserId();return t===this.session.operatorId},textForPinButton(){return this.isPinned?this.loc("IMOL_CONTENT_HEADER_BUTTON_UNPIN"):this.loc("IMOL_CONTENT_HEADER_BUTTON_PIN")},classIconButtonPin(){return this.isPinned?"fa-link-slash":"fa-link"}},methods:{onMarkSpam(){return this.getFinishService().markSpamChat(this.dialogId)},onFinish(){return this.getFinishService().finishChat(this.dialogId)},onPin(){if(this.isPinned){return this.getPinService().unpinChat(this.dialogId)}return this.getPinService().pinChat(this.dialogId)},onIntercept(){return this.getInterceptService().interceptDialog(this.dialogId)},openChatTransferPopup(){this.showChatTransferPopup=true},getFinishService(){if(!this.finishService){this.finishService=new C.FinishService}return this.finishService},getPinService(){if(!this.pinService){this.pinService=new C.PinService}return this.pinService},getInterceptService(){if(!this.interceptService){this.interceptService=new C.InterceptService}return this.interceptService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-imol-header-button_container">\n\t\t\t<ChatHeader :dialogId="dialogId" :withCallButton="false" :withSearchButton="false">\n\t\t\t\t<template v-if="!isClosed" #before-actions>\n\t\t\t\t\t<ul v-if="isOperator || isNewSession" class="bx-imol-header-button_container-list">\n\t\t\t\t\t\t<li v-if="isOperator || isQueueTypeAll" class="bx-imol-header-button_container-item">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t:title="loc('IMOL_CONTENT_HEADER_BUTTON_SPAM')"\n\t\t\t\t\t\t\t\tclass="bx-imol-header-button__icon-container"\n\t\t\t\t\t\t\t\t@click="onMarkSpam"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<i class="bx-imol-header-button__icon fa-solid fa-triangle-exclamation fa-lg"></i>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<template v-if="isOwner">\n\t\t\t\t\t\t\t<li class="bx-imol-header-button_container-item">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t:title="loc('IMOL_CONTENT_HEADER_BUTTON_FINISH')"\n\t\t\t\t\t\t\t\t\tclass="bx-imol-header-button__icon-container"\n\t\t\t\t\t\t\t\t\t@click="onFinish"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<i class="bx-imol-header-button__icon fa-regular fa-circle-check fa-lg"></i>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li class="bx-imol-header-button_container-item">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t:title="textForPinButton"\n\t\t\t\t\t\t\t\t\tclass="bx-imol-header-button__icon-container"\n\t\t\t\t\t\t\t\t\t@click="onPin"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<i class="bx-imol-header-button__icon fa-solid fa-lg" :class="classIconButtonPin"></i>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li class="bx-imol-header-button_container-item">\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t:title="loc('IMOL_CONTENT_BUTTON_TRANSFER')"\n\t\t\t\t\t\t\t\t\t:class="{'--active': showChatTransferPopup}"\n\t\t\t\t\t\t\t\t\tclass="bx-imol-header-button__icon-container"\n\t\t\t\t\t\t\t\t\t@click="openChatTransferPopup"\n\t\t\t\t\t\t\t\t\tref="transfer-chat"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<i class="bx-imol-header-button__icon fa-solid fa-arrows-turn-right fa-lg"></i>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</template>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div v-else class="bx-imol-header-button_container-item">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t:title="loc('IMOL_CONTENT_HEADER_BUTTON_INTERCEPT')"\n\t\t\t\t\t\t\tclass="bx-imol-header-button__icon-container"\n\t\t\t\t\t\t\t@click="onIntercept"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<i class="bx-imol-header-button__icon fa-solid fa-arrows-left-right fa-xl"></i>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</ChatHeader>\n\t\t\t<ChatTransfer\n\t\t\t\t:bindElement="$refs['transfer-chat'] || {}"\n\t\t\t\t:dialogId="dialogId"\n\t\t\t\t:showPopup="showChatTransferPopup"\n\t\t\t\t:popupConfig="{offsetTop: 15, offsetLeft: -300}"\n\t\t\t\t@close="showChatTransferPopup = false"\n\t\t\t/>\n\t\t</div>\n\t`};const P={name:"OpenLinesTextarea",components:{ChatTextarea:T.ChatTextarea},props:{dialogId:{type:String,default:""}},template:`\n\t\t<ChatTextarea\n\t\t\t:dialogId="dialogId"\n\t\t\t:key="dialogId"\n\t\t\t:withAudioInput="false"\n\t\t>\n\t\t</ChatTextarea>\n\t`};class w extends S.MessageMenu{getMenuItems(){return[this.getReplyItem(),this.getCopyItem(),this.getForwardItem(),this.getFavoriteItem(),this.getDelimiter(),this.getDownloadFileItem(),this.getDelimiter(),this.getEditItem(),this.getDelimiter(),this.getDeleteItem(),this.getDelimiter(),this.getMarkItem(),this.getDelimiter(),this.getSelectItem()]}}const A={name:"OpenLinesContent",components:{BaseChatContent:f.BaseChatContent,JoinPanelContainer:E,OpenLinesHeader:M,ChatDialog:s.ChatDialog,OpenLinesTextarea:P},props:{dialogId:{type:String,required:true}},computed:{queueType(){const t=this.getSessionByDialogId(this.dialogId);const e=this.$store.getters["queue/getTypeById"](t.queueId,true);return t?e:null},isQueueTypeAll(){return this.queueType===o.QueueType.all}},created(){this.registerMessageMenu()},methods:{registerMessageMenu(){S.MessageMenuManager.getInstance().registerMenuByCallback((t=>{const e=this.$store.getters["chats/get"](t.dialogId);return e.type===h.ChatType.lines}),w)},getSessionByDialogId(t){return this.$store.getters["recentOpenLines/getSession"](t,true)}},template:`\n\t\t<BaseChatContent :dialogId="dialogId">\n\t\t\t<template #header>\n\t\t\t\t<OpenLinesHeader :dialogId="dialogId" :key="dialogId" :isQueueTypeAll="isQueueTypeAll" />\n\t\t\t</template>\n\t\t\t<template #textarea="{ onTextareaMount }">\n\t\t\t\t<OpenLinesTextarea :dialogId="dialogId" @mounted="onTextareaMount"/>\n\t\t\t</template>\n\t\t\t<template #join-panel>\n\t\t\t\t<JoinPanelContainer :dialogId="dialogId" :isQueueTypeAll="isQueueTypeAll"/>\n\t\t\t</template>\n\t\t</BaseChatContent>\n\t`};const k={computed:{backgroundStyle(){return I.ThemeManager.getCurrentBackgroundStyle()}},methods:{loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-imol-content-openlines-start__container" :style="backgroundStyle">\n\t\t\t<div class="bx-imol-content-openlines-start__content">\n\t\t\t\t<div class="bx-imol-content-openlines-start__icon --default"></div>\n\t\t\t\t<div class="bx-imol-content-openlines-start__title">\n\t\t\t\t\t{{ loc('IMOL_CONTENT_START_MESSAGE') }}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const D={name:"OpenLinesOpener",components:{EmptyState:k,OpenLinesContent:A},props:{dialogId:{type:String,required:true}},watch:{dialogId(t,e){n.Logger.warn(`OpenLinesContent: switching from ${e||"empty"} to ${t}`);void this.loadChat()}},created(){if(!this.dialogId){return}void this.loadChat()},methods:{async loadChat(){if(this.dialogId===""){return}n.Logger.warn(`OpenLinesContent: loading openlines ${this.dialogId}`);await this.getChatService().loadChatWithMessages(this.dialogId).catch((()=>{u.Messenger.openLines()}));n.Logger.warn(`OpenLinesContent: openlines ${this.dialogId} is loaded`)},getChatService(){if(!this.chatService){this.chatService=new i.ChatService}return this.chatService},loc(t){return this.$Bitrix.Loc.getMessage(t)}},template:`\n\t\t<div class="bx-imol-content-default-openlines__container bx-imol-messenger__scope">\n\t\t\t<EmptyState v-if="!dialogId" />\n\t\t\t<OpenLinesContent\n\t\t\t\tv-else\n\t\t\t\t:dialogId="dialogId"\n\t\t\t/>\n\t\t</div>\n\t`};const X={name:"OpenLinesContent",components:{OpenLinesOpener:D},props:{entityId:{type:String,default:""}},template:`\n\t\t<OpenLinesOpener :dialogId="entityId" />\n\t`};t.OpenLinesContent=X})(this.BX.OpenLines.v2.Component.Content=this.BX.OpenLines.v2.Component.Content||{},BX.OpenLines.v2.Css,BX.Messenger.v2.Lib,BX.Messenger.v2.Service,BX.Messenger.v2.Component.Dialog,BX.OpenLines.v2.Lib,BX.Main,BX.Messenger.v2.Component.Elements,BX.UI.EntitySelector,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Messenger.v2.Component.Elements,BX.Messenger.v2.Const,BX.Messenger.v2.Lib,BX.Messenger.v2.Application,BX.OpenLines.v2.Const,BX.OpenLines.v2.Provider.Service,BX.Messenger.v2.Component.Content,BX.Messenger.v2.Component,BX.Messenger.v2.Lib,BX.Messenger.v2.Lib);
//# sourceMappingURL=openlines.bundle.map.js