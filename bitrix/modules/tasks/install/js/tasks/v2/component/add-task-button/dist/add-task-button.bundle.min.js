this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};(function(t,i,s,e,n,o,a,h,l,d){"use strict";const r={name:"AddTaskButton",components:{UiButton:s.Button,Hint:e.Hint},props:{taskId:{type:[Number,String],required:true},size:{type:String,default:s.ButtonSize.LARGE},hasError:{type:Boolean,default:false}},emits:["addTask","update:hasError"],data(){return{fieldContainer:null,isPopupShown:false,isLoading:false,errorReason:null}},computed:{task(){return this.$store.getters[`${n.Model.Tasks}/getById`](this.taskId)},isUploading(){return d.fileService.get(this.taskId).isUploading()},isCheckListUploading(){var t;return(t=this.task.checklist)==null?void 0:t.some((t=>d.fileService.get(t,d.EntityTypes.CheckListItem).isUploading()))},isDisabled(){return this.task.title.trim()===""||this.isUploading||this.isCheckListUploading||this.isLoading}},watch:{hasError(t){if(t===true){this.isLoading=false}}},methods:{handleClick(){if(!this.isDisabled){this.isLoading=true;this.$emit("update:hasError",false);this.$emit("addTask");return}if(this.task.title.trim()===""){setTimeout((()=>this.highlightTitle()))}else if(this.isUploading){setTimeout((()=>this.highlightFiles()))}else if(this.isCheckListUploading){setTimeout((()=>this.highlightChecklist()))}},highlightTitle(){this.errorReason=this.loc("TASKS_V2_TITLE_IS_EMPTY");this.fieldContainer=l.fieldHighlighter.setContainer(this.$root.$el).addHighlight(o.titleMeta.id);this.fieldContainer.querySelector("textarea").focus();this.showPopup()},highlightFiles(){this.errorReason=this.loc("TASKS_V2_FILE_IS_UPLOADING");this.fieldContainer=l.fieldHighlighter.setContainer(this.$root.$el).addChipHighlight(a.filesMeta.id);this.showPopup()},highlightChecklist(){this.errorReason=this.loc("TASKS_V2_FILE_IS_UPLOADING");this.fieldContainer=l.fieldHighlighter.setContainer(this.$root.$el).addChipHighlight(h.checkListMeta.id);this.showPopup()},showPopup(){const t=()=>{this.isPopupShown=false;i.Event.unbind(window,"keydown",t)};i.Event.bind(window,"keydown",t);this.isPopupShown=true}},template:`\n\t\t<div\n\t\t\tclass="tasks-add-task-button-container"\n\t\t\t:class="{ '--disabled': isDisabled }"\n\t\t\t:data-task-id="taskId"\n\t\t\tdata-task-button-id="create"\n\t\t\t@click="handleClick"\n\t\t>\n\t\t\t<UiButton\n\t\t\t\tclass="tasks-add-task-button"\n\t\t\t\t:text="loc('TASKS_V2_ADD_TASK')"\n\t\t\t\t:size="size"\n\t\t\t\t:disabled="isDisabled"\n\t\t\t\t:loading="isLoading && !hasError"\n\t\t\t/>\n\t\t</div>\n\t\t<Hint\n\t\t\tv-if="isPopupShown"\n\t\t\t:bindElement="fieldContainer"\n\t\t\t@close="isPopupShown = false"\n\t\t>\n\t\t\t{{ errorReason }}\n\t\t</Hint>\n\t`};t.AddTaskButton=r})(this.BX.Tasks.V2.Component=this.BX.Tasks.V2.Component||{},BX,BX.Vue3.Components,BX.Tasks.V2.Component.Elements,BX.Tasks.V2.Const,BX.Tasks.V2.Component.Fields,BX.Tasks.V2.Component.Fields,BX.Tasks.V2.Component.Fields,BX.Tasks.V2.Lib,BX.Tasks.V2.Provider.Service);
//# sourceMappingURL=add-task-button.bundle.map.js