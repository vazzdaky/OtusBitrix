this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};this.BX.Tasks.V2.Component=this.BX.Tasks.V2.Component||{};(function(t,e,s,i,n,a,d,l,o,r,c,h,u){"use strict";const p=u.Extension.getSettings("tasks.v2.component.fields.deadline").calendarSettings;const T=t=>`0${t}`.slice(-2);const m=`${T(p.HOURS.END.H)}:${T(p.HOURS.END.M)}`;const k={components:{BIcon:d.BIcon},inject:["analytics","cardType"],props:{taskId:{type:[Number,String],required:true}},emits:["update","close"],setup(){return{Outline:l.Outline,today:new Date,datePicker:null,dateTs:null,hour:null}},computed:{task(){return this.$store.getters[`${r.Model.Tasks}/getById`](this.taskId)},presets(){const[t,e,s]=[this.today.getFullYear(),this.today.getMonth(),this.today.getDate()];const i=n.DateTimeFormat.getFormat("DAY_OF_WEEK_MONTH_FORMAT");return[{id:`today-${this.taskId}`,title:this.loc("TASKS_V2_DEADLINE_TODAY"),date:new Date(t,e,s)},{id:`tomorrow-${this.taskId}`,title:this.loc("TASKS_V2_DEADLINE_TOMORROW"),date:new Date(t,e,s+1)},{id:`end-week-${this.taskId}`,title:this.loc("TASKS_V2_DEADLINE_IN_THE_END_OF_THE_WEEK"),date:new Date(t,e,s-this.today.getDay()+5)},{id:`in-week-${this.taskId}`,title:this.loc("TASKS_V2_DEADLINE_IN_A_WEEK"),date:new Date(t,e,s+7)},{id:`month-${this.taskId}`,title:this.loc("TASKS_V2_DEADLINE_IN_THE_END_OF_THE_MONTH"),date:new Date(t,e+1,0)}].map((t=>({id:t.id,title:t.title,timestamp:t.date.getTime(),formatted:n.DateTimeFormat.format(i,t.date)})))}},created(){this.datePicker=this.createDatePicker();const t=new Date(this.task.deadlineTs+c.timezone.getOffset(this.task.deadlineTs));this.dateTs=new Date(t.getFullYear(),t.getMonth(),t.getDate()).getTime();this.hour=t.getHours()},mounted(){this.datePicker.setTargetNode(this.$refs.picker);this.datePicker.show()},beforeUnmount(){this.datePicker.destroy()},methods:{createDatePicker(){const t=c.timezone.getOffset(this.task.deadlineTs);const e=new a.DatePicker({selectedDates:this.task.deadlineTs?[this.task.deadlineTs+t]:null,defaultTime:m,inline:true,enableTime:true,events:{[a.DatePickerEvent.SELECT]:t=>{const{date:e}=t.getData();const s=this.createDateFromUtc(e);const i=s.getTime();this.$emit("update",i-c.timezone.getOffset(i))}}});e.getPicker("day").subscribe("onSelect",(t=>{const{year:e,month:s,day:i}=t.getData();const n=new Date(e,s,i).getTime();this.close();this.sendAnalytics(r.Analytics.Element.Calendar);this.dateTs=n}));e.getPicker("time").subscribe("onSelect",(t=>{const{hour:e,minute:s}=t.getData();if(u.Type.isNumber(s)||e===this.hour){this.close()}this.sendAnalytics(r.Analytics.Element.Calendar);this.hour=e}));return e},createDateFromUtc(t){return new Date(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes())},focusDate(t){this.datePicker.setFocusDate(t)},selectPresetDate(t){const e=new Date(t);const[s,i,n]=[e.getFullYear(),e.getMonth(),e.getDate()];this.datePicker.selectDate(new Date(`${i+1}/${n}/${s} ${m}`));this.sendAnalytics(r.Analytics.Element.DeadlinePreset);this.close()},close(){this.$emit("close")},sendAnalytics(t){h.analytics.sendDeadlineSet(this.analytics,{cardType:this.cardType,element:t})}},template:`\n\t\t<div class="tasks-field-deadline-popup">\n\t\t\t<div class="tasks-field-deadline-presets">\n\t\t\t\t<template v-for="(preset, index) of presets" :key="index">\n\t\t\t\t\t<div\n\t\t\t\t\t\t:data-task-preset-id="preset.id"\n\t\t\t\t\t\tclass="tasks-field-deadline-preset"\n\t\t\t\t\t\t@click="selectPresetDate(preset.timestamp)"\n\t\t\t\t\t\t@mouseenter="focusDate(preset.timestamp)"\n\t\t\t\t\t\t@mouseleave="focusDate(null)"\n\t\t\t\t\t>\n\t\t\t\t\t\t<div class="tasks-field-deadline-preset-title">{{ preset.title }}</div>\n\t\t\t\t\t\t<div class="tasks-field-deadline-preset-date">{{ preset.formatted }}</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t\t<div class="tasks-field-deadline-picker-container">\n\t\t\t\t<div class="tasks-field-deadline-picker" ref="picker">\n\t\t\t\t\t<BIcon v-if="false" class="tasks-field-deadline-picker-settings" :name="Outline.FILTER_2_LINES"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div v-if="false" class="tasks-field-deadline-settings">\n\t\t\t</div>\n\t\t</div>\n\t`};const D={components:{Popup:s.Popup,DeadlinePopupContent:k},props:{taskId:{type:[Number,String],required:true},bindElement:{type:HTMLElement,required:true}},emits:["update","close"],computed:{popupOptions(){return{id:`tasks-field-deadline-popup-${this.taskId}`,bindElement:this.bindElement,padding:24,offsetTop:5,offsetLeft:-100,targetContainer:document.body}}},methods:{clear(){this.deadlineTs=null},handleUpdate(t){this.deadlineTs=t;this.$emit("update",t)},handleClose(){if(this.deadlineTs){void i.taskService.update(this.taskId,{deadlineTs:this.deadlineTs})}this.$emit("close")}},template:`\n\t\t<Popup\n\t\t\t:options="popupOptions"\n\t\t\t@close="handleClose"\n\t\t>\n\t\t\t<DeadlinePopupContent :taskId="taskId" @update="handleUpdate" @close="handleClose"/>\n\t\t</Popup>\n\t`};const f=Object.freeze({id:"deadlineTs",title:u.Loc.getMessage("TASKS_V2_DEADLINE_TITLE")});const E={components:{BIcon:d.BIcon,DeadlinePopup:D},props:{taskId:{type:[Number,String],required:true}},setup(){return{deadlineMeta:f,Outline:l.Outline}},data(){return{nowTs:Date.now(),isPopupShown:false,selectingDeadlineTs:null}},computed:{task(){return this.$store.getters[`${r.Model.Tasks}/getById`](this.taskId)},deadlineTs(){var t;return(t=this.selectingDeadlineTs)!=null?t:this.task.deadlineTs},expiredDuration(){if(!this.deadlineTs){return 0}return this.nowTs-this.deadlineTs},isExpired(){return this.expiredDuration>0&&!this.isFlowFilledOnAdd},expiredFormatted(){return this.loc("TASKS_V2_DEADLINE_EXPIRED",{"#EXPIRED_DURATION#":new n.DurationFormat(this.expiredDuration).formatClosest()})},deadlineFormatted(){if(this.isFlowFilledOnAdd){return this.loc("TASKS_V2_DEADLINE_AUTO")}if(!this.deadlineTs){return this.loc("TASKS_V2_DEADLINE_EMPTY")}const t=new Date(this.deadlineTs).getFullYear()===(new Date).getFullYear();const e=n.DateTimeFormat.getFormat(t?"DAY_MONTH_FORMAT":"LONG_DATE_FORMAT");const s=n.DateTimeFormat.getFormat("SHORT_TIME_FORMAT");const i=c.timezone.getOffset(this.deadlineTs);return n.DateTimeFormat.format(`${e} ${s}`,(this.deadlineTs+i)/1e3)},iconName(){if(this.isFlowFilledOnAdd){return l.Outline.BOTTLENECK}return l.Outline.CALENDAR_WITH_SLOTS},isEdit(){return Number.isInteger(this.taskId)&&this.taskId>0},isFlowFilledOnAdd(){return this.task.flowId>0&&!this.isEdit},readonly(){return!this.task.rights.deadline||this.isFlowFilledOnAdd}},mounted(){e.heightTransition.animate(this.$refs.container);this.nowTsInterval=setInterval((()=>{this.nowTs=Date.now()}),1e3)},updated(){e.heightTransition.animate(this.$refs.container)},beforeUnmount(){clearInterval(this.nowTsInterval)},methods:{handleClick(){if(this.readonly){return}this.isPopupShown=true},handleCrossClick(t){var e;t.stopPropagation();(e=this.$refs.popup)==null?void 0:e.clear();void i.taskService.update(this.taskId,{deadlineTs:0})},handleUpdate(t){this.selectingDeadlineTs=t},handleClose(){var t;this.isPopupShown=false;this.selectingDeadlineTs=null;(t=this.$refs.deadline)==null?void 0:t.focus()},handleKeydown(t){if(t.key==="Enter"&&!(t.ctrlKey||t.metaKey)){void this.handleClick()}}},template:`\n\t\t<div\n\t\t\tclass="tasks-field-deadline"\n\t\t\t:class="{ '--expired': isExpired }"\n\t\t\t:data-task-id="taskId"\n\t\t\t:data-task-field-id="deadlineMeta.id"\n\t\t\t:data-task-field-value="task.deadlineTs"\n\t\t\tref="container"\n\t\t>\n\t\t\t<div\n\t\t\t\tclass="tasks-field-deadline-main"\n\t\t\t\t:class="{ '--readonly': readonly }"\n\t\t\t\tref="deadline"\n\t\t\t\ttabindex="0"\n\t\t\t\t@click="handleClick"\n\t\t\t\t@keydown="handleKeydown"\n\t\t\t>\n\t\t\t\t<BIcon class="tasks-field-deadline-icon" :name="iconName"/>\n\t\t\t\t<div class="tasks-field-deadline-text">{{ deadlineFormatted }}</div>\n\t\t\t\t<BIcon\n\t\t\t\t\tv-if="deadlineTs && !readonly"\n\t\t\t\t\tclass="tasks-field-deadline-cross"\n\t\t\t\t\t:name="Outline.CROSS_L"\n\t\t\t\t\t@click.capture="handleCrossClick"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div v-if="isExpired" class="tasks-field-deadline-expired">{{ expiredFormatted }}</div>\n\t\t</div>\n\t\t<DeadlinePopup\n\t\t\tv-if="isPopupShown"\n\t\t\t:taskId="taskId"\n\t\t\t:bindElement="$refs.deadline"\n\t\t\tref="popup"\n\t\t\t@update="handleUpdate"\n\t\t\t@close="handleClose"\n\t\t/>\n\t`};t.Deadline=E;t.deadlineMeta=f})(this.BX.Tasks.V2.Component.Fields=this.BX.Tasks.V2.Component.Fields||{},BX.Tasks.V2.Lib,BX.UI.Vue3.Components,BX.Tasks.V2.Provider.Service,BX.Main,BX.UI.DatePicker,BX.UI.IconSet,BX.UI.IconSet,BX,BX.Tasks.V2.Const,BX.Tasks.V2.Lib,BX.Tasks.V2.Lib,BX);
//# sourceMappingURL=deadline.bundle.map.js