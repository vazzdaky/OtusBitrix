this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};this.BX.Tasks.V2.Component=this.BX.Tasks.V2.Component||{};(function(t,e,i,n,o,s,r,d,a,l,c,p,h,u,m){"use strict";const k=Object.freeze({toolbar:[],floatingToolbar:["bold","italic","underline","strikethrough","|","numbered-list","bulleted-list","|","link"],removePlugins:["BlockToolbar"],visualOptions:{borderWidth:0,blockSpaceInline:0,colorBackground:"transparent"},mention:{dialogOptions:{entities:[{id:h.EntitySelectorEntity.User,options:{emailUsers:true,inviteEmployeeLink:false},itemOptions:{default:{link:"",linkTitle:""}}},{id:h.EntitySelectorEntity.StructureNode,options:{selectMode:"usersOnly",allowFlatDepartments:false}}]}},copilot:{copilotOptions:{}},paragraphPlaceholder:"auto"});const I={components:{BIcon:n.BIcon},props:{title:{type:String,default:""},iconName:{type:String,required:true},iconColor:{type:String,default:""}},setup(){return{Outline:n.Outline}},template:`\n\t\t<button class="tasks-card-description-action-button" type="button" :title="title">\n\t\t\t<BIcon :name="iconName" :color="iconColor"/>\n\t\t</button>\n\t`};const f={name:"TaskDescriptionCopilot",components:{ActionButton:I,Outline:n.Outline},setup(){return{Outline:n.Outline}},computed:{buttonColor(){return"var(--ui-color-copilot-primary)"}},methods:{handleClick(){alert("Not implemented yet")}},template:`\n\t\t<ActionButton\n\t\t\t:iconName="Outline.COPILOT"\n\t\t\t:title="loc('TASKS_V2_DESCRIPTION_ACTION_COPILOT_TITLE')"\n\t\t\t:iconColor="buttonColor"\n\t\t\t@click="handleClick"\n\t\t/>\n\t`};const E={name:"TaskDescriptionMention",components:{ActionButton:I,Outline:n.Outline},setup(){return{Outline:n.Outline}},methods:{handleClick(){alert("Not implemented yet")}},template:`\n\t\t<ActionButton\n\t\t\t:iconName="Outline.ATTACH"\n\t\t\t:title="loc('TASKS_V2_DESCRIPTION_ACTION_ATTACH_TITLE')"\n\t\t\t@click="handleClick"\n\t\t/>\n\t`};const T={name:"TaskDescriptionMention",components:{ActionButton:I,Outline:n.Outline},setup(){return{Outline:n.Outline}},template:`\n\t\t<ActionButton\n\t\t\t:iconName="Outline.MENTION"\n\t\t\t:title="loc('TASKS_V2_DESCRIPTION_ACTION_MENTION_TITLE')"\n\t\t/>\n\t`};const C={name:"TaskDescriptionContent",components:{BIcon:n.BIcon,TextEditorComponent:c.TextEditorComponent,HtmlFormatterComponent:i.HtmlFormatterComponent,Popup:d.Popup,Button:e.Button,Copilot:f,Attach:E,Mention:T},props:{taskId:{type:[Number,String],required:true},doOpenInEditMode:{type:Boolean,default:false},isExpanded:{type:Boolean,default:null}},emits:["close","editorResize","show","expand"],setup(){return{editor:null,ButtonSize:e.ButtonSize,ButtonColor:e.ButtonColor,Outline:n.Outline}},data(){return{isEditMode:false,isWarningPopupShown:false,files:[]}},computed:{task(){return this.$store.getters[`${h.Model.Tasks}/getById`](this.taskId)},popupOptions(){return{className:"tasks-card-description-warning-popup",width:380,padding:24,autoHide:false,closeByEsc:false,overlay:true}},readonly(){return!this.task.rights.edit}},async created(){const t={minHeight:100,placeholder:this.loc("TASKS_V2_DESCRIPTION_EDITOR_PLACEHOLDER"),content:this.task.description,events:{onChange:this.handleChange},file:{mode:"disk"}};this.editor=new c.TextEditor({...k,...t});this.isEditMode=this.doOpenInEditMode;this.files=await m.fileService.get(this.taskId).list(this.task.fileIds);this.editor.dispatchCommand(c.Plugins.File.ADD_FILES_COMMAND,this.files)},mounted(){this.$emit("show");if(this.task.description.length===0){this.isEditMode=true}},methods:{handleChange(){this.$emit("editorResize")},handleCloseIconClick(){if(this.isEditMode&&this.editor.getText()!==this.task.description){this.isWarningPopupShown=true;return}this.$emit("close");this.editor.setText(this.task.description)},handleSaveButtonClick(){void u.taskService.update(this.taskId,{description:this.editor.getText()});this.isEditMode=false;if(this.task.description.length===0){this.$emit("close")}},handleCancelButtonClick(){this.isEditMode=false;this.editor.setText(this.task.description);if(this.task.description.length===0){this.$emit("close")}},handleEditButtonClick(){void this.enableEdit()},async enableEdit(){this.isEditMode=true;await this.$nextTick();this.focusToEnd()},async adjustEditor(){if(this.editor.getMaxHeight()!==this.$refs.editorWrapper.offsetHeight){this.setMaxHeight(this.$refs.editorWrapper.offsetHeight)}},setMaxHeight(t){this.editor.setMaxHeight(t);l.Dom.style(this.$refs.htmlFormatterComponent.$el,"max-height",`${t}px`)},showEditor(){l.Dom.show(this.$refs.editorWrapper)},hideEditor(){l.Dom.hide(this.$refs.editorWrapper)},focusToEnd(){this.editor.focus(null,{defaultSelection:"rootEnd"})},handlePopupOkButtonClick(){this.$emit("close");this.editor.setText(this.task.description)},handlePopupCancelButtonClick(){this.isWarningPopupShown=false},onExpandClick(){this.$emit("expand",!this.isExpanded)},onMentionButtonClick(){this.editor.dispatchCommand(BX.UI.TextEditor.Plugins.Mention.INSERT_MENTION_DIALOG_COMMAND)}},template:`\n\t\t<div class="tasks-card-description-wrapper">\n\t\t\t<div class="tasks-card-description-header">\n\t\t\t\t<div class="tasks-card-description-title">\n\t\t\t\t\t{{ loc('TASKS_V2_DESCRIPTION_TITLE') }}\n\t\t\t\t</div>\n\t\t\t\t<BIcon\n\t\t\t\t\tv-if="[true, false].includes(isExpanded)"\n\t\t\t\t\tclass="tasks-card-description-expand-icon"\n\t\t\t\t\t:name="isExpanded ? Outline.COLLAPSE_L : Outline.EXPAND_L"\n\t\t\t\t\t@click="onExpandClick"\n\t\t\t\t/>\n\t\t\t\t<BIcon :name="Outline.CROSS_L" @click="handleCloseIconClick"/>\n\t\t\t</div>\n\t\t\t<div class="tasks-card-description-editor-wrapper" ref="editorWrapper">\n\t\t\t\t<TextEditorComponent v-if="isEditMode" :editor-instance="editor"/>\n\t\t\t\t<HtmlFormatterComponent\n\t\t\t\t\tv-show="!isEditMode"\n\t\t\t\t\tclass="tasks-card-description-view"\n\t\t\t\t\t:bbcode="task.description"\n\t\t\t\t\t:options="{\n\t\t\t\t\t\tfileMode: 'disk',\n\t\t\t\t\t}"\n\t\t\t\t\t:formatData="{ files }"\n\t\t\t\t\tref="htmlFormatterComponent"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div v-if="!readonly" class="tasks-card-description-footer">\n\t\t\t\t<div v-if="isEditMode" class="tasks-card-description-action-list">\n\t\t\t\t\t<Copilot />\n\t\t\t\t\t<Attach/>\n\t\t\t\t\t<Mention @click="onMentionButtonClick"/>\n\t\t\t\t</div>\n\t\t\t\t<div class="tasks-card-description-footer-buttons">\n\t\t\t\t\t<template v-if="isEditMode">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t:text="loc('TASKS_V2_DESCRIPTION_BUTTON_CANCEL')"\n\t\t\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t\t\t:color="ButtonColor.LINK"\n\t\t\t\t\t\t\t@click="handleCancelButtonClick"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t:text="loc('TASKS_V2_DESCRIPTION_BUTTON_SAVE')"\n\t\t\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t\t\t:color="ButtonColor.PRIMARY"\n\t\t\t\t\t\t\t@click="handleSaveButtonClick"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</template>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tv-else\n\t\t\t\t\t\t:text="loc('TASKS_V2_DESCRIPTION_BUTTON_EDIT')"\n\t\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t\t:color="ButtonColor.LINK"\n\t\t\t\t\t\t@click="handleEditButtonClick"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Popup v-if="isWarningPopupShown" :options="popupOptions">\n\t\t\t\t<div class="tasks-card-description-warning-popup-content">\n\t\t\t\t\t<div class="tasks-card-description-warning-popup-title">\n\t\t\t\t\t\t{{ loc('TASKS_V2_DESCRIPTION_WARNING_POPUP_TITLE') }}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="tasks-card-description-warning-popup-description">\n\t\t\t\t\t\t{{ loc('TASKS_V2_DESCRIPTION_WARNING_POPUP_DESCRIPTION') }}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="tasks-card-description-warning-popup-buttons">\n\t\t\t\t\t<Button\n\t\t\t\t\t\t:text="loc('TASKS_V2_DESCRIPTION_WARNING_POPUP_BUTTON_CLOSE')"\n\t\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t\t:color="ButtonColor.PRIMARY"\n\t\t\t\t\t\t@click="handlePopupOkButtonClick"\n\t\t\t\t\t/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\t:text="loc('TASKS_V2_DESCRIPTION_WARNING_POPUP_BUTTON_CANCEL')"\n\t\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t\t:color="ButtonColor.LIGHT_BORDER"\n\t\t\t\t\t\t@click="handlePopupCancelButtonClick"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</Popup>\n\t\t</div>\n\t`};const S={name:"TaskDescriptionEditButton",components:{BIcon:n.BIcon},setup(){return{Outline:n.Outline}},computed:{iconSize(){return 18}},template:`\n\t\t<div class="tasks-card-change-description">\n\t\t\t<BIcon :name="Outline.EDIT_L" :size=iconSize></BIcon>\n\t\t\t<div class="tasks-card-change-description-text">{{ loc('TASKS_V2_CHANGE_DESCRIPTION') }}</div>\n\t\t</div>\n\t`};const v={name:"TaskDescriptionPreview",components:{HtmlFormatterComponent:i.HtmlFormatterComponent,BIcon:n.BIcon},props:{taskId:{type:[Number,String],required:true}},emits:["previewButtonClick"],setup(){return{BIcon:n.BIcon,Outline:o.Outline}},data(){return{isOverflowing:false,files:[]}},computed:{task(){return this.$store.getters[`${h.Model.Tasks}/getById`](this.taskId)},taskDescription(){var t;return(t=this.task.description)!=null?t:""},readonly(){return!this.task.rights.edit},isMoreButtonShown(){return this.isOverflowing||this.readonly}},watch:{async taskDescription(){await this.$nextTick();this.updateIsOverflowing()}},async created(){this.files=await m.fileService.get(this.taskId).list(this.task.fileIds)},async mounted(){setTimeout((()=>this.updateIsOverflowing()),200)},methods:{updateIsOverflowing(){this.isOverflowing=this.$el.offsetHeight-16<this.$refs.htmlFormatter.$el.offsetHeight},onPreviewClick(t){if(t.target.closest("a")){return}this.$emit("previewButtonClick",{doOpenInEditMode:false})},onEditButtonClick(){this.$emit("previewButtonClick",{doOpenInEditMode:true})},onMoreButtonClick(){this.$emit("previewButtonClick",{doOpenInEditMode:false})}},template:`\n\t\t<div class="tasks-card-description-preview">\n\t\t\t<HtmlFormatterComponent\n\t\t\t\t:bbcode="task.description"\n\t\t\t\t:options="{\n\t\t\t\t\tfileMode: 'disk',\n\t\t\t\t}"\n\t\t\t\t:formatData="{ files }"\n\t\t\t\tref="htmlFormatter"\n\t\t\t\t@click="onPreviewClick"\n\t\t\t/>\n\t\t\t<div class="tasks-card-description-preview-button" @click="onMoreButtonClick">\n\t\t\t\t<div v-if="isMoreButtonShown" class="tasks-card-description-preview-button-more">\n\t\t\t\t\t<span class="tasks-card-description-preview-button-text">\n\t\t\t\t\t\t{{ loc('TASKS_V2_DESCRIPTION_PREVIEW_BUTTON_MORE') }}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t\t<div v-else class="tasks-card-description-preview-button-edit">\n\t\t\t\t\t<BIcon\n\t\t\t\t\t\t:size="18"\n\t\t\t\t\t\t:name="Outline.EDIT_L"\n\t\t\t\t\t/>\n\t\t\t\t\t<span class="tasks-card-description-preview-button-text">\n\t\t\t\t\t\t{{ loc('TASKS_V2_DESCRIPTION_PREVIEW_BUTTON_EDIT') }}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t`};const B={name:"TaskDescriptionField",components:{EditButton:S,DescriptionPreview:v},props:{taskId:{type:[Number,String],required:true}},data(){return{isSlotShown:false,doOpenInEditMode:false}},computed:{task(){return this.$store.getters[`${h.Model.Tasks}/getById`](this.taskId)},readonly(){return!this.task.rights.edit}},methods:{onPreviewButtonClick(t){this.doOpenInEditMode=t.doOpenInEditMode===true;this.isSlotShown=true},closeSlot(){this.isSlotShown=false}},template:`\n\t\t<slot :isShown="isSlotShown" :doOpenInEditMode="doOpenInEditMode" :close="closeSlot"></slot>\n\t\t<div\n\t\t\tv-if="!readonly || task.description.length > 0"\n\t\t\tclass="tasks-card-description-field"\n\t\t\t:data-task-id="taskId"\n\t\t\t:data-task-field-id="'description'"\n\t\t>\n\t\t\t<EditButton v-if="task.description.length === 0" @click="isSlotShown = true"></EditButton>\n\t\t\t<DescriptionPreview\n\t\t\t\tv-else\n\t\t\t\t:taskId="taskId"\n\t\t\t\t@previewButtonClick="onPreviewButtonClick"\n\t\t\t/>\n\t\t</div>\n\t`};const O={name:"TaskDescriptionSheet",components:{BottomSheet:r.BottomSheet,DescriptionEditor:C},props:{taskId:{type:[Number,String],required:true},isShown:{type:Boolean,required:true},doOpenInEditMode:{type:Boolean,default:false}},emits:["show","close"],data(){return{isExpanded:false}},computed:{...a.mapGetters({titleFieldOffsetHeight:`${h.Model.Interface}/titleFieldOffsetHeight`})},watch:{titleFieldOffsetHeight(){var t,e;(t=this.$refs.bottomSheet)==null?void 0:t.adjustPosition();void((e=this.$refs.editorComponent)==null?void 0:e.adjustEditor())}},methods:{onAfterEnter(){this.$refs.editorComponent.focusToEnd()},handleShow(){void this.$refs.editorComponent.adjustEditor();this.$emit("show")}},template:`\n\t\t<BottomSheet :isShown="isShown" :isExpanded="isExpanded" @after-enter="onAfterEnter" ref="bottomSheet">\n\t\t\t<DescriptionEditor\n\t\t\t\tref="editorComponent"\n\t\t\t\t:taskId="taskId"\n\t\t\t\t:doOpenInEditMode="doOpenInEditMode"\n\t\t\t\t:isExpanded="isExpanded"\n\t\t\t\t@expand="isExpanded = !isExpanded"\n\t\t\t\t@show="handleShow"\n\t\t\t\t@close="$emit('close')"\n\t\t\t></DescriptionEditor>\n\t\t</BottomSheet>\n\t`};const g={name:"TaskDescriptionPopup",components:{Popup:d.Popup,DescriptionEditor:C},props:{taskId:{type:[Number,String],required:true},isShown:{type:Boolean,required:true},doOpenInEditMode:{type:Boolean,default:false}},emits:["show","close","resize"],setup(){return{resizeObserver:null}},data(){return{popupHeight:0}},computed:{popupId(){return`tasks-field-description-popup-${this.taskId}`},popupOptions(){return{className:"tasks-card-description-popup",minHeight:360,maxHeight:this.popupMaxHeight,width:580,offsetTop:0,padding:0,autoHide:false,closeByEsc:false,animation:{showClassName:"tasks-description-popup-show",closeClassName:"tasks-description-popup-close",closeAnimationType:"animation"},events:{onAfterShow:()=>this.$refs.editorComponent.focusToEnd()}}},popupMaxHeight(){return document.body.offsetHeight-120-this.titleFieldOffsetHeight},task(){return this.$store.getters[`${h.Model.Tasks}/getById`](this.taskId)},...a.mapGetters({titleFieldOffsetHeight:`${h.Model.Interface}/titleFieldOffsetHeight`})},watch:{async titleFieldOffsetHeight(){if(!this.$refs.popupComponent){return}this.resizeEditor();await this.$nextTick();this.onResize()}},created(){this.resizeObserver=new ResizeObserver((t=>{for(const e of t){if(e.target===this.$refs.popupWrapper){this.onResize()}}}))},mounted(){l.Event.bind(window,"resize",this.onResize)},beforeUnmount(){l.Event.unbind(window,"resize",this.onResize)},methods:{onShow(){var t;this.resizeEditor();this.$emit("show",{popupInstance:this.$refs.popupComponent.getPopupInstance()});(t=this.$refs.popupComponent)==null?void 0:t.getPopupInstance().adjustPosition();setTimeout((()=>this.resizeObserver.observe(this.$refs.popupWrapper)),300)},resizeEditor(){var t;const e=(t=this.$refs.popupComponent)==null?void 0:t.getPopupInstance();const i=e.getPopupContainer();this.$refs.editorComponent.hideEditor();l.Dom.style(i,"min-height",0);const n=i.clientHeight;const o=240;const s=document.body.clientHeight-n-o-this.titleFieldOffsetHeight;l.Dom.style(i,"min-height","360px");this.$refs.editorComponent.showEditor();this.$refs.editorComponent.setMaxHeight(s);e.setOffset()},onResize(){var t;const e=(t=this.$refs.popupComponent)==null?void 0:t.getPopupInstance();if(e){this.$emit("resize");e.adjustPosition()}},onClose(){this.resizeObserver.disconnect();this.$emit("close")}},template:`\n\t\t<Popup v-if="isShown" :options="popupOptions" ref="popupComponent">\n\t\t\t<div class="tasks-card-description-popup-wrapper" ref="popupWrapper">\n\t\t\t\t<DescriptionEditor\n\t\t\t\t\tref="editorComponent"\n\t\t\t\t\t:taskId="taskId"\n\t\t\t\t\t:doOpenInEditMode="doOpenInEditMode"\n\t\t\t\t\t@show="onShow"\n\t\t\t\t\t@close="onClose"\n\t\t\t\t></DescriptionEditor>\n\t\t\t</div>\n\t\t</Popup>\n\t`};const w={name:"TaskDescriptionInline",components:{TextEditorComponent:c.TextEditorComponent},props:{taskId:{type:[Number,String],required:true}},setup(){return{editor:null,DefaultEditorOptions:k}},data(){return{isFocused:false,isScrolledToTop:true,isScrolledToBottom:true}},computed:{task(){return this.$store.getters[`${h.Model.Tasks}/getById`](this.taskId)},taskDescription(){return this.task.description}},created(){const t={minHeight:20,maxHeight:112,placeholder:this.loc("TASKS_V2_DESCRIPTION_INLINE_EDITOR_PLACEHOLDER"),content:this.taskDescription,events:{onFocus:()=>this.handleEditorFocus(),onBlur:()=>this.handleEditorBlur(),onChange:()=>this.handleEditorChange()}};this.editor=new c.TextEditor({...k,...t});l.Event.bind(this.editor.getScrollerContainer(),"scroll",this.handleScroll)},beforeUnmount(){l.Event.unbind(this.editor.getScrollerContainer(),"scroll",this.handleScroll)},methods:{hasScroll(){return!this.isScrolledToTop||!this.isScrolledToBottom},async handleEditorFocus(){this.isFocused=true},async handleEditorBlur(){this.isFocused=false;const t=this.editor.getText();void u.taskService.update(this.taskId,{description:t})},handleEditorChange(){this.handleScroll()},handleScroll(){const t=this.editor.getScrollerContainer();this.isScrolledToTop=t.scrollTop===0;this.isScrolledToBottom=t.scrollTop+t.clientHeight>=t.scrollHeight-5},async handlePaste(t){if(!this.isFocused){return}const e=m.fileService.get(this.taskId);void e.uploadFromClipboard({clipboardEvent:t})}},template:`\n\t\t<div\n\t\t\tclass="tasks-card-description-inline"\n\t\t\t:class="{ '--bottom-shadow': !isScrolledToBottom, '--top-shadow': !isScrolledToTop }"\n\t\t\t:data-task-id="taskId"\n\t\t\t:data-task-field-id="'description'"\n\t\t\t@paste="handlePaste"\n\t\t>\n\t\t\t<div class="tasks-card-description-inline-shadow --revert" :class="{'--shown': !isScrolledToTop}">\n\t\t\t\t<div class="tasks-card-description-inline-shadow-white"/>\n\t\t\t\t<div class="tasks-card-description-inline-shadow-black"/>\n\t\t\t</div>\n\t\t\t<TextEditorComponent :editor-instance="editor"/>\n\t\t\t<div class="tasks-card-description-inline-shadow" :class="{'--shown': !isScrolledToBottom}">\n\t\t\t\t<div class="tasks-card-description-inline-shadow-white"/>\n\t\t\t\t<div class="tasks-card-description-inline-shadow-black"/>\n\t\t\t</div>\n\t\t</div>\n\t`};t.DescriptionEditor=C;t.DescriptionField=B;t.DescriptionSheet=O;t.DescriptionPopup=g;t.DescriptionInline=w})(this.BX.Tasks.V2.Component.Fields=this.BX.Tasks.V2.Component.Fields||{},BX.Vue3.Components,BX.UI.BBCode.Formatter,BX.UI.IconSet,BX.UI.IconSet,BX,BX.Tasks.V2.Component.Elements,BX.UI.Vue3.Components,BX.Vue3.Vuex,BX,BX.UI.TextEditor,BX.Tasks.V2.Model,BX.Tasks.V2.Const,BX.Tasks.V2.Provider.Service,BX.Tasks.V2.Provider.Service);
//# sourceMappingURL=description.bundle.map.js