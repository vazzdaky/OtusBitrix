"use strict";jn.define("call/calls/controller",((e,t,i)=>{const{AnalyticsEvent:l}=e("analytics");const{Analytics:a,DialogType:n,EventType:s}=e("call/const");const{CallLayout:o}=e("call/calls/layout");const{Notification:r}=e("im/messenger/lib/ui/notification");const{Theme:c}=e("im/lib/theme");const{Icon:d}=e("assets/icons");const{Loc:h}=e("loc");const{Tourist:C}=e("tourist");const{Toast:u}=jn.require("native/notify");const v=`${currentDomain}/bitrix/mobileapp/callmobile/extensions/call/calls/controller/`;class g{constructor(){this.callView=null;this.callViewPromise=null;this.startCallPromise=null;this.localVideoPromise=null;this.localVideoStream=null;this.callProvider=null;this._currentCall=null;Object.defineProperty(this,"currentCall",{get:()=>this._currentCall,set:e=>{if(this._currentCall!=e){BX.postComponentEvent("CallEvents::hasActiveCall",[!!e],"communication");this._currentCall=e}}});this.childCall=null;this.callStartTime=null;this.callTimerInterval=null;this.callWithLegacyMobile=false;this.nativeCall=null;this.chatCounter=0;this.callInviteTime=null;this.callDeclineTimeout=35e3;this.callVideoEnabled=false;this.ignoreJoinAnalyticsEvent=false;this.ignoreLeaveAnalyticsEvent=false;this.onCallUserInvitedHandler=this.onCallUserInvited.bind(this);this.onCallUserJoinedHandler=this.onCallUserJoined.bind(this);this.onCallUserStateChangedHandler=this.onCallUserStateChanged.bind(this);this.onCallUserMicrophoneStateHandler=this.onCallUserMicrophoneState.bind(this);this.onCallUserScreenStateHandler=this.onCallUserScreenState.bind(this);this.onCallUserVideoPausedHandler=this.onCallUserVideoPaused.bind(this);this.onCallUsersLimitExceededHandler=this.onCallUsersLimitExceeded.bind(this);this.onCallUserVoiceStartedHandler=this.onCallUserVoiceStarted.bind(this);this.onCallUserVoiceStoppedHandler=this.onCallUserVoiceStopped.bind(this);this.onCallUserFloorRequestHandler=this.onCallUserFloorRequest.bind(this);this.onCallUserEmotionHandler=this.onCallUserEmotion.bind(this);this.onCallLocalMediaReceivedHandler=this.onCallLocalMediaReceived.bind(this);this.onCallLocalMediaStoppedHandler=this.onCallLocalMediaStopped.bind(this);this.onCallRTCStatsReceivedHandler=this.onCallRTCStatsReceived.bind(this);this.onCallCallFailureHandler=this.onCallCallFailure.bind(this);this.onCallStreamReceivedHandler=this.onCallStreamReceived.bind(this);this.onCallStreamRemovedHandler=this.onCallStreamRemoved.bind(this);this.onCallJoinHandler=this.onCallJoin.bind(this);this.onCallLeaveHandler=this.onCallLeave.bind(this);this.onCallDestroyHandler=this.onCallDestroy.bind(this);this.onCallHangupHandler=this.onCallHangup.bind(this);this.onChildCallFirstStreamHandler=this.onChildCallFirstStream.bind(this);this.onCallTimeoutHandler=this.onCallTimeout.bind(this);this.onCallReconnectedHandler=this.onCallReconnected.bind(this);this.onUpdateCallCopilotStateHandler=this.onUpdateCallCopilotState.bind(this);this.onRecorderStatusChangedHandler=this.onRecorderStatusChanged.bind(this);this.onChatUsersCountUpdateHandler=this.onChatUsersCountUpdate.bind(this);this.onAllParticipantsVideoMutedHandler=this.onAllParticipantsVideoMuted.bind(this);this.onAllParticipantsAudioMutedHandler=this.onAllParticipantsAudioMuted.bind(this);this.onAllParticipantsScreenshareMutedHandler=this.onAllParticipantsScreenshareMuted.bind(this);this.onParticipantAudioMutedHandler=this.onParticipantAudioMuted.bind(this);this.onParticipantVideoMutedHandler=this.onParticipantVideoMuted.bind(this);this.onParticipantScreenshareMutedHandler=this.onParticipantScreenshareMuted.bind(this);this.onUserPermissionsChangedHandler=this.onUserPermissionsChanged.bind(this);this.onRoomSettingsChangedHandler=this.onRoomSettingsChanged.bind(this);this.onCallConnectedHandler=this.onCallConnected.bind(this);this.onMicButtonClickHandler=this.onMicButtonClick.bind(this);this.onFloorRequestButtonClickHandler=this.onFloorRequestButtonClick.bind(this);this.onCameraButtonClickHandler=this.onCameraButtonClick.bind(this);this.onReplaceCameraClickHandler=this.onReplaceCameraClick.bind(this);this.onChatButtonClickHandler=this.onChatButtonClick.bind(this);this.onPrivateChatButtonClickHandler=this.onPrivateChatButtonClick.bind(this);this.onAnswerButtonClickHandler=this.onAnswerButtonClick.bind(this);this.onHangupButtonClickHandler=this.onHangupButtonClick.bind(this);this.onDeclineButtonClickHandler=this.onDeclineButtonClick.bind(this);this.onSetCentralUserHandler=this.onSetCentralUser.bind(this);this.onSelectAudioDeviceHandler=this.onSelectAudioDevice.bind(this);this.onToggleSubscriptionRemoteVideoHandler=this.onToggleSubscriptionRemoteVideo.bind(this);this.onChangeStateCopilotHandler=this.onChangeStateCopilot.bind(this);this.onRecordStateHandler=this.onRecordState.bind(this);this.onNativeCallAnsweredHandler=this.onNativeCallAnswered.bind(this);this.onNativeCallEndedHandler=this.onNativeCallEnded.bind(this);this.onNativeCallMutedHandler=this.onNativeCallMuted.bind(this);this.onNativeCallVideoIntentHandler=this.onNativeCallVideoIntent.bind(this);this._nativeAnsweredAction=null;this.ignoreNativeCallAnswer=false;this.onProximitySensorDebounced=CallUtil.debounce(this.onProximitySensor.bind(this),500);this.init();this.isAppPaused=false;this.canProximitySensorBeEnabled=false;this.lastCalledChangeSettingsUserName=h.getMessage("CALLMOBILE_DEFAULT_NAME_OF_MODERATOR")}init(){BX.addCustomEvent("onCallInvite",this.onCallInvite.bind(this));BX.addCustomEvent("CallEvents::incomingCall",this.onIncomingCall.bind(this));BX.addCustomEvent(s.callMobile.chatUserChanged,this.onChatUserChanged.bind(this));BX.addCustomEvent("CallEvents::joinCall",this.onJoinCall.bind(this));BX.addCustomEvent("onAppActive",this.onAppActive.bind(this));BX.addCustomEvent("onAppPaused",this.onAppPaused.bind(this));BX.addCustomEvent("ImRecent::counter::messages",this.onImMessagesCounter.bind(this));BX.addCustomEvent(s.imMobile.setCurrentUser,this.onSetCurrentUser.bind(this));BX.PULL.subscribe({type:"server",moduleId:"im",command:"callUserNameUpdate",callback:this.onCallUserNameUpdate.bind(this)});device.on("proximityChanged",this.onProximitySensorDebounced)}getCallType(){if(!this.currentCall){return""}const e=this.currentCall.associatedEntity.type==="chat"&&this.currentCall.associatedEntity.advanced["chatType"]==="videoconf";const t=this.callProvider===BX.Call.Provider.Plain?a.AnalyticsType.private:a.AnalyticsType.group;return e?a.AnalyticsType.videoconf:t}getAssociatedEntityType(){if(!this.currentCall||!this.currentCall?.associatedEntity?.advanced){return""}return this.currentCall.associatedEntity.advanced.chatType}getAssociatedEntityId(){if(!this.currentCall){return""}return this.currentCall.associatedEntity.advanced.entityId}_getCallIdentifier(e){if(!e){return null}return CallUtil.isLegacyCall(e.provider)?e.id:e.uuid}sendStartCallAnalytics(){const e=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(a.AnalyticsEvent.startCall).setType(this.getCallType()).setStatus(a.AnalyticsStatus.success).setP1(this.currentCall.isVideoEnabled()?a.AnalyticsEvent.cameraOn:a.AnalyticsEvent.cameraOff).setP2(this.currentCall.isMuted()?a.AnalyticsEvent.micOff:a.AnalyticsEvent.micOn).setP3(this.currentCall.isCopilotActive?a.AnalyticsAIStatus.aiOn:a.AnalyticsAIStatus.aiOff).setP5(`callId_${this._getCallIdentifier(this.currentCall)}`);if(this.getAssociatedEntityType()===n.collab){const t=this.getAssociatedEntityId();e.setP4(`collabId_${t}`)}e.send()}sendStartCallErrorAnalytics(e){const t=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(a.AnalyticsEvent.startCall).setType(this.getCallType()).setStatus(`error_${e}`).setP3(this.currentCall.isCopilotActive?a.AnalyticsAIStatus.aiOn:a.AnalyticsAIStatus.aiOff).setP5("callId_0");t.send()}sendJoinCallAnalytics(e,t,i,s){const o=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(a.AnalyticsEvent.connect).setType(this.getCallType()).setStatus(e).setP3(this.getAnalyticsUserType()).setP5(`callId_${this._getCallIdentifier(this.currentCall)}`);if(t){o.setP1(t.video?a.AnalyticsEvent.cameraOn:a.AnalyticsEvent.cameraOff);o.setP2(t.audio?a.AnalyticsEvent.micOff:a.AnalyticsEvent.micOn)}if(i){o.setSection(i)}if(s){o.setElement(s)}if(this.getAssociatedEntityType()===n.collab){const e=this.getAssociatedEntityId();o.setP4(`collabId_${e}`)}o.send()}sendJoinCallErrorAnalytics(e,t){const i=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(a.AnalyticsEvent.connect).setType(this.getCallType()).setStatus(`error_${e}`).setP3(this.currentCall.isCopilotActive?a.AnalyticsAIStatus.aiOn:a.AnalyticsAIStatus.aiOff).setP5(`callId_${t}`);i.send()}sendStartCopilotRecordAnalytics(e=null){const t={AI_UNAVAILABLE_ERROR:a.AnalyticsStatus.errorB24,AI_SETTINGS_ERROR:a.AnalyticsStatus.errorB24,AI_AGREEMENT_ERROR:a.AnalyticsStatus.errorAgreement,AI_NOT_ENOUGH_BAAS_ERROR:a.AnalyticsStatus.errorLimitBaas};const i=(new l).setTool(a.AnalyticsTool.ai).setCategory(a.AnalyticsCategory.callsOperations).setEvent(a.AnalyticsEvent.aiRecordStart).setType(this.getCallType()).setStatus(e?t[e]:a.AnalyticsStatus.success).setSection(a.AnalyticsSection.callFollowup).setP5(`callId_${this._getCallIdentifier(this.currentCall)}`);const n=this.getActiveCallUsers().length;if(n){i.setP3(n+1)}i.send()}onCallInvite(e){const t=e.dialogId||e.userId;if(!t){CallUtil.error("Can not start call. No userId or dialogId in event");navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#","E001"));return}const i=e.chatData||{};const l=e.userData||{};const a={advanced:{chatType:i.type,entityType:i.entityType,entityId:i.entityId,entityData1:i.entityData1,entityData2:i.entityData2,entityData3:i.entityData3},id:i.dialogId,chatId:i.chatId,name:i.name,avatar:decodeURI(i.avatar)||"/bitrix/js/im/images/blank.gif",avatarColor:i.color,type:i.type,userCounter:i.userCounter};this.startCall(t,e.video,a,l)}maybeShowLocalVideo(e){if(this.localVideoPromise){return this.localVideoPromise}this.localVideoPromise=new Promise(((t,i)=>{if(!e){return t()}MediaDevices.getUserMedia({audio:true,video:true}).then((e=>{this.localVideoStream=e;if(!this.startCallPromise){this.stopLocalVideoStream(true)}else if(this.callView){this.callView.setVideoStream(env.userId,this.localVideoStream,MediaDevices.cameraDirection==="front")}t()})).catch((e=>i(e)))}));return this.localVideoPromise}stopLocalVideoStream(e=false){if(this.localVideoStream){if(e){MediaDevices.stopStreaming();this.localVideoStream=null;return}MediaDevices.stopCapture()}}startCall(e,t,i={},l={}){console.log("CallController.startCall",e,t,i);if(!CallUtil.isDeviceSupported()){CallUtil.error(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));navigator.notification.alert(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));return}if(this.callView||this.currentCall){if(this.currentCall?.associatedEntity.id===e){this.onJoinCall({callId:this.currentCall.id,callUuid:this.currentCall.uuid,associatedEntity:i});return}else{r.showToastWithParams({message:h.getMessage("CALLMOBILE_MESSAGE_HAS_ACTIVE_CALL_HINT"),icon:d.ALERT,backgroundColor:c.colors.accentMainAlert});return}}e=e.toString();const n=callEngine.getCallWithDialogId(e);if(n){this.joinCall({video:t,callId:n.id,callUuid:n.uuid,associatedEntity:n.associatedEntity});return}let s=BX.Call.Provider.Plain;const o=e.toString().slice(0,4)==="chat";if(o){if(callEngine.isBitrixCallServerEnabled()){s=BX.Call.Provider.Bitrix}else if(callEngine.isCallServerAllowed()){s=BX.Call.Provider.Voximplant}}let C=false;this.onConnectToCallClick=Date.now();C=CallUtil.isLegacyCall(s);if(!C&&!CallUtil.isJwtCallsSupported()){CallUtil.error(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));navigator.notification.alert(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));this.clearEverything();return}if(o&&callEngine.isBitrixCallServerEnabled()){this.startCallPromise=this.requestDeviceAccess(t).then((()=>{this.maybeShowLocalVideo(t);return this.openCallView({status:"outgoing",isGroupCall:o,associatedEntityName:i.name,associatedEntityAvatar:i.avatar,associatedEntityAvatarColor:i.avatarColor,cameraState:t,chatCounter:this.chatCounter,copilotAvailable:CallUtil.isAIServiceEnabled(i.type==="videoconf"),copilotEnabled:false},t)})).then((()=>{CallUtil.setUserData(l);this.callView.updateUserData(l);this.callView.updateTotalUsersCount(i.userCounter);BX.postComponentEvent("CallEvents::viewOpened",[]);BX.postWebEvent("CallEvents::viewOpened",{});this.bindViewEvents();media.audioPlayer().playSound("call_start");return this.maybeShowLocalVideo(t)})).then((()=>{this.callProvider=s;const l={type:i.type==="videoconf"?BX.Call.Type.Permanent:BX.Call.Type.Instant,entityType:"chat",entityId:e,provider:s,videoEnabled:Boolean(t),joinExisting:o,chatInfo:i};return C?callEngine.createLegacyCall(l):callEngine.createJwtCall(l)})).then((e=>{console.log("startCall.BitrixDev.createCall.createResult",e);this.currentCall=e.call;this.bindCallEvents();if(!this.callView){if(this.currentCall){this.currentCall.cancel()}this.clearEverything();return}callInterface.indicator().setMode("outgoing");device.setIdleTimerDisabled(true);this.changeProximitySensorStatus(true);this.callView.updateCopilotState(this.currentCall.isCopilotActive);if(C){this.callView.appendUsers(this.currentCall.getUsers());CallUtil.getUsers(this.currentCall.id,this.getCallUsers(true)).then((e=>this.callView.updateUserData(e)))}media.audioPlayer().playSound("call_outgoing",10);if(e.isNew){this.sendStartCallAnalytics();this.ignoreJoinAnalyticsEvent=true;if(this.currentCall.isCopilotActive){this.sendStartCopilotRecordAnalytics()}this.currentCall.inviteUsers()}else{if(i.userCounter>this.getMaxActiveMicrophonesCount()){this.muteMicDevice(true)}this.sendJoinCallAnalytics(a.AnalyticsStatus.success,{video:this.currentCall.isVideoEnabled(),audio:this.currentCall.isMuted()},a.AnalyticsSection.chatWindow,a.AnalyticsElement.videocall);this.ignoreJoinAnalyticsEvent=true;this.callView.setState({status:"call"});this.currentCall.answer({useVideo:t})}})).catch((e=>{console.error("startCall.BitrixDev.createCall.createResult.catch",e);CallUtil.error(e);let i=e.code;if(e instanceof DeviceAccessError){CallUtil.showDeviceAccessConfirm(t,(()=>Application.openSettings()));i=e.name}else if(e instanceof CallJoinedElseWhereError){navigator.notification.alert(BX.message("MOBILE_CALL_ALREADY_JOINED"));i=e.name}else if("code"in e&&e.code==="ALREADY_FINISHED"){navigator.notification.alert("MOBILE_CALL_ALREADY_FINISHED")}else{navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#",`${e.code}`))}this.sendStartCallErrorAnalytics(i);this.clearEverything()}));return}this.startCallPromise=this.requestDeviceAccess(t).then((()=>{this.maybeShowLocalVideo(t);return this.openCallView({status:"outgoing",isGroupCall:o,associatedEntityName:i.name,associatedEntityAvatar:i.avatar,associatedEntityAvatarColor:i.avatarColor,cameraState:t,chatCounter:this.chatCounter,copilotAvailable:CallUtil.isAIServiceEnabled(false),copilotEnabled:false},t)})).then((()=>{BX.postComponentEvent("CallEvents::viewOpened",[]);BX.postWebEvent("CallEvents::viewOpened",{});this.bindViewEvents();media.audioPlayer().playSound("call_start");return this.maybeShowLocalVideo(t)})).then((()=>{this.callProvider=s;C=CallUtil.isLegacyCall(s);const l={entityType:"chat",entityId:e,provider:s,videoEnabled:Boolean(t),joinExisting:o,chatInfo:i};return C?callEngine.createLegacyCall(l):callEngine.createJwtCall(l)})).then((e=>{this.currentCall=e.call;this.bindCallEvents();callInterface.indicator().setMode("outgoing");device.setIdleTimerDisabled(true);this.changeProximitySensorStatus(true);this.callView.appendUsers(this.currentCall.getUsers());this.callView.updateCopilotState(this.currentCall.isCopilotActive);if(C){CallUtil.getUsers(this.currentCall.id,this.getCallUsers(true)).then((e=>this.callView.updateUserData(e)))}this.callView.updateTotalUsersCount(i.userCounter);media.audioPlayer().playSound("call_outgoing",10);if(e.isNew){this.sendStartCallAnalytics();this.currentCall.inviteUsers();if(this.currentCall.isCopilotActive){this.sendStartCopilotRecordAnalytics()}}else{this.sendJoinCallAnalytics(a.AnalyticsStatus.success,{video:this.currentCall.isVideoEnabled(),audio:this.currentCall.isMuted()});this.callView.setState({status:"call"});this.currentCall.answer({useVideo:t})}})).catch((e=>{CallUtil.error(e);let i=e.code;if(e instanceof DeviceAccessError){CallUtil.showDeviceAccessConfirm(t,(()=>Application.openSettings()));i=e.name}else if(e instanceof CallJoinedElseWhereError){navigator.notification.alert(BX.message("MOBILE_CALL_ALREADY_JOINED"));i=e.name}else if("code"in e&&e.code==="ALREADY_FINISHED"){navigator.notification.alert("MOBILE_CALL_ALREADY_FINISHED")}else{navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#",`${e.code}`))}this.sendStartCallErrorAnalytics(i);this.clearEverything()}))}joinCall(e){if(this.callView||this.currentCall){return}let t=false;let i=BX.Call.Provider.Plain;const l=e.associatedEntity.id.toString().slice(0,4)==="chat";if(l&&callEngine.isBitrixCallServerEnabled()){i=BX.Call.Provider.Bitrix}else if(l&&callEngine.isCallServerAllowed()){i=BX.Call.Provider.Voximplant}const a=callEngine.legacyCalls[e.callId]||callEngine.jwtCalls[e.callUuid];if(a){i=a.provider}t=CallUtil.isLegacyCall(i,a?.scheme);if(!t&&!CallUtil.isJwtCallsSupported()){CallUtil.error(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));navigator.notification.alert(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));this.clearEverything();return}this.requestDeviceAccess(e.video).then((()=>{this.onConnectToCallClick=Date.now();const a={provider:i,type:e.associatedEntity.type==="videoconf"?BX.Call.Type.Permanent:BX.Call.Type.Instant,entityType:"chat",entityId:e.associatedEntity.id,videoEnabled:Boolean(e.video),joinExisting:l,roomId:e.callUuid,chatInfo:e.associatedEntity};return t?callEngine.getLegacyCallWithId(e.callId):callEngine.getJwtCallWithId(e.callUuid,a)})).then((e=>{this.currentCall=e.call;device.setIdleTimerDisabled(true);this.changeProximitySensorStatus(true);const t=this.currentCall.associatedEntity.advanced["chatType"]==="videoconf";return this.openCallView({status:"call",chatCounter:this.chatCounter,isGroupCall:true,associatedEntityName:this.currentCall.associatedEntity.name,associatedEntityAvatar:this.currentCall.associatedEntity.avatar?CallUtil.makeAbsolute(this.currentCall.associatedEntity.avatar):"",associatedEntityAvatarColor:this.currentCall.associatedEntity.avatarColor,copilotAvailable:CallUtil.isAIServiceEnabled(t),copilotEnabled:this.currentCall.isCopilotActive})})).then((()=>{if(!this.currentCall){this.clearEverything();return}this.bindViewEvents();this.callView.appendUsers(this.currentCall.getUsers());if(this.currentCall.associatedEntity.userCounter>this.getMaxActiveMicrophonesCount()){this.muteMicDevice(true)}if(t){CallUtil.getUsers(this.currentCall.id,this.getCallUsers(true)).then((e=>this.callView.updateUserData(e)))}this.callView.updateTotalUsersCount(e.associatedEntity.userCounter);this.bindCallEvents();this.currentCall.answer({useVideo:!!e.video})})).catch((i=>{CallUtil.error(i);let l=i?.code;if(i.code&&i.code=="ALREADY_FINISHED"){navigator.notification.alert(BX.message("MOBILE_CALL_ALREADY_FINISHED"))}else if(i instanceof CallJoinedElseWhereError){navigator.notification.alert(BX.message("MOBILE_CALL_ALREADY_JOINED"));l=i.name}else if(i instanceof DeviceAccessError){CallUtil.showDeviceAccessConfirm(e.video,(()=>Application.openSettings()));l=i.name}else{navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#",`${i.code}`))}const a=t?e.callId:e.callUuid;this.sendJoinCallErrorAnalytics(l,a)}))}onIncomingCall(e){CallUtil.warn("CallController.onIncomingCall",e);const t=callEngine.legacyCalls[e.callId]||callEngine.jwtCalls[e.callUuid];if(!this.canCallBeAnswered(t)){return}this.callInviteTime=Date.now();if(!CallUtil.isDeviceSupported()){InAppNotifier.showNotification({message:BX.message("MOBILE_CALL_UNSUPPORTED_VERSION")});return}const i=e.provider;if(!CallUtil.isLegacyCall(i,t?.scheme)&&!CallUtil.isJwtCallsSupported()){CallUtil.error(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));InAppNotifier.showNotification({message:BX.message("MOBILE_CALL_UNSUPPORTED_VERSION")});this.clearEverything();return}const n=i===BX.Call.Provider.Bitrix&&callEngine.isBitrixCallServerEnabled();if(!n&&i!==BX.Call.Provider.Plain&&i!==BX.Call.Provider.Voximplant){return}this.callWithLegacyMobile=e.isLegacyMobile===true;if(t instanceof CallStub){CallUtil.error("This call is already finished");return}if(this.currentCall){if(this.currentCall.id===t.id||this.currentCall.uuid===t.uuid){}else if(this.currentCall.uuid===t.parentUuid||this.currentCall.id&&this.currentCall.id===t.parentId){if(!this.childCall){this.childCall=t;this.childCall.users.forEach((e=>this.callView.addUser(e,BX.Call.UserState.Calling)));if(e.userData){this.callView.updateUserData(e.userData)}this.callView.setState({isGroupCall:true,associatedEntityName:this.childCall.associatedEntity.name,associatedEntityAvatar:this.childCall.associatedEntity.avatar?CallUtil.makeAbsolute(this.childCall.associatedEntity.avatar):"",associatedEntityAvatarColor:this.childCall.associatedEntity.avatarColor});this.answerChildCall()}}else{CallUtil.warn("can't participate in two calls");const e=t.associatedEntity.type==="chat"&&t.associatedEntity.advanced["chatType"]==="videoconf";const n=i===BX.Call.Provider.Plain?a.AnalyticsType.private:a.AnalyticsType.group;const s=e?a.AnalyticsType.videoconf:n;const o=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(a.AnalyticsEvent.connect).setType(s).setStatus(a.AnalyticsStatus.busy).setP5(`callId_${this._getCallIdentifier(t)}`);o.send();t.decline(486)}return}if(this.callView){CallUtil.error("call view already exists");return}const s=e.video===true;this.currentCall=callEngine.legacyCalls[e.callId]||callEngine.jwtCalls[e.callUuid];if("callservice"in window){const e=callservice.currentCall();if(e&&e.params.type==="internal"&&e.params.call.ID==t.id){this.nativeCall=e;if(Application.isBackground()){CallUtil.warn("Waking up p&p");CallUtil.forceBackgroundConnectPull(10).then((()=>{if(this.currentCall){this.currentCall.repeatAnswerEvents();CallUtil.warn("checking self state");callEngine.getRestClient().callMethod("im.call.getUserState",{callId:this.currentCall.id}).then((e=>{const t=e.data();const i=t.STATE;if(Application.isBackground()&&i!=="calling"){this.clearEverything()}})).catch((e=>{CallUtil.error(e);if(Application.isBackground()){Application.isBackground()}}))}})).catch((e=>{CallUtil.error("Could not connect to p&p",e);this.clearEverything()}))}}}device.setIdleTimerDisabled(true);this.changeProximitySensorStatus(true);this.bindCallEvents();this.bindNativeCallEvents();this.callProvider=i;this.showIncomingCall({video:s,viewStatus:e.autoAnswer?"call":"incoming",isGroupCall:i!==BX.Call.Provider.Plain}).then((()=>{CallUtil.warn("showIncomingCall success");if(this.currentCall&&e.autoAnswer){CallUtil.warn("auto-answer A");this.onAnswerButtonClick(s)}if(this.nativeCall&&this.nativeCall.connected&&!this.callAnswered){CallUtil.warn("Native call is connected, but we did not receive answered event.");this.answerCurrentCall(this.nativeCall.params.video)}})).catch((e=>{CallUtil.error(e);this.clearEverything()}))}answerCurrentCall(e){media.audioPlayer().stopPlayingSound();if(!this.currentCall){CallUtil.error("no call to answer");this.clearEverything();return}if(this.callAnswered){CallUtil.log("Call already answered");return}this.callAnswered=true;const t=CallUtil.isLegacyCall(this.currentCall.provider,this.currentCall?.scheme);const i=!t&&!tokenManager.getTokenCached(this.currentCall.associatedEntity.chatId);const l=i?tokenManager.getToken(this.currentCall.associatedEntity.chatId):Promise.resolve();l.then((()=>t?Promise.resolve():CallUtil.getCallConnectionDataById(this.currentCall.uuid))).then((i=>{if(!t){this.currentCall.setConnectionData({mediaServerUrl:i.result.mediaServerUrl,roomData:i.result.roomData})}return this.requestDeviceAccess(e)})).then((()=>{if(!e){this.onCallLocalMediaStopped();this.stopLocalVideoStream(true)}this.currentCall.answer({useVideo:e});this.callView.setState({status:"connecting"})})).catch((t=>{CallUtil.error(t);if(t instanceof DeviceAccessError){if(this.currentCall){this.currentCall.decline()}CallUtil.showDeviceAccessConfirm(e,(()=>Application.openSettings()),(()=>{}))}else if(t instanceof CallJoinedElseWhereError){navigator.notification.alert(BX.message("MOBILE_CALL_ALREADY_JOINED"))}else{navigator.notification.alert(BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#",`${t.code}`))}this.clearEverything()}))}answerChildCall(){this.removeCallEvents();this.childCall.on(BX.Call.Event.onStreamReceived,this.onChildCallFirstStreamHandler);this.childCall.on(BX.Call.Event.onLocalMediaReceived,this.onCallLocalMediaReceivedHandler);const e=CallUtil.isLegacyCall(this.childCall.provider,this.childCall?.scheme);if(e){this.childCall.answer({useVideo:this.currentCall.isVideoEnabled()})}else{tokenManager.getToken(this.childCall.associatedEntity.chatId).then((()=>CallUtil.getCallConnectionDataById(this.childCall.uuid))).then((e=>{this.childCall.setConnectionData({mediaServerUrl:e.result.mediaServerUrl,roomData:e.result.roomData});this.childCall.answer({useVideo:this.currentCall.isVideoEnabled()})})).catch((e=>{CallUtil.error(e)}))}}showIncomingCall(e){if(typeof e!=="object"){e={}}const t=this.currentCall.associatedEntity.advanced["chatType"]==="videoconf";e.video=e.video===true;this.startCallPromise=this.requestDeviceAccess(e.video).then((()=>{this.maybeShowLocalVideo(e.video);return this.openCallView({status:e.viewStatus||"incoming",isGroupCall:e.isGroupCall,associatedEntityName:this.currentCall.associatedEntity.name,associatedEntityAvatar:this.currentCall.associatedEntity.avatar?CallUtil.makeAbsolute(this.currentCall.associatedEntity.avatar):"",associatedEntityAvatarColor:this.currentCall.associatedEntity.avatarColor,isVideoCall:e.video,cameraState:false,chatCounter:this.chatCounter,copilotAvailable:CallUtil.isAIServiceEnabled(t),copilotEnabled:this.currentCall.isCopilotActive},e.video)})).then((()=>this.maybeShowLocalVideo(e.video))).then((()=>{if(!this.currentCall){return Promise.reject(new Error("ALREADY_FINISHED"))}if(e.viewStatus=="incoming"){media.audioPlayer().playSound("call_incoming",10)}callInterface.indicator().setMode("incoming");this.bindViewEvents();const t=this.currentCall.getUsers();for(const e in t){this.callView.addUser(e,t[e])}if(this.currentCall.associatedEntity.userCounter>this.getMaxActiveMicrophonesCount()){this.muteMicDevice(true)}this.callView.updateTotalUsersCount(this.currentCall.associatedEntity.userCounter);BX.rest.callMethod("im.call.getUsers",{callId:this.currentCall.id,AVATAR_HR:"Y"}).then((e=>{if(this.callView){this.callView.updateUserData(e.data())}}));Promise.resolve()})).catch((t=>{CallUtil.error(t);if(t instanceof DeviceAccessError){CallUtil.showDeviceAccessConfirm(e.video,(()=>Application.openSettings()))}else if(t.code&&t.code=="ALREADY_FINISHED"){return reject("ALREADY_FINISHED")}}));return this.startCallPromise}onJoinCall(e){if(!CallUtil.isDeviceSupported()){navigator.notification.alert(BX.message("MOBILE_CALL_UNSUPPORTED_VERSION"));return}if(this.currentCall){if(this.currentCall.id==e.callId||this.currentCall.uuid==e.callUuid){this.unfold()}else{CallUtil.error("cannot join 2 calls yet")}}else{let t=0;let i=1;let l=2;let a=3;navigator.notification.confirm("",(n=>{if(n==4||n==t){return}if(n==a){BX.postComponentEvent("onOpenDialog",[{dialogId:e.associatedEntity.id},true],"im.recent");BX.postComponentEvent("ImMobile.Messenger.Dialog:open",[{dialogId:e.associatedEntity.id}],"im.messenger");return}if(n==i||n==l){this.joinCall({video:n==i,...e})}}),BX.message("MOBILE_CALL_JOIN_GROUP_CALL"),[BX.message("MOBILE_CALL_WITH_VIDEO"),BX.message("MOBILE_CALL_WITHOUT_VIDEO"),BX.message("MOBILE_CALL_OPEN_CHAT"),BX.message("MOBILE_CALL_MICROPHONE_CANCEL")])}}onCallHangup(){this.clearEverything()}bindViewEvents(){if(!this.callView){return}this.callView.on(o.Event.MicButtonClick,this.onMicButtonClickHandler);this.callView.on(o.Event.CameraButtonClick,this.onCameraButtonClickHandler);this.callView.on(o.Event.ReplaceCamera,this.onReplaceCameraClickHandler);this.callView.on(o.Event.FloorRequestButtonClick,this.onFloorRequestButtonClickHandler);this.callView.on(o.Event.ChatButtonClick,this.onChatButtonClickHandler);this.callView.on(o.Event.PrivateChatButtonClick,this.onPrivateChatButtonClickHandler);this.callView.on(o.Event.AnswerButtonClick,this.onAnswerButtonClickHandler);this.callView.on(o.Event.HangupButtonClick,this.onHangupButtonClickHandler);this.callView.on(o.Event.DeclineButtonClick,this.onDeclineButtonClickHandler);this.callView.on(o.Event.SetCentralUser,this.onSetCentralUserHandler);this.callView.on(o.Event.SelectAudioDevice,this.onSelectAudioDeviceHandler);this.callView.on(o.Event.ToggleSubscriptionRemoteVideo,this.onToggleSubscriptionRemoteVideoHandler);this.callView.on(o.Event.ToggleCopilot,this.onChangeStateCopilotHandler)}removeViewEvents(){if(!this.callView){return}this.callView.off(o.Event.MicButtonClick,this.onMicButtonClickHandler);this.callView.off(o.Event.CameraButtonClick,this.onCameraButtonClickHandler);this.callView.off(o.Event.ReplaceCamera,this.onReplaceCameraClickHandler);this.callView.off(o.Event.FloorRequestButtonClick,this.onFloorRequestButtonClickHandler);this.callView.off(o.Event.ChatButtonClick,this.onChatButtonClickHandler);this.callView.off(o.Event.PrivateChatButtonClick,this.onPrivateChatButtonClickHandler);this.callView.off(o.Event.AnswerButtonClick,this.onAnswerButtonClickHandler);this.callView.off(o.Event.HangupButtonClick,this.onHangupButtonClickHandler);this.callView.off(o.Event.DeclineButtonClick,this.onDeclineButtonClickHandler);this.callView.off(o.Event.SetCentralUser,this.onSetCentralUserHandler);this.callView.off(o.Event.SelectAudioDevice,this.onSelectAudioDeviceHandler);this.callView.off(o.Event.ToggleSubscriptionRemoteVideo,this.onToggleSubscriptionRemoteVideoHandler);this.callView.off(o.Event.ToggleCopilot,this.onChangeStateCopilotHandler)}bindCallEvents(){if(!this.currentCall){return}this.currentCall.on(BX.Call.Event.onUserInvited,this.onCallUserInvitedHandler).on(BX.Call.Event.onUserJoined,this.onCallUserJoinedHandler).on(BX.Call.Event.onUserStateChanged,this.onCallUserStateChangedHandler).on(BX.Call.Event.onUserMicrophoneState,this.onCallUserMicrophoneStateHandler).on(BX.Call.Event.onUserScreenState,this.onCallUserScreenStateHandler).on(BX.Call.Event.onUserVideoPaused,this.onCallUserVideoPausedHandler).on(BX.Call.Event.onUsersLimitExceeded,this.onCallUsersLimitExceededHandler).on(BX.Call.Event.onUserVoiceStarted,this.onCallUserVoiceStartedHandler).on(BX.Call.Event.onUserVoiceStopped,this.onCallUserVoiceStoppedHandler).on(BX.Call.Event.onUserFloorRequest,this.onCallUserFloorRequestHandler).on(BX.Call.Event.onUserEmotion,this.onCallUserEmotionHandler).on(BX.Call.Event.onLocalMediaReceived,this.onCallLocalMediaReceivedHandler).on(BX.Call.Event.onLocalMediaStopped,this.onCallLocalMediaStoppedHandler).on(BX.Call.Event.onRTCStatsReceived,this.onCallRTCStatsReceivedHandler).on(BX.Call.Event.onCallFailure,this.onCallCallFailureHandler).on(BX.Call.Event.onStreamReceived,this.onCallStreamReceivedHandler).on(BX.Call.Event.onStreamRemoved,this.onCallStreamRemovedHandler).on(BX.Call.Event.onJoin,this.onCallJoinHandler).on(BX.Call.Event.onLeave,this.onCallLeaveHandler).on(BX.Call.Event.onDestroy,this.onCallDestroyHandler).on(BX.Call.Event.onHangup,this.onCallHangupHandler).on(BX.Call.Event.onPullEventUserInviteTimeout,this.onCallTimeoutHandler).on(BX.Call.Event.onReconnected,this.onCallReconnectedHandler).on(BX.Call.Event.onSwitchTrackRecordStatus,this.onUpdateCallCopilotStateHandler).on(BX.Call.Event.onRecorderStatusChanged,this.onRecorderStatusChangedHandler).on(BX.Call.Event.onChatUsersCountUpdate,this.onChatUsersCountUpdateHandler).on(BX.Call.Event.onAllParticipantsVideoMuted,this.onAllParticipantsVideoMutedHandler).on(BX.Call.Event.onAllParticipantsAudioMuted,this.onAllParticipantsAudioMutedHandler).on(BX.Call.Event.onAllParticipantsScreenshareMuted,this.onAllParticipantsScreenshareMutedHandler).on(BX.Call.Event.onParticipantAudioMuted,this.onParticipantAudioMutedHandler).on(BX.Call.Event.onParticipantVideoMuted,this.onParticipantVideoMutedHandler).on(BX.Call.Event.onParticipantScreenshareMuted,this.onParticipantScreenshareMutedHandler).on(BX.Call.Event.onUserPermissionsChanged,this.onUserPermissionsChangedHandler).on(BX.Call.Event.onRoomSettingsChanged,this.onRoomSettingsChangedHandler).on(BX.Call.Event.onCallConnected,this.onCallConnectedHandler).on(BX.Call.Event.onRecordState,this.onRecordStateHandler)}removeCallEvents(){if(!this.currentCall){return}this.currentCall.off(BX.Call.Event.onUserInvited,this.onCallUserInvitedHandler).off(BX.Call.Event.onUserJoined,this.onCallUserJoinedHandler).off(BX.Call.Event.onUserStateChanged,this.onCallUserStateChangedHandler).off(BX.Call.Event.onUserMicrophoneState,this.onCallUserMicrophoneStateHandler).off(BX.Call.Event.onUserScreenState,this.onCallUserScreenStateHandler).off(BX.Call.Event.onUsersLimitExceeded,this.onCallUsersLimitExceededHandler).off(BX.Call.Event.onUserVoiceStarted,this.onCallUserVoiceStartedHandler).off(BX.Call.Event.onUserVoiceStopped,this.onCallUserVoiceStoppedHandler).off(BX.Call.Event.onUserFloorRequest,this.onCallUserFloorRequestHandler).off(BX.Call.Event.onUserEmotion,this.onCallUserEmotionHandler).off(BX.Call.Event.onLocalMediaReceived,this.onCallLocalMediaReceivedHandler).off(BX.Call.Event.onLocalMediaStopped,this.onCallLocalMediaStoppedHandler).off(BX.Call.Event.onRTCStatsReceived,this.onCallRTCStatsReceivedHandler).off(BX.Call.Event.onCallFailure,this.onCallCallFailureHandler).off(BX.Call.Event.onStreamReceived,this.onCallStreamReceivedHandler).off(BX.Call.Event.onStreamRemoved,this.onCallStreamRemovedHandler).off(BX.Call.Event.onJoin,this.onCallJoinHandler).off(BX.Call.Event.onLeave,this.onCallLeaveHandler).off(BX.Call.Event.onDestroy,this.onCallDestroyHandler).off(BX.Call.Event.onHangup,this.onCallHangupHandler).off(BX.Call.Event.onPullEventUserInviteTimeout,this.onCallTimeoutHandler).off(BX.Call.Event.onReconnected,this.onCallReconnectedHandler).off(BX.Call.Event.onSwitchTrackRecordStatus,this.onUpdateCallCopilotStateHandler).off(BX.Call.Event.onRecorderStatusChanged,this.onRecorderStatusChangedHandler).off(BX.Call.Event.onChatUsersCountUpdate,this.onChatUsersCountUpdateHandler).off(BX.Call.Event.onAllParticipantsVideoMuted,this.onAllParticipantsVideoMutedHandler).off(BX.Call.Event.onAllParticipantsAudioMuted,this.onAllParticipantsAudioMutedHandler).off(BX.Call.Event.onAllParticipantsScreenshareMuted,this.onAllParticipantsScreenshareMutedHandler).off(BX.Call.Event.onParticipantAudioMuted,this.onParticipantAudioMutedHandler).off(BX.Call.Event.onParticipantVideoMuted,this.onParticipantVideoMutedHandler).off(BX.Call.Event.onParticipantScreenshareMuted,this.onParticipantScreenshareMutedHandler).off(BX.Call.Event.onUserPermissionsChanged,this.onUserPermissionsChangedHandler).off(BX.Call.Event.onRoomSettingsChanged,this.onRoomSettingsChangedHandler).off(BX.Call.Event.onCallConnected,this.onCallConnectedHandler).off(BX.Call.Event.onRecordState,this.onRecordStateHandler)}bindNativeCallEvents(){if(!this.nativeCall){return}this.nativeCall.on("answered",this.onNativeCallAnsweredHandler).on("ended",this.onNativeCallEndedHandler).on("muted",this.onNativeCallMutedHandler).on("videointent",this.onNativeCallVideoIntentHandler)}prepareWidgetLayer(){return new Promise(((e,t)=>{if(uicomponent.widgetLayer()&&this.rootWidget){return e(this.rootWidget)}uicomponent.createWidgetLayer("layout",{backdrop:{}}).then((t=>e(t))).catch((e=>t(e)))}))}openWidgetLayer(){return new Promise(((e,t)=>{this.prepareWidgetLayer().then((e=>{this.rootWidget=e;this.rootWidget.setListener((e=>{if(e==="onViewRemoved"){if(uicomponent.widgetLayer()){uicomponent.widgetLayer().close().then((()=>{this.rootWidget=null}))}else{this.rootWidget=null}}}));return uicomponent.widgetLayer().show()})).then((()=>e())).catch((e=>t(e)))}))}openCallView(e={},t){if(this.callViewPromise){return this.callViewPromise}this.callViewPromise=new Promise(((i,l)=>{this.openWidgetLayer().then((()=>{CallUtil.warn("creating new CallLayout");this.callView=new o(e);this.rootWidget.showComponent(this.callView);this.callViewPromise=null;const l="background-color: #AA00AA; color: white;";console.log(`%c[debug] Time from click 'Start call' to show call card: ${Date.now()-this.onConnectToCallClick} ms`,l);this.onCallViewRenderToMediaReceived=Date.now();const a=CallUtil.userData[env.userId];if(a){this.callView.updateUserData({[env.userId]:a})}if(t&&this.localVideoStream){this.callView.setVideoStream(env.userId,this.localVideoStream,MediaDevices.cameraDirection==="front")}this.startCheckOutputDevice();i()})).catch((e=>{CallUtil.error(e);this.callViewPromise=null}))}));return this.callViewPromise}async fold(){if(!this.currentCall||!this.callView){return}let e=`${v}img/blank.png`;if(this.currentCall.associatedEntity&&this.currentCall.associatedEntity.avatar&&!CallUtil.isAvatarBlank(this.currentCall.associatedEntity.avatar)){e=encodeURI(CallUtil.makeAbsolute(this.currentCall.associatedEntity.avatar))}await uicomponent.widgetLayer().hide();callInterface.indicator().setMode("active");callInterface.indicator().imageUrl=e;callInterface.indicator().show();callInterface.indicator().once("tap",(()=>this.unfold()));this.changeProximitySensorStatus(false);BX.postComponentEvent("CallEvents::viewClosed",[]);BX.postWebEvent("CallEvents::viewClosed",{})}unfold(){callInterface.indicator().close();if(!this.currentCall||!this.callView){return}uicomponent.widgetLayer().show();this.changeProximitySensorStatus(true);BX.postComponentEvent("CallEvents::viewOpened",[]);BX.postWebEvent("CallEvents::viewOpened",{})}startCallTimer(){this.callTimerInterval=setInterval((()=>{callInterface.indicator().setTime(CallUtil.formatSeconds((Date.now()-this.callStartTime)/1e3))}),1e3)}stopCallTimer(){clearTimeout(this.callTimerInterval);this.callTimerInterval=null}getCallUsers(e){if(!this.currentCall){return[]}const t=Object.keys(this.currentCall.getUsers());if(e){t.push(this.currentCall.userId)}return t}getMaxActiveCallUsers(){const e=this.currentCall.getUsers();let t=[];for(let i in e){if(e.hasOwnProperty(i)){if(e[i]!==BX.Call.UserState.Declined&&e[i]!==BX.Call.UserState.Busy&&e[i]!==BX.Call.UserState.Unavailable){t.push(i)}}}return t}getActiveCallUsers(){const e=this.currentCall.getUsers();let t=[];for(let i in e){if(e.hasOwnProperty(i)){if(e[i]===BX.Call.UserState.Connected||e[i]===BX.Call.UserState.Connecting||e[i]===BX.Call.UserState.Calling){t.push(i)}}}return t}onCallUserNameUpdate(e){const{userId:t,name:i}=e;if(this.callView){this.callView.updateUserData({[t]:{name:i}})}}onImMessagesCounter(e){this.chatCounter=e;if(this.callView){this.callView.setChatCounter(e)}}onSetCurrentUser(e){CallUtil.setUserData(e);if(this.callView){this.callView.updateUserData(e)}}onAppActive(){this.isAppPaused=false;CallUtil.log("onAppActive");if(!this.currentCall){CallUtil.warn("no current call");return}const e=Application.getLastNotification();if(Application.getPlatform()==="android"&&BX.type.isFunction(this.currentCall.isReady)&&!this.currentCall.isReady()&&e.hasOwnProperty("id")&&e.id.startsWith("IM_CALL_")){CallUtil.log("check push");try{const t=JSON.parse(e.params);CallUtil.log(t);const i=t.PARAMS.call;const l=t.PARAMS.video;const a=i.ID;if(a==this.currentCall.id){CallUtil.warn("auto-answer B");this.answerCurrentCall(l)}}catch(e){CallUtil.error(e)}}else{CallUtil.log("onAppActive");this.currentCall.log("onAppActive");this.currentCall.setVideoPaused(false)}}onAppPaused(){this.isAppPaused=true;if(!this.currentCall){return}CallUtil.log("onAppPaused");this.currentCall.log("onAppPaused");this.currentCall.setVideoPaused(true)}onProximitySensor(){if(!this.currentCall||this.isAppPaused){return}if(device.proximityState){this.currentCall.setVideoPaused(true)}else{this.currentCall.setVideoPaused(false)}}onMicButtonClick(){if(!this.currentCall){return}if(!CallUtil.havePermissionToBroadcast("mic")){this.__createHintControlToast({message:h.getMessage("CALLMOBILE_ADMIN_NOT_ALLOWED_TURN_ON_MIC_HINT",{"#NAME#":this.lastCalledChangeSettingsUserName})});return}const e=!this.currentCall.isMuted();const t=e?a.AnalyticsEvent.micOff:a.AnalyticsEvent.micOn;const i=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(t).setType(this.getCallType()).setSection(a.AnalyticsSection.callWindow).setP5(`callId_${this._getCallIdentifier(this.currentCall)}`);i.send();this.muteMicDevice(e)}muteMicDevice(e){this.currentCall.setMuted(e);this.callView.setMuted(e);if(this.nativeCall){this.nativeCall.mute(e)}}onCameraButtonClick(){if(!this.currentCall){return}if(!CallUtil.havePermissionToBroadcast("cam")){this.__createHintControlToast({message:h.getMessage("CALLMOBILE_ADMIN_NOT_ALLOWED_TURN_ON_CAM_HINT",{"#NAME#":this.lastCalledChangeSettingsUserName})});return}const e=!this.currentCall.isVideoEnabled();const t=e?a.AnalyticsEvent.cameraOn:a.AnalyticsEvent.cameraOff;const i=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(t).setType(this.getCallType()).setSection(a.AnalyticsSection.callWindow).setP5(`callId_${this._getCallIdentifier(this.currentCall)}`);i.send();if(this.callWithLegacyMobile){navigator.notification.alert(BX.message("MOBILE_CALL_NO_CAMERA_WITH_LEGACY_APP"),(()=>{}),BX.message("MOBILE_CALL_ERROR"));return}this.switchCameraDeviceState(e)}onReplaceCameraClick(){if(!this.currentCall&&!this.currentCall.videoEnabled){return}this.currentCall.switchCamera();if(Application.getPlatform()==="android"){setTimeout((()=>this.callView.setMirrorLocalVideo(this.currentCall.isFrontCameraUsed())),1e3)}else{this.callView.setHideLocalVideo(true);setTimeout((()=>{this.callView.setMirrorLocalVideo(this.currentCall.isFrontCameraUsed());this.callView.setHideLocalVideo(false)}),100)}}onChatButtonClick(){this.fold().then((()=>{if(this.currentCall){const e=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(a.AnalyticsEvent.clickChat).setType(this.getCallType()).setSection(a.AnalyticsSection.callWindow).setP5(`callId_${this._getCallIdentifier(this.currentCall)}`);e.send();BX.postComponentEvent("onOpenDialog",[{dialogId:this.currentCall.associatedEntity.id},true],"im.recent");BX.postComponentEvent("ImMobile.Messenger.Dialog:open",[{dialogId:this.currentCall.associatedEntity.id}],"im.messenger")}}))}onPrivateChatButtonClick(e){this.fold().then((()=>{BX.postComponentEvent("onOpenDialog",[{dialogId:e},true],"im.recent");BX.postComponentEvent("ImMobile.Messenger.Dialog:open",[{dialogId:e}],"im.messenger")}))}onFloorRequestButtonClick(){const e=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(a.AnalyticsEvent.handOn).setType(this.getCallType()).setSection(a.AnalyticsSection.callWindow).setP5(`callId_${this._getCallIdentifier(this.currentCall)}`);e.send();const t=this.callView.getUserFloorRequestState(env.userId);const i=this.callView.getUserTalking(env.userId);this.callView.setUserFloorRequestState(env.userId,!t);if(this.currentCall){this.currentCall.requestFloor(!t)}clearTimeout(this.callViewFloorRequestTimeout);if(i&&!t){this.callViewFloorRequestTimeout=setTimeout((()=>{if(this.currentCall){this.currentCall.requestFloor(false)}}),1500)}}onAnswerButtonClick(e){CallUtil.log("onAnswerButtonClick");this.sendJoinCallAnalytics(a.AnalyticsStatus.success,{video:e,audio:this.currentCall.isMuted()},a.AnalyticsSection.callPopup,a.AnalyticsElement.answerButton);this.ignoreJoinAnalyticsEvent=true;this.answerCurrentCall(e);if(this.nativeCall){CallUtil.log("looks like the native call is not answered , calling answer");this.ignoreNativeCallAnswer=true;this.nativeCall.answer()}}onHangupButtonClick(){if(this.currentCall){const e=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(a.AnalyticsEvent.disconnect).setType(this.getCallType()).setSection(a.AnalyticsSection.callWindow).setSubSection(a.AnalyticsSubSection.finishButton).setStatus(a.AnalyticsStatus.quit).setP1(this.currentCall.isVideoEnabled()?a.AnalyticsEvent.cameraOn:a.AnalyticsEvent.cameraOff).setP2(this.currentCall.isMuted()?a.AnalyticsEvent.micOff:a.AnalyticsEvent.micOn).setP5(`callId_${this._getCallIdentifier(this.currentCall)}`);this.ignoreLeaveAnalyticsEvent=true;e.send();this.currentCall.hangup()}this.clearEverything()}onDeclineButtonClick(){this.sendJoinCallAnalytics(a.AnalyticsStatus.decline);this.declineCall()}onToggleSubscriptionRemoteVideo(e){if(this.currentCall.toggleSubscriptionRemoteVideoHandler){this.currentCall.toggleSubscriptionRemoteVideoHandler(e)}}onSetCentralUser(e){if(this.currentCall.allowVideoFrom){this.currentCall.allowVideoFrom([e])}if(this.currentCall.onCentralUserSwitch){this.currentCall.onCentralUserSwitch(e)}}onSelectAudioDevice(e){CallUtil.getSdkAudioManager().selectAudioDevice(e);this.changeProximitySensorStatus(this.canProximitySensorBeEnabled,e,null);this.callView.setSoundOutputDevice(e)}onChangeStateCopilot(e){if(!this.currentCall){return}if(CallUtil.isLegacyCall(this.currentCall.provider,this.currentCall?.scheme)){const t=e?"call.Track.start":"call.Track.stop";BX.ajax.runAction(t,{data:{callId:this.currentCall.id}}).then((()=>{const e=!this.currentCall.isCopilotActive;this.onUpdateCallCopilotState({isTrackRecordOn:e,senderId:env.userId});if(e){this.sendStartCopilotRecordAnalytics()}})).catch((e=>{const t=e.errors[0].code;this.sendStartCopilotRecordAnalytics(t)}))}else{const e=!this.currentCall.isCopilotActive;this.onUpdateCallCopilotState({isTrackRecordOn:e,senderId:env.userId});this.currentCall.toggleRecorderState();if(e){this.sendStartCopilotRecordAnalytics()}}}onRecordState(e){if(this.callView){this.callView.setRecordState(e)}}onCallUserInvited(e){if(this.callView){if(CallUtil.isLegacyCall(this.currentCall.provider,this.currentCall?.scheme)){this.callView.addUser(e.userId);CallUtil.getUsers(this.currentCall.id,[e.userId]).then((e=>this.callView.updateUserData(e)))}else{CallUtil.setUserData(e.userData);this.callView.updateUserData(e.userData);this.callView.addUser(e.userId)}}}onCallUserJoined(e){console.log("onCallUserJoined",e);if(this.callView){CallUtil.setUserData(e.userData);this.callView.updateUserData(e.userData);this.callView.addUser(e.userId)}}onCallUserStateChanged(e,t,i,l){console.log("onCallUserStateChanged",e,t);if(this.callView){this.callView.setUserState(e,t)}if(t===BX.Call.UserState.Connecting||t===BX.Call.UserState.Connected){media.audioPlayer().stopPlayingSound()}if(t===BX.Call.UserState.Connected&&!this.callStartTime){this.callStartTime=Date.now();callInterface.indicator().setMode("active");this.startCallTimer()}if(t===BX.Call.UserState.Connected&&this._nativeAnsweredAction){this._nativeAnsweredAction.fullfill();this._nativeAnsweredAction=null}if(l){this.callWithLegacyMobile=true}}onCallUserMicrophoneState(e,t){if(this.callView){this.callView.setUserMicrophoneState(e,t)}}onCallUserScreenState(e,t){if(this.callView){this.callView.setUserScreenState(e,t)}}onCallUserVideoPaused(e,t){if(this.callView){this.callView.setUserVideoPaused(e,t)}}onCallUsersLimitExceeded(){navigator.notification.alert(BX.message("MOBILE_CALL_USERS_LIMIT_EXCEEDED"))}onCallUserVoiceStarted(e){if(this.callView){this.callView.setUserTalking(e,true)}}onCallUserVoiceStopped(e){if(this.callView){this.callView.setUserTalking(e,false)}}onCallUserFloorRequest(e,t){if(this.callView){this.callView.setUserFloorRequestState(e,t)}}onCallUserEmotion(){}onCallLocalMediaReceived(e){if(this.callView){this.callView.setVideoStream(env.userId,e,this.currentCall.isFrontCameraUsed())}if(!(this.currentCall instanceof PlainCall)){this.stopLocalVideoStream()}}onCallLocalMediaStopped(){if(this.callView){this.callView.setVideoStream(env.userId,null)}}onCallRTCStatsReceived(){}onCallCallFailure(e){const t=e===BX.Call.CallError.SecurityKeyChanged?BX.message("CALLMOBILE_SECURITY_KEY_CHANGED").replace("[break]","\n"):BX.message("MOBILE_CALL_INTERNAL_ERROR").replace("#ERROR_CODE#","E003");CallUtil.error("onCallFailure");this.clearEverything();navigator.notification.alert(t)}onCallStreamReceived(e,t){if(this.onCallViewRenderToMediaReceived){const e="background-color: #00F; color: white;";console.log(`%c[debug] Time from view render to the first media received: ${Date.now()-this.onCallViewRenderToMediaReceived} ms`,e);this.onCallViewRenderToMediaReceived=null}if(this.onConnectToCallClick){const e="background-color: #AA00AA; color: white;";console.log(`%c[debug] Time from click to the first media received: ${Date.now()-this.onConnectToCallClick} ms`,e);this.onConnectToCallClick=null}if(this.callView){this.callView.setVideoStream(e,t)}}onCallStreamRemoved(e){if(this.callView){this.callView.setVideoStream(e,null)}}onChildCallFirstStream(e,t){this.currentCall.log("Finishing one-to-one call, switching to group call");this.callView.setVideoStream(e,t);this.childCall.off(BX.Call.Event.onStreamReceived,this.onChildCallFirstStreamHandler);this.removeCallEvents();const i=this.currentCall;const n=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(a.AnalyticsEvent.finishCall).setType(this.getCallType()).setSection(a.AnalyticsSection.callWindow).setStatus(a.AnalyticsStatus.privateToGroup).setP1(`callLength_${CallUtil.getTimeInSeconds(this.callStartTime)}`).setP3(`maxUserCount_${this.getMaxActiveCallUsers().length}`).setP4(`chatId_${this.normalizeChatId(this.currentCall.associatedEntity.id)}`).setP5(`callId_${this._getCallIdentifier(this.currentCall)}`);n.send();i.hangup();this.currentCall=this.childCall;this.childCall=null;if(i.muted){this.muteMicDevice(true)}this.bindCallEvents()}onCallTimeout(){this.sendJoinCallAnalytics(a.AnalyticsStatus.noAnswer);this.declineCall()}declineCall(){if(this.currentCall){this.currentCall.decline()}this.clearEverything()}onCallJoin(e){if(!this.ignoreJoinAnalyticsEvent&&!e.local){this.sendJoinCallAnalytics(a.AnalyticsStatus.success,{video:this.currentCall.isVideoEnabled(),audio:this.currentCall.isMuted()},a.AnalyticsSection.chatList,a.AnalyticsElement.joinButton)}this.ignoreJoinAnalyticsEvent=false;if(e.local){CallUtil.warn("joined local call");return}if(this.currentCall?.uuid===e.callUuid){this.currentCall.hangup()}this.clearEverything()}onCallLeave(e){if(!this.getActiveCallUsers().length&&!this.ignoreLeaveAnalyticsEvent){const e=(new l).setTool(a.AnalyticsTool.im).setCategory(a.AnalyticsCategory.call).setEvent(a.AnalyticsEvent.finishCall).setType(this.getCallType()).setSection(a.AnalyticsSection.callWindow).setStatus(a.AnalyticsStatus.lastUserLeft).setP1(`callLength_${CallUtil.getTimeInSeconds(this.callStartTime)}`).setP3(`maxUserCount_${this.getMaxActiveCallUsers().length}`).setP4(`chatId_${this.normalizeChatId(this.currentCall.associatedEntity.id)}`).setP5(`callId_${this._getCallIdentifier(this.currentCall)}`);e.send()}this.ignoreLeaveAnalyticsEvent=false;if(!e.local&&this.currentCall&&this.currentCall.ready){CallUtil.error(new Error("received remote leave with active call!"));return}this.clearEverything()}onCallDestroy(){this.clearEverything()}onCallReconnected(){if(!this.currentCall){return}const e=this.currentCall.isMuted();this.muteMicDevice(e)}onUpdateCallCopilotState({isTrackRecordOn:e,senderId:t}){if(!this.currentCall){return}if(CallUtil.isLegacyCall(this.currentCall.provider,this.currentCall?.scheme)){this.currentCall.isCopilotActive=e}this.callView.updateCopilotState(this.currentCall.isCopilotActive);if(e&&t!==env.userId){C.ready().then((()=>{if(C.rememberFirstTime("call_copilot_popup_shown")){this.callView.toggleCopilotPopup(true)}})).catch((e=>{console.error(e)}))}}switchCameraDeviceState(e){if(!CallUtil.havePermissionToBroadcast("cam")&&e){return}MediaDevices.requestCameraAccess().then((()=>{this.currentCall.setVideoEnabled(e);this.callView.setCameraState(e);this.changeProximitySensorStatus(this.canProximitySensorBeEnabled,null,e)})).catch((()=>{navigator.notification.alert(BX.message("MOBILE_CALL_MICROPHONE_CAN_NOT_ACCESS_CAMERA"),(()=>{}),BX.message("MOBILE_CALL_MICROPHONE_ACCESS_DENIED"));this.changeProximitySensorStatus(this.canProximitySensorBeEnabled,null,false)}))}__createCallControlToast(e){const t=new u({message:e.message,time:5,position:"top",offset:10,backgroundColor:"#085DC1"},this.rootWidget);t.show()}__createHintControlToast(e){const t=new u({message:e.message,time:5,offset:10,position:"top"},this.rootWidget);t.show()}onAllParticipantsAudioMuted(e){if(env.userId!=e.fromUserId){this.muteMicDevice(true);const t=this.callView.userRegistry.get(e.fromUserId);const i=t.data.gender?t.data.gender.toUpperCase():"M";let l="CALLMOBILE_USER_TURNED_OFF_MIC_FOR_ALL_"+i;const a=CallUtil.getCustomMessage(l,{gender:i,name:t.data.name});this.__createCallControlToast({message:a,avatarUrl:t.data.avatar})}}onParticipantAudioMuted(e){if(env.userId==e.toUserId){this.muteMicDevice(true);const t=this.callView.userRegistry.get(e.fromUserId);const i=t.data.gender?t.data.gender.toUpperCase():"M";let l="CALLMOBILE_USER_TURNED_OFF_YOUR_MIC_"+i;const a=CallUtil.getCustomMessage(l,{gender:i,name:t.data.name});this.__createCallControlToast({message:a,avatarUrl:t.data.avatar})}}onAllParticipantsVideoMuted(e){if(env.userId!=e.fromUserId){this.switchCameraDeviceState(false);const t=this.callView.userRegistry.get(e.fromUserId);const i=t.data.gender?t.data.gender.toUpperCase():"M";let l="CALLMOBILE_USER_TURNED_OFF_CAM_FOR_ALL_"+i;const a=CallUtil.getCustomMessage(l,{gender:i,name:t.data.name});this.__createCallControlToast({message:a,avatarUrl:t.data.avatar})}}onParticipantVideoMuted(e){if(env.userId==e.toUserId){this.switchCameraDeviceState(false);const t=this.callView.userRegistry.get(e.fromUserId);const i=t.data.gender?t.data.gender.toUpperCase():"M";let l="CALLMOBILE_USER_TURNED_OFF_YOUR_CAM_"+i;const a=CallUtil.getCustomMessage(l,{gender:i,name:t.data.name});this.__createCallControlToast({message:a,avatarUrl:t.data.avatar})}}onAllParticipantsScreenshareMuted(e){if(env.userId!=e.fromUserId){this.callView.setUserScreenState(false);const t=this.callView.userRegistry.get(e.fromUserId);const i=t.data.gender?t.data.gender.toUpperCase():"M";let l="CALLMOBILE_USER_TURNED_OFF_SCREENSHARE_FOR_ALL_"+i;const a=CallUtil.getCustomMessage(l,{gender:i,name:t.data.name});this.__createCallControlToast({message:a,avatarUrl:t.data.avatar})}}onParticipantScreenshareMuted(e){this.callView.setUserScreenState(e.toUserId,false);if(env.userId==e.toUserId){const t=this.callView.userRegistry.get(e.fromUserId);const i=t.data.gender?t.data.gender.toUpperCase():"M";let l="CALLMOBILE_USER_TURNED_OFF_YOUR_SCREENSHARE_"+i;const a=CallUtil.getCustomMessage(l,{gender:i,name:t.data.name});this.__createCallControlToast({message:a,avatarUrl:t.data.avatar})}}onUserPermissionsChanged(e){const t=this.callView.userRegistry.get(e.fromUserId);const i=t.data.gender?t.data.gender.toUpperCase():"M";let l="CALLMOBILE_ADMIN_ALLOWED_TURN_ON_ALL_FOR_YOU_BY_HANDRAISE_"+i;if(!e.allow){l="CALLMOBILE_ADMIN_NOT_ALLOWED_TURN_ON_ALL_FOR_YOU_BY_HANDRAISE_"+i;const e=this.callView.getUserFloorRequestState(env.userId);if(e){this.onFloorRequestButtonClick()}}const a=CallUtil.getCustomMessage(l,{gender:i,name:t.data.name});this.__createCallControlToast({message:a,avatarUrl:t.data.avatar})}onRoomSettingsChanged(e){let t={audio:"mic",video:"cam",screen_share:"screenshare"};let i="";let l=false;const a=this.callView.userRegistry.get(e.fromUserId);const n=a.data.gender?a.data.gender.toUpperCase():"M";if(e.eft===true){this.lastCalledChangeSettingsUserName=a.data.name;if(e.fromUserId!=env.userId){const t={audio:"CALLMOBILE_USER_NOT_ALLOW_TURN_ON_MIC",video:"CALLMOBILE_USER_NOT_ALLOW_TURN_ON_CAM",screen_share:"CALLMOBILE_USER_NOT_ALLOW_TURN_ON_SCREENSHARE"};let l=t[e.act]+"_"+n;i=CallUtil.getCustomMessage(l,{gender:n,name:a.data.name})}}else{l=true;if(e.fromUserId!=env.userId){const t={audio:"CALLMOBILE_USER_ALLOW_TURN_ON_MIC",video:"CALLMOBILE_USER_ALLOW_TURN_ON_CAM",screen_share:"CALLMOBILE_USER_ALLOW_TURN_ON_SCREENSHARE"};let l=t[e.act]+"_"+n;i=CallUtil.getCustomMessage(l,{gender:n,name:a.data.name})}}this.__createCallControlToast({message:i,avatarUrl:a.data.avatar})}onCallConnected(){const e=this.currentCall.isVideoEnabled();const t=this.currentCall.isMuted();if(!CallUtil.havePermissionToBroadcast("cam")&&e){this.switchCameraDeviceState(false);this.__createHintControlToast({message:h.getMessage("CALLMOBILE_ADMIN_NOT_ALLOWED_TURN_ON_CAM_HINT",{"#NAME#":this.lastCalledChangeSettingsUserName})})}if(!CallUtil.havePermissionToBroadcast("mic")&&!t){this.muteMicDevice(true);this.__createHintControlToast({message:h.getMessage("CALLMOBILE_ADMIN_NOT_ALLOWED_TURN_ON_MIC_HINT",{"#NAME#":this.lastCalledChangeSettingsUserName})})}}onRecorderStatusChanged({status:e,error:t}){this.onUpdateCallCopilotState({isTrackRecordOn:e,senderId:t?env.userId:""})}onChatUserChanged(e){if(this.currentCall?.associatedEntity.id===e.dialogId){this.callView.updateTotalUsersCount(e.userCount)}}onChatUsersCountUpdate(e){this.callView.updateTotalUsersCount(e)}onNativeCallAnswered(e){CallUtil.log("onNativeCallAnswered");if(this.nativeCall){this._nativeAnsweredAction=e;if(!this.ignoreNativeCallAnswer){if(this.callViewPromise){this.callViewPromise.then((()=>{this.answerCurrentCall(this.nativeCall.params.video)}))}else if(this.callView){this.answerCurrentCall(this.nativeCall.params.video)}else{CallUtil.error("callView is not initialized")}}}}onNativeCallEnded(e){if(this.nativeCall&&this.nativeCall.connected){this.onHangupButtonClick()}else{this.declineCall()}if(e){setTimeout((()=>e.fullfill()),500)}}onNativeCallMuted(e){this.muteMicDevice(e)}onNativeCallVideoIntent(){setTimeout((()=>this.onCameraButtonClick()),1e3)}getMaxActiveMicrophonesCount(){return 4}canCallBeAnswered(e){const t=this.callInviteTime+this.callDeclineTimeout<Date.now();const i=this.currentCall&&!this.currentCall.parentId&&!this.currentCall.parentUuid&&(e.parentId||e.parentUuid);if(!this.callInviteTime||t||i){return true}return false}clearEverything(){if(this.currentCall){this.currentCall.hangup();this.removeCallEvents();this.currentCall=null}if(this._nativeAnsweredAction){this._nativeAnsweredAction.fail();this._nativeAnsweredAction=null}if(this.nativeCall){this.nativeCall.finish();this.nativeCall=null}this.ignoreNativeCallAnswer=false;if(uicomponent.widgetLayer()){uicomponent.widgetLayer().close().then((()=>{this.rootWidget=null}))}else{this.rootWidget=null}this.stopLocalVideoStream(true);this.callView=null;this.removeViewEvents();this.stopCheckOutputDevice();callInterface.indicator().close();this.callStartTime=null;this.callViewPromise=null;this.callAnswered=false;this.stopCallTimer();media.audioPlayer().stopPlayingSound();device.setIdleTimerDisabled(false);this.changeProximitySensorStatus(false);this.callWithLegacyMobile=false;this.callVideoEnabled=false;this.startCallPromise=null;this.localVideoPromise=null;BX.postComponentEvent("CallEvents::viewClosed",[]);BX.postWebEvent("CallEvents::viewClosed",{})}requestDeviceAccess(e){return new Promise(((t,i)=>{MediaDevices.requestMicrophoneAccess().then((()=>{if(!e){return t()}MediaDevices.requestCameraAccess().then((()=>t())).catch((({justDenied:e})=>i(new DeviceAccessError(e))))})).catch((({justDenied:e})=>i(new DeviceAccessError(e))))}))}normalizeChatId(e){if(!e){return 0}if(e.includes("chat")){e=e.replace("chat","")}return e}getAnalyticsUserType(){const e=BX.componentParameters.get("currentUserData",{});const t={user:"user_intranet",extranet:"user_extranet",collaber:"user_collaber"};return t[e.type]??t.user}changeProximitySensorStatus(e,t,i){this.canProximitySensorBeEnabled=e;if(!this.currentCall||this.isAppPaused){device.setProximitySensorEnabled(false);return}if(t==null){t=CallUtil.getSdkAudioManager().currentDevice}if(i==null){i=this.currentCall.isVideoEnabled()}if(t!="receiver"||i){device.setProximitySensorEnabled(false);return}device.setProximitySensorEnabled(e)}async test(e="call",t={}){const i=[4,5,6,7,8,9,10,11,12,13,14,15,464,473];this.currentCall=new E;await this.openCallView({status:e,isGroupCall:true,isVideoCall:true,associatedEntityName:"Very very long chat name. Very very long chat name. Very very long chat name. And again.",associatedEntityAvatar:"",...t});this.bindCallEvents();this.bindViewEvents();i.forEach((e=>this.callView.addUser(e,e>10?BX.Call.UserState.Connected:BX.Call.UserState.Idle)));this.callView.unpinUser();this.currentCall.getLocalMedia();const l=await BX.rest.callMethod("im.user.list.get",{ID:i.concat(env.userId),AVATAR_HR:"Y"});this.callView.updateUserData(l.data());this.callView.setUserMicrophoneState(473,false);const a=await MediaDevices.getUserMedia({audio:true,video:true});CallUtil.log("trying get video");CallUtil.log("video track received");CallUtil.log(a.getTracks());this.stream=a;this.callView.setVideoStream(env.userId,a);this.callView.setVideoStream(4,a);this.callView.setVideoStream(5,a)}startCheckOutputDevice(){this.checkOutputDeviceInterval=setInterval((()=>this.checkOutputDevice()),1e3)}stopCheckOutputDevice(){clearInterval(this.checkOutputDeviceInterval)}checkOutputDevice(){if(this.callView&&this.callView.state.soundOutputDevice!==CallUtil.getSdkAudioManager().currentDevice){this.callView.setSoundOutputDevice(CallUtil.getSdkAudioManager().currentDevice)}}testMenu(e=5,t=false){const i=[];for(let l=0;l<e;l++){i.push({text:`items ${l}`,iconClass:"returnToSpeaker",onClick:()=>CallUtil.log(`item ${l} click`)});if(t){i.push({separator:true})}}this.menu=new CallMenu({items:[{text:"zxc iop",iconClass:"participants",showSubMenu:true,color:"#FF0000",onClick:()=>{CallUtil.log(456)}},{separator:true},...i],onClose:()=>{CallUtil.log("test menu closed");this.menu&&this.menu.destroy();uicomponent.widgetLayer()&&uicomponent.widgetLayer().close()},onDestroy:()=>{this.menu=null}});this.openWidgetLayer().then((()=>this.menu.show())).then((()=>CallUtil.log("success"))).catch((e=>CallUtil.error(e)))}testDevices(){const e=CallUtil.getSdkAudioManager().availableAudioDevices.map((e=>({text:e,selected:e===CallUtil.getSdkAudioManager().currentDevice,onClick:()=>{if(this.menu){this.menu.close()}CallUtil.getSdkAudioManager().selectAudioDevice(e)}})));e.push({separator:true});e.push({text:BX.message("MOBILE_CALL_MENU_CANCEL"),onClick:()=>{if(this.menu){this.menu.close()}}});CallUtil.log(e);this.menu=new CallMenu({items:e,onClose:()=>this.menu.destroy(),onDestroy:()=>{this.menu=null;uicomponent.widgetLayer().close()}});this.openWidgetLayer().then((()=>this.menu.show())).then((()=>CallUtil.log("success"))).catch((e=>CallUtil.error(e)))}ttt(){CallUtil.log(`${v}img/blank.png`);callInterface.indicator().setMode("active");callInterface.indicator().imageUrl=`${v}img/blank.png`;callInterface.indicator().show()}}class E{videoEnabled=false;associatedEntity={type:"chat",advanced:{chat:{}}};constructor(){this.eventEmitter=new JNEventEmitter}on(e,t){this.eventEmitter.on(e,t);return this}isVideoEnabled(){return this.videoEnabled}setVideoEnabled(e){e=e===true;if(this.videoEnabled===e){return}this.videoEnabled=e;if(this.videoEnabled){if(this.localStream.getVideoTracks().length>0){MediaDevices.startCapture();this.eventEmitter.emit(BX.Call.Event.onLocalMediaReceived,[this.localStream])}}else{MediaDevices.stopCapture();this.eventEmitter.emit(BX.Call.Event.onLocalMediaStopped)}}getLocalMedia(){return new Promise((e=>{MediaDevices.getUserMedia({audio:true,video:this.videoEnabled}).then((t=>{if(this.videoEnabled){this.eventEmitter.emit(BX.Call.Event.onLocalMediaReceived,[t])}if(!this.videoEnabled&&this.localStream){this.eventEmitter.emit(BX.Call.Event.onLocalMediaStopped)}this.localStream=t;e()}))}))}switchCamera(){MediaDevices.switchVideoSource()}isFrontCameraUsed(){return MediaDevices.cameraDirection==="front"}hangup(){}}if("uicomponent"in window&&uicomponent.widgetLayer()){uicomponent.widgetLayer().close()}i.exports={CallController:g}}));
//# sourceMappingURL=extension.map.js