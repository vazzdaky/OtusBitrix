{"version":3,"file":"desktop-account-list.bundle.js","sources":["../src/item.js","../src/content.js","../src/popup.js","../src/desktop-account-list.js"],"sourcesContent":["import { Cache, Event, Tag, Loc } from 'main.core';\nimport { AvatarBase, AvatarRound } from 'ui.avatar';\nimport { Menu, Popup } from 'main.popup';\nimport type { DesktopAccount } from 'im.v2.lib.desktop-api';\nimport { DesktopApi } from 'im.v2.lib.desktop-api';\nimport { EventEmitter } from 'main.core.events';\nimport { MessageBox, MessageBoxButtons } from 'ui.dialogs.messagebox';\n\nexport type ItemOptions = {\n\taccount: DesktopAccount,\n\tisCurrent: boolean,\n};\n\nexport class Item\n{\n\t#cache = new Cache.MemoryCache();\n\n\tconstructor(options: ItemOptions)\n\t{\n\t\tthis.#setOptions(options);\n\t}\n\n\tgetContainer(): HTMLElement\n\t{\n\t\treturn this.#cache.remember('container', () => {\n\t\t\treturn Tag.render`\n\t\t\t\t<div class=\"intranet-desktop-account-list-item__wrapper\">\n\t\t\t\t\t<div class=\"intranet-desktop-account-list-item__avatar\">\n\t\t\t\t\t\t${this.#getAvatar().getContainer()}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"intranet-desktop-account-list-item__info-wrapper\">\n\t\t\t\t\t\t${this.#getHost()}\n\t\t\t\t\t\t${this.#getEmail()}\n\t\t\t\t\t</div>\n\t\t\t\t\t${this.#getMoreMenu()}\n\t\t\t\t</div>\n\t\t\t`;\n\t\t});\n\t}\n\n\t#setOptions(options: ItemOptions): Item\n\t{\n\t\tthis.#cache.set('options', options);\n\n\t\treturn this;\n\t}\n\n\t#getOptions(): ItemOptions\n\t{\n\t\treturn this.#cache.get('options', {});\n\t}\n\n\t#getMoreMenu(): HTMLElement\n\t{\n\t\treturn this.#cache.remember('moreMenuElement', () => {\n\t\t\tconst element = Tag.render`\n\t\t\t\t<i class=\"ui-icon-set --more-l intranet-desktop-account-list-item__more\"/>\n\t\t\t`;\n\t\t\tconst menu = new Menu({\n\t\t\t\tbindElement: element,\n\t\t\t\titems: [\n\t\t\t\t\tthis.#getOptions().account.connected\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\ttext: Loc.getMessage('INTRANET_DESKTOP_PORTAL_LIST_MENU_ITEM_DISCONNECT'),\n\t\t\t\t\t\t\tonclick: () => {\n\t\t\t\t\t\t\t\tDesktopApi.disconnectAccount(this.#getOptions().account.host);\n\t\t\t\t\t\t\t\tmenu.close();\n\t\t\t\t\t\t\t\tEventEmitter.emit('BX.Intranet.DesktopPortalList.Item:change');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t} : {\n\t\t\t\t\t\t\ttext: Loc.getMessage('INTRANET_DESKTOP_PORTAL_LIST_MENU_ITEM_CONNECT'),\n\t\t\t\t\t\t\tonclick: () => {\n\t\t\t\t\t\t\t\tDesktopApi.connectAccount(\n\t\t\t\t\t\t\t\t\tthis.#getOptions().account.host,\n\t\t\t\t\t\t\t\t\tthis.#getOptions().account.login,\n\t\t\t\t\t\t\t\t\tthis.#getOptions().account.protocol,\n\t\t\t\t\t\t\t\t\tnavigator.language,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tmenu.close();\n\t\t\t\t\t\t\t\tEventEmitter.emit('BX.Intranet.DesktopPortalList.Item:change');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: Loc.getMessage('INTRANET_DESKTOP_PORTAL_LIST_MENU_ITEM_DELETE'),\n\t\t\t\t\t\tonclick: () => {\n\t\t\t\t\t\t\tmenu.close();\n\t\t\t\t\t\t\tthis.#getDeleteConfirmPopup(menu).show();\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tEvent.bind(element, 'click', (event) => {\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\t\t\t\tmenu.toggle();\n\t\t\t});\n\n\t\t\treturn element;\n\t\t});\n\t}\n\n\t#getAvatar(): AvatarBase\n\t{\n\t\tconst path = this.#getOptions().account.avatar === '/bitrix/js/im/images/blank.gif'\n\t\t\t? '/bitrix/js/ui/icons/b24/images/ui-user.svg?v2'\n\t\t\t: this.#getOptions().account.avatar;\n\t\tconst options = {\n\t\t\tsize: 36,\n\t\t\tuserpicPath: encodeURI(path),\n\t\t};\n\n\t\treturn new AvatarRound(options);\n\t}\n\n\t#getHost(): HTMLElement\n\t{\n\t\treturn Tag.render`\n\t\t\t<div class=\"intranet-desktop-account-list-item__title-wrapper\">\n\t\t\t\t<span class=\"intranet-desktop-account-list-item__title${this.#getOptions().isCurrent ? ' --current' : ''}\">${this.#getOptions().account.host}</span>\n\t\t\t\t${this.#getStatus()}\n\t\t\t</div>\n\t\t`;\n\t}\n\n\t#getDeleteConfirmPopup(): Popup\n\t{\n\t\treturn this.#cache.remember('deleteConfirmPopup', () => {\n\t\t\treturn new MessageBox({\n\t\t\t\tminWidth: 500,\n\t\t\t\ttitle: Loc.getMessage('INTRANET_DESKTOP_PORTAL_LIST_CONFIRM_POPUP_TITLE'),\n\t\t\t\tmessage: Loc.getMessage('INTRANET_DESKTOP_PORTAL_LIST_CONFIRM_POPUP_MESSAGE'),\n\t\t\t\tbuttons: MessageBoxButtons.OK_CANCEL,\n\t\t\t\tokCaption: Loc.getMessage('INTRANET_DESKTOP_PORTAL_LIST_CONFIRM_POPUP_CONFIRM_BUTTON'),\n\t\t\t\tonOk: () => {\n\t\t\t\t\tconst { host, login } = this.#getOptions().account;\n\t\t\t\t\tDesktopApi.deleteAccount(host, login);\n\t\t\t\t\tEventEmitter.emit('BX.Intranet.DesktopPortalList.Item:change');\n\t\t\t\t\tthis.#getDeleteConfirmPopup().close();\n\t\t\t\t},\n\t\t\t\tuseAirDesign: true,\n\t\t\t});\n\t\t});\n\t}\n\n\t#getStatus(): ?HTMLElement\n\t{\n\t\tif (!this.#getOptions().isCurrent)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.#cache.remember('statusElement', () => {\n\t\t\treturn Tag.render`\n\t\t\t\t<span class=\"intranet-desktop-account-list-item__status\">${Loc.getMessage('INTRANET_DESKTOP_PORTAL_LIST_CURRENT_STATUS')}</span>\n\t\t\t`;\n\t\t});\n\t}\n\n\t#getEmail(): HTMLElement\n\t{\n\t\treturn Tag.render`\n\t\t\t<span class=\"intranet-desktop-account-list-item__description\">${this.#getOptions().account.email}</span>\n\t\t`;\n\t}\n}\n","import { ConfigOptions } from './types';\nimport { Cache, Dom, Loc, Tag } from 'main.core';\nimport { Item } from './item';\nimport { DesktopApi } from 'im.v2.lib.desktop-api';\nimport type { DesktopAccount } from 'im.v2.lib.desktop-api';\nimport { EventEmitter } from 'main.core.events';\n\nexport class Content\n{\n\t#cache = new Cache.MemoryCache();\n\n\tgetAccounts(): Array<DesktopAccount>\n\t{\n\t\treturn this.#cache.remember('accounts', () => {\n\t\t\treturn (typeof BXDesktopSystem === 'undefined') ? [] : DesktopApi.getAccountList();\n\t\t});\n\t}\n\n\tgetCurrentAccount(): ?DesktopAccount\n\t{\n\t\treturn this.#cache.remember('currentAccount', () => {\n\t\t\tconst currentUserId = Loc.getMessage('USER_ID');\n\t\t\tconst accounts = this.getAccounts();\n\t\t\tconst currentHost = location.host;\n\n\t\t\treturn accounts.find((account) => account.id === currentUserId && currentHost === account.host);\n\t\t});\n\t}\n\n\tgetContent(): Array<ConfigOptions>\n\t{\n\t\treturn [\n\t\t\tthis.#getCurrentPortal(),\n\t\t\tthis.#getPanel(),\n\t\t\tthis.#getPortalList(),\n\t\t];\n\t}\n\n\t#getCurrentPortal(): ConfigOptions\n\t{\n\t\treturn this.#cache.remember('currentPortal', () => {\n\t\t\tif (!this.getCurrentAccount())\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst item = new Item({\n\t\t\t\taccount: this.getCurrentAccount(),\n\t\t\t\tisCurrent: true,\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\thtml: item.getContainer(),\n\t\t\t};\n\t\t});\n\t}\n\n\t#getPanel(): ConfigOptions\n\t{\n\t\treturn this.#cache.remember('panel', () => {\n\t\t\tconst onclick = () => {\n\t\t\t\tDesktopApi.openAddAccountTab();\n\t\t\t\tEventEmitter.emit('BX.Intranet.DesktopPortalList:openConnector');\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\thtml: Tag.render`\n\t\t\t\t\t<div class=\"intranet-desktop-account-list-item-list-header__wrapper\">\n\t\t\t\t\t\t<span class=\"intranet-desktop-account-list-item-list-header__title\">\n\t\t\t\t\t\t\t${Loc.getMessage('INTRANET_DESKTOP_PORTAL_LIST_HEADER_TITLE')}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<div onclick=\"${onclick}\" class=\"intranet-desktop-account-list-item-list-header__connect-wrapper\">\n\t\t\t\t\t\t\t<i class=\"ui-icon-set --plus-s intranet-desktop-account-list-item-list-header__connect-icon\"></i>\n\t\t\t\t\t\t\t<span class=\"intranet-desktop-account-list-item-list-header__connect-title\">\n\t\t\t\t\t\t\t\t${Loc.getMessage('INTRANET_DESKTOP_PORTAL_LIST_HEADER_BUTTON')}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t`,\n\t\t\t\twithoutBackground: true,\n\t\t\t};\n\t\t});\n\t}\n\n\t#getPortalList(): ConfigOptions\n\t{\n\t\treturn this.#cache.remember('portalList', () => {\n\t\t\tconst container = Tag.render`\n\t\t\t\t<div class=\"intranet-desktop-account-list-item-list__wrapper\"></div>\n\t\t\t`;\n\n\t\t\tthis.getAccounts().forEach((account) => {\n\t\t\t\tif (account !== this.getCurrentAccount())\n\t\t\t\t{\n\t\t\t\t\tconst item = new Item({\n\t\t\t\t\t\taccount,\n\t\t\t\t\t\tisCurrent: false,\n\t\t\t\t\t});\n\n\t\t\t\t\tDom.append(item.getContainer(), container);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\thtml: container,\n\t\t\t};\n\t\t});\n\t}\n}\n","import { EventEmitter } from 'main.core.events';\nimport { Cache } from 'main.core';\nimport { PopupComponentsMaker } from 'ui.popupcomponentsmaker';\nimport { Content } from './content';\nimport type { ConfigOptions } from './types';\n\ntype PopupOptions = {\n\tbindElement: HTMLElement,\n};\n\nexport class Popup extends EventEmitter\n{\n\t#cache = new Cache.MemoryCache();\n\t#popupsShowAfterBasePopup: Array<Popup> = [];\n\n\tconstructor(options: PopupOptions)\n\t{\n\t\tsuper();\n\t\tthis.#setOptions(options);\n\t\tthis.setEventNamespace('BX.Intranet.DesktopPortalList.Popup');\n\t\tthis.#setEventHandlers();\n\t}\n\n\tshow(): void\n\t{\n\t\tif (!this.#getBasePopup().isShown())\n\t\t{\n\t\t\tthis.#getBasePopup().show();\n\t\t}\n\t}\n\n\t#setOptions(options: PopupOptions): Popup\n\t{\n\t\tthis.#cache.set('options', options);\n\n\t\treturn this;\n\t}\n\n\t#getOptions(): PopupOptions\n\t{\n\t\treturn this.#cache.get('options', {});\n\t}\n\n\t#getBasePopup(): PopupComponentsMaker\n\t{\n\t\treturn this.#cache.remember('popup', () => {\n\t\t\tthis.emit('beforeInit');\n\n\t\t\tconst popup = new PopupComponentsMaker({\n\t\t\t\ttarget: this.#getOptions().bindElement,\n\t\t\t\twidth: 450,\n\t\t\t\tcontent: this.#getContent(),\n\t\t\t\toffsetTop: -50,\n\t\t\t\toffsetLeft: 50,\n\t\t\t\tuseAngle: false,\n\t\t\t});\n\t\t\tthis.#cache.set('popup', popup);\n\n\t\t\tthis.emit('afterInit');\n\n\t\t\treturn popup;\n\t\t});\n\t}\n\n\t#getContent(): Array<ConfigOptions>\n\t{\n\t\treturn this.#cache.remember('content', () => {\n\t\t\treturn (new Content()).getContent();\n\t\t});\n\t}\n\n\t#cleanCache(): void\n\t{\n\t\tthis.#cache.delete('popup');\n\t\tthis.#cache.delete('content');\n\t}\n\n\t#setEventHandlers(): void\n\t{\n\t\tthis.subscribe('beforeInit', () => {\n\t\t\tEventEmitter.subscribe('BX.Intranet.DesktopPortalList.Item:change', () => {\n\t\t\t\tthis.#getBasePopup().close();\n\t\t\t\tthis.#cleanCache();\n\t\t\t});\n\t\t\tEventEmitter.subscribe('BX.Intranet.DesktopPortalList:openConnector', () => {\n\t\t\t\tthis.#getBasePopup().close();\n\t\t\t\tthis.#cleanCache();\n\t\t\t});\n\t\t\tthis.subscribe('afterInit', () => {\n\t\t\t\tthis.#setAutoHideEventHandlers();\n\t\t\t});\n\t\t});\n\t}\n\n\t#setAutoHideEventHandlers(): void\n\t{\n\t\tEventEmitter.subscribe('BX.Main.Popup:onShow', (event) => {\n\t\t\tif (!this.#getBasePopup().getPopup().isShown())\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst popup = event.getTarget();\n\n\t\t\tif (popup && popup.getId() !== this.#getBasePopup().getPopup().getId())\n\t\t\t{\n\t\t\t\tthis.#getBasePopup().getPopup().setAutoHide(false);\n\n\t\t\t\tif (!this.#popupsShowAfterBasePopup.includes(popup))\n\t\t\t\t{\n\t\t\t\t\tthis.#popupsShowAfterBasePopup.push(popup);\n\t\t\t\t}\n\n\t\t\t\tconst handler = () => {\n\t\t\t\t\tthis.#popupsShowAfterBasePopup = this.#popupsShowAfterBasePopup.filter((item) => item !== popup);\n\n\t\t\t\t\tif (this.#popupsShowAfterBasePopup.length === 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.#getBasePopup().getPopup().setAutoHide(true);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tpopup.subscribeOnce('onClose', handler);\n\t\t\t\tpopup.subscribeOnce('onDestroy', handler);\n\t\t\t}\n\t\t});\n\t}\n}\n","import { EventEmitter } from 'main.core.events';\nimport { Popup } from './popup';\nimport { Cache } from 'main.core';\nimport './style.css';\n\ntype DesktopPortalListOptions = {\n\tbindElement: HTMLElement,\n}\n\nexport class DesktopAccountList extends EventEmitter\n{\n\t#cache = new Cache.MemoryCache();\n\n\tconstructor(options: DesktopPortalListOptions)\n\t{\n\t\tsuper();\n\t\tthis.#setOptions(options);\n\t\tthis.setEventNamespace('BX.Intranet.DesktopPortalList');\n\t}\n\n\tshow(): void\n\t{\n\t\tthis.#getPopup().show();\n\t}\n\n\t#setOptions(options: DesktopPortalListOptions): DesktopAccountList\n\t{\n\t\tthis.#cache.set('options', options);\n\n\t\treturn this;\n\t}\n\n\t#getOptions(): DesktopPortalListOptions\n\t{\n\t\treturn this.#cache.get('options', {});\n\t}\n\n\t#getPopup(): Popup\n\t{\n\t\treturn this.#cache.remember('popup', () => {\n\t\t\treturn new Popup({\n\t\t\t\tbindElement: this.#getOptions().bindElement,\n\t\t\t});\n\t\t});\n\t}\n}\n"],"names":["Item","constructor","options","Object","value","writable","Cache","MemoryCache","babelHelpers","getContainer","remember","Tag","render","this","set","get","element","menu","Menu","bindElement","items","account","connected","text","Loc","getMessage","onclick","DesktopApi","disconnectAccount","host","close","EventEmitter","emit","connectAccount","login","protocol","navigator","language","show","Event","bind","event","preventDefault","stopPropagation","toggle","path","avatar","size","userpicPath","encodeURI","AvatarRound","isCurrent","MessageBox","minWidth","title","message","buttons","MessageBoxButtons","OK_CANCEL","okCaption","onOk","deleteAccount","useAirDesign","email","Content","[object Object]","getAccounts","BXDesktopSystem","getAccountList","getCurrentAccount","currentUserId","accounts","currentHost","location","find","id","getContent","html","openAddAccountTab","withoutBackground","container","forEach","item","Dom","append","Popup","super","setEventNamespace","isShown","popup","PopupComponentsMaker","target","width","content","offsetTop","offsetLeft","useAngle","delete","subscribe","getPopup","getTarget","getId","setAutoHide","includes","push","handler","filter","length","subscribeOnce","DesktopAccountList"],"mappings":"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"}