this.BX=this.BX||{};this.BX.Call=this.BX.Call||{};(function(e){"use strict";var s=babelHelpers.classPrivateFieldLooseKey("tokens");var t=babelHelpers.classPrivateFieldLooseKey("pendingTokens");var l=babelHelpers.classPrivateFieldLooseKey("loadToken");class a{constructor(e){Object.defineProperty(this,l,{value:r});Object.defineProperty(this,s,{writable:true,value:{}});Object.defineProperty(this,t,{writable:true,value:{}})}async getToken(e){const a=babelHelpers.classPrivateFieldLooseBase(this,t)[t][e];if(a){return a}const r=new Promise((a=>{babelHelpers.classPrivateFieldLooseBase(this,t)[t][e]=r;const i=babelHelpers.classPrivateFieldLooseBase(this,s)[s][e];if(i){return a(i)}babelHelpers.classPrivateFieldLooseBase(this,l)[l](e).then((e=>{a(e)}))}));return r}setToken(e,t){babelHelpers.classPrivateFieldLooseBase(this,s)[s][e]=t}}async function r(e){try{var s;const t=await BX.rest.callMethod("call.Call.getCallToken",{chatId:e});return(s=t.data())==null?void 0:s.token}catch(e){console.error("Error during call token retrieving",e)}}e.Manager=a})(this.BX.Call.Lib=this.BX.Call.Lib||{});
//# sourceMappingURL=manager.bundle.map.js