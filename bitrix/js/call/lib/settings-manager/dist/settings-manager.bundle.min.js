this.BX=this.BX||{};this.BX.Call=this.BX.Call||{};(function(l,a){"use strict";class s{constructor(){this.jwtCallsEnabled=false;this.plainCallsUseJwt=false;this.callBalancerUrl="";if(a.Extension.getSettings("call.core").call){this.setup(a.Extension.getSettings("call.core").call)}}setup(l){if(l.jwtCallsEnabled!==undefined){this.jwtCallsEnabled=l.jwtCallsEnabled}if(l.plainCallsUseJwt!==undefined){this.plainCallsUseJwt=l.plainCallsUseJwt}if(l.callBalancerUrl!==undefined){this.callBalancerUrl=l.callBalancerUrl}}get jwtCallsEnabled(){return this._jwtCallsEnabled}set jwtCallsEnabled(l){this._jwtCallsEnabled=l}get plainCallsUseJwt(){return this._plainCallsUseJwt}set plainCallsUseJwt(l){this._plainCallsUseJwt=l}get callBalancerUrl(){return this._callBalancerUrl}set callBalancerUrl(l){this._callBalancerUrl=l}isJwtInPlainCallsEnabled(){return this.jwtCallsEnabled&&this.plainCallsUseJwt}}const t=new s;l.CallSettingsManager=t})(this.BX.Call.Lib=this.BX.Call.Lib||{},BX);
//# sourceMappingURL=settings-manager.bundle.map.js