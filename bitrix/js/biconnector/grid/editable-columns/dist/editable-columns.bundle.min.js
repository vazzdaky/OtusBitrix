this.BX=this.BX||{};this.BX.BIConnector=this.BX.BIConnector||{};(function(e,t){"use strict";let i=e=>e,s,n,a,l;var o=babelHelpers.classPrivateFieldLooseKey("editCell");var r=babelHelpers.classPrivateFieldLooseKey("buildEditor");var c=babelHelpers.classPrivateFieldLooseKey("cancelEdit");var d=babelHelpers.classPrivateFieldLooseKey("saveValue");var u=babelHelpers.classPrivateFieldLooseKey("notifyErrors");class v{constructor(e,t){var i;Object.defineProperty(this,u,{value:g});Object.defineProperty(this,d,{value:m});Object.defineProperty(this,c,{value:h});Object.defineProperty(this,r,{value:p});Object.defineProperty(this,o,{value:b});this.gridId=e;this.grid=(i=BX.Main.gridManager.getById(e))==null?void 0:i.instance;this.columnId=t.name;this.saveEndpoint=t.saveEndpoint;this.onSave=t.onSave;this.onValueCheck=t.onValueCheck;if(!v.instances.has(t.name)){v.instances.set(t.name,this)}}static init(e,t){t.forEach((t=>{new v(e,t)}))}static editCell(e,t){const i=v.instances.get(e);if(!i){return}babelHelpers.classPrivateFieldLooseBase(i,o)[o](t)}}function b(e){const i=this.grid.getRows().getById(e);if(!i){return}t.Dom.removeClass(i.getNode(),"editable-column-edited");const s=i.getCellById(this.columnId);let n=i.getEditData()[this.columnId];if(!n){n=""}const a=s.querySelector(".editable-column-wrapper");if(!a){return}const l=babelHelpers.classPrivateFieldLooseBase(this,r)[r](e,n);const o=a.querySelector(".editable-column-preview");if(o){t.Dom.style(o,{display:"none"})}t.Dom.append(l,a);const d=()=>{t.Event.unbind(i.getActionsButton(),"click",d);babelHelpers.classPrivateFieldLooseBase(this,c)[c](e)};t.Event.bind(i.getActionsButton(),"click",d)}function p(e,o){const r=t.Tag.render(s||(s=i`<input class="main-grid-editor main-grid-editor-text" type="text">`));r.value=o;const u=t.Tag.render(n||(n=i`
			<a>
				<i class="ui-icon-set --check"></i>
			</a>
		`));const v=t.Tag.render(a||(a=i`
			<a>
				<i class="ui-icon-set --cross-60"></i>
			</a>
		`));const b=i=>{t.Dom.removeClass(r,"editable-column-input-danger");if(!this.onValueCheck(i)){t.Dom.addClass(r,"editable-column-input-danger");return}babelHelpers.classPrivateFieldLooseBase(this,d)[d](e,i)};const p=()=>{babelHelpers.classPrivateFieldLooseBase(this,c)[c](e)};t.Event.bind(u,"click",(e=>{e.preventDefault();b(r.value)}));t.Event.bind(v,"click",(e=>{e.preventDefault();p()}));t.Event.bind(r,"keydown",(e=>{if(e.keyCode===13){b(r.value);e.preventDefault()}else if(e.keyCode===27){p();e.preventDefault()}}));return t.Tag.render(l||(l=i`
			<div class="editable-column-wrapper__item editable-column-edit">
				${0}
				<div class="editable-column-wrapper__buttons-wrapper">
					<div class="editable-column-wrapper__buttons">
						${0}
						${0}
					</div>
				</div>
			</div>
		`),r,u,v)}function h(e){const i=this.grid.getRows().getById(e);const s=i.getCellById(this.columnId);const n=s.querySelector(".editable-column-wrapper");const a=n.querySelector(".editable-column-edit");const l=n.querySelector(".editable-column-preview");if(a){a.remove()}if(l){t.Dom.style(l,{display:"flex"})}}function m(e,i){t.ajax.runAction(this.saveEndpoint,{data:{id:e,columnId:this.columnId,value:i}}).then((()=>{this.onSave(e,i);const s=this.grid.getRows().getById(e);const n=s.getCellById(this.columnId);const a=n.querySelector(".editable-column-wrapper");const l=a.querySelector(".editable-column-content");t.Dom.addClass(s.getNode(),"editable-column-edited");const o=s.getEditData();o[this.columnId]=i;const r=this.grid.getParam("EDITABLE_DATA");if(t.Type.isPlainObject(r)){r[s.getId()]=o}if(l){l.innerText=i;t.Dom.style(l,{display:"flex"})}babelHelpers.classPrivateFieldLooseBase(this,c)[c](e)})).catch((e=>{if(e.errors){babelHelpers.classPrivateFieldLooseBase(this,u)[u](e.errors)}}))}function g(e){if(e[0]&&e[0].message){BX.UI.Notification.Center.notify({content:t.Text.encode(e[0].message)})}}v.instances=new Map;e.EditableColumnManager=v})(this.BX.BIConnector.Grid=this.BX.BIConnector.Grid||{},BX);
//# sourceMappingURL=editable-columns.bundle.map.js