{"version":3,"file":"group-service.bundle.js","sources":["../src/mappers.js","../src/group-service.js","../src/index.js"],"sourcesContent":["import type { GroupModel } from 'tasks.v2.model.groups';\nimport type { StageModel } from 'tasks.v2.model.stages';\nimport type { GroupDto, StageDto } from './types';\n\nexport function mapModelToDto(group: GroupModel): GroupDto\n{\n\treturn {\n\t\tid: group.id,\n\t\tname: group.name,\n\t\timage: group.image,\n\t\ttype: group.type,\n\t};\n}\n\nexport function mapDtoToModel(groupDto: GroupDto): GroupModel\n{\n\treturn {\n\t\tid: groupDto.id,\n\t\tname: groupDto.name,\n\t\timage: groupDto.image?.src,\n\t\ttype: groupDto.type,\n\t\tstagesIds: groupDto.stages?.map(({ id }) => id),\n\t};\n}\n\nexport function mapStageDtoToModel(stageDto: StageDto): StageModel\n{\n\treturn {\n\t\tid: stageDto.id,\n\t\ttitle: stageDto.title,\n\t\tcolor: stageDto.color,\n\t};\n}\n","import { GroupType, Model } from 'tasks.v2.const';\nimport { Core } from 'tasks.v2.core';\nimport { apiClient } from 'tasks.v2.lib.api-client';\nimport type { GroupModel } from 'tasks.v2.model.groups';\n\nimport { mapDtoToModel, mapStageDtoToModel } from './mappers';\nimport type { GroupInfo } from './types';\n\nclass GroupService\n{\n\tasync getUrl(id: number, type: string): Promise<string>\n\t{\n\t\tif (type !== GroupType.Collab)\n\t\t{\n\t\t\treturn `/workgroups/group/${id}/`;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\treturn apiClient.post('Group.getUrl', { id, type });\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('GroupService: getUrl error', error);\n\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tasync getStages(id: number): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst data = await apiClient.post('Group.Stage.list', { group: { id } });\n\n\t\t\tconst stages = data.map((stage) => mapStageDtoToModel(stage));\n\t\t\tconst stagesIds = stages.map((stage) => stage.id);\n\n\t\t\tawait Promise.all([\n\t\t\t\tCore.getStore().dispatch(`${Model.Stages}/upsertMany`, stages),\n\t\t\t\tCore.getStore().dispatch(`${Model.Groups}/update`, {\n\t\t\t\t\tid,\n\t\t\t\t\tfields: { stagesIds },\n\t\t\t\t}),\n\t\t\t]);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('GroupService: getStages error', error);\n\t\t}\n\t}\n\n\tasync getGroup(id: number): Promise<?GroupModel>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst data = await apiClient.post('Group.get', { group: { id } });\n\n\t\t\tconst group = mapDtoToModel(data);\n\n\t\t\tawait Core.getStore().dispatch(`${Model.Groups}/insert`, group);\n\n\t\t\treturn group;\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('GroupService: getGroup error', error);\n\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t#scrumInfoCache: { [taskId: number]: boolean } = {\n\t\t0: true,\n\t};\n\n\tasync getScrumInfo(taskId: number): Promise<void>\n\t{\n\t\tif (this.hasScrumInfo(taskId))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#scrumInfoCache[taskId] = true;\n\n\t\ttry\n\t\t{\n\t\t\tconst data = await apiClient.post('Scrum.getTaskInfo', { taskId });\n\n\t\t\tawait Promise.all([\n\t\t\t\tCore.getStore().dispatch(`${Model.Epics}/upsert`, data.epic),\n\t\t\t\tCore.getStore().dispatch(`${Model.Tasks}/update`, {\n\t\t\t\t\tid: taskId,\n\t\t\t\t\tfields: {\n\t\t\t\t\t\tstoryPoints: data.storyPoints,\n\t\t\t\t\t\tepicId: data.epic?.id,\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t]);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('GroupService: getScrumInfo error', error);\n\t\t}\n\t}\n\n\thasScrumInfo(taskId: number): boolean\n\t{\n\t\treturn this.#scrumInfoCache[taskId];\n\t}\n\n\t#groupInfoPromises: { [groupId: number]: Promise<GroupInfo> } = {};\n\n\tasync getGroupInfo(groupId: number): Promise<GroupInfo>\n\t{\n\t\tif (this.#groupInfoPromises[groupId])\n\t\t{\n\t\t\treturn this.#groupInfoPromises[groupId];\n\t\t}\n\n\t\tthis.#groupInfoPromises[groupId] = new Resolvable();\n\n\t\ttry\n\t\t{\n\t\t\tconst GroupFields = Object.freeze({\n\t\t\t\tOwnerData: 'OWNER_DATA',\n\t\t\t\tDateCreate: 'DATE_CREATE',\n\t\t\t\tSubjectData: 'SUBJECT_DATA',\n\t\t\t\tNumberOfMembers: 'NUMBER_OF_MEMBERS',\n\t\t\t});\n\n\t\t\tconst { data } = await BX.ajax.runAction('socialnetwork.api.workgroup.get', {\n\t\t\t\tdata: {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tselect: Object.values(GroupFields),\n\t\t\t\t\t\tgroupId,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tthis.#groupInfoPromises[groupId].resolve({\n\t\t\t\townerId: data[GroupFields.OwnerData]?.ID,\n\t\t\t\townerName: data[GroupFields.OwnerData]?.FORMATTED_NAME,\n\t\t\t\tdateCreate: data[GroupFields.DateCreate],\n\t\t\t\tsubjectTitle: data[GroupFields.SubjectData]?.NAME,\n\t\t\t\tnumberOfMembers: data[GroupFields.NumberOfMembers],\n\t\t\t});\n\n\t\t\treturn this.#groupInfoPromises[groupId];\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('GroupService: getGroupInfo error', error);\n\n\t\t\treturn {};\n\t\t}\n\t}\n}\n\nexport const groupService = new GroupService();\n\nfunction Resolvable(): Promise\n{\n\tconst promise = new Promise((resolve) => {\n\t\tthis.resolve = resolve;\n\t});\n\n\tpromise.resolve = this.resolve;\n\n\treturn promise;\n}\n","import { mapModelToDto, mapDtoToModel, mapStageDtoToModel } from './mappers';\n\nexport { groupService } from './group-service';\nexport const GroupMappers = { mapModelToDto, mapDtoToModel, mapStageDtoToModel };\nexport type { GroupDto, StageDto } from './types';\n"],"names":["mapModelToDto","group","id","name","image","type","mapDtoToModel","groupDto","src","stagesIds","stages","map","mapStageDtoToModel","stageDto","title","color","GroupService","getUrl","GroupType","Collab","apiClient","post","error","console","getStages","data","stage","Promise","all","Core","getStore","dispatch","Model","Stages","Groups","fields","getGroup","getScrumInfo","taskId","hasScrumInfo","Epics","epic","Tasks","storyPoints","epicId","getGroupInfo","groupId","Resolvable","GroupFields","Object","freeze","OwnerData","DateCreate","SubjectData","NumberOfMembers","BX","ajax","runAction","params","select","values","resolve","ownerId","ID","ownerName","FORMATTED_NAME","dateCreate","subjectTitle","NAME","numberOfMembers","groupService","promise","GroupMappers"],"mappings":"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"}