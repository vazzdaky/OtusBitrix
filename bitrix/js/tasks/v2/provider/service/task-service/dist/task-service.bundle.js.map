{"version":3,"file":"task-service.bundle.js","sources":["../src/mappers.js","../src/task-get-extractor.js","../src/task-service.js","../src/index.js"],"sourcesContent":["import { Type } from 'main.core';\nimport { CheckListMappers } from 'tasks.v2.provider.service.check-list-service';\nimport type { TaskModel } from 'tasks.v2.model.tasks';\nimport type { CheckListModel } from 'tasks.v2.model.check-list';\nimport type { TaskDto, TaskSliderData } from './types';\n\nexport function mapModelToDto(task: TaskModel): TaskDto\n{\n\treturn {\n\t\tid: task.id,\n\t\ttitle: prepareValue(task.title),\n\t\tdescription: prepareValue(task.description, mapDescription(task.description)),\n\t\tcreator: prepareValue(task.creatorId, { id: task.creatorId }),\n\t\tcreatedTs: prepareValue(task.createdTs, Math.floor(task.createdTs / 1000)),\n\t\tresponsible: prepareValue(task.responsibleId, { id: task.responsibleId }),\n\t\tdeadlineTs: prepareValue(task.deadlineTs, Math.floor(task.deadlineTs / 1000)),\n\t\tneedsControl: prepareValue(task.needsControl),\n\t\tfileIds: prepareValue(task.fileIds),\n\t\tchecklist: prepareValue(task.checklist),\n\t\tgroup: prepareValue(task.groupId, { id: task.groupId }),\n\t\tstage: prepareValue(task.stageId, { id: task.stageId }),\n\t\tflow: prepareValue(task.flowId, { id: task.flowId }),\n\t\tpriority: prepareValue(task.isImportant, task.isImportant ? 'high' : 'low'),\n\t\tstatus: prepareValue(task.status),\n\t\tstatusChangedTs: prepareValue(task.statusChangedTs, Math.floor(task.statusChangedTs / 1000)),\n\t\taccomplices: prepareValue(task.accomplicesIds, task.accomplicesIds?.map((id) => ({ id }))),\n\t\tauditors: prepareValue(task.auditorsIds, task.auditorsIds?.map((id) => ({ id }))),\n\t\tchatId: prepareValue(task.chatId),\n\t\tparent: undefined,\n\t};\n}\n\nexport function mapDtoToModel(taskDto: TaskDto): TaskModel\n{\n\tconst task = {\n\t\tid: taskDto.id,\n\t\ttitle: taskDto.title,\n\t\tisImportant: taskDto.priority === 'high',\n\t\tdescription: taskDto.description,\n\t\tcreatorId: taskDto.creator.id,\n\t\tcreatedTs: taskDto.createdTs * 1000,\n\t\tresponsibleId: taskDto.responsible.id,\n\t\tdeadlineTs: taskDto.deadlineTs * 1000,\n\t\tneedsControl: taskDto.needsControl,\n\t\tfileIds: taskDto.fileIds,\n\t\tchecklist: taskDto.checklist ?? [],\n\t\tcontainsChecklist: taskDto.containsChecklist,\n\t\tgroupId: taskDto.group?.id,\n\t\tstageId: taskDto.stage?.id,\n\t\tflowId: taskDto.flow?.id,\n\t\tstatus: taskDto.status,\n\t\tstatusChangedTs: taskDto.statusChangedTs * 1000,\n\t\taccomplicesIds: taskDto.accomplices.map(({ id }) => id),\n\t\tauditorsIds: taskDto.auditors.map(({ id }) => id),\n\t\tchatId: taskDto.chatId,\n\t};\n\n\tif (taskDto.rights)\n\t{\n\t\ttask.rights = taskDto.rights;\n\t}\n\n\treturn task;\n}\n\nexport function mapModelToSliderData(task: TaskModel, checkLists: CheckListModel[]): TaskSliderData\n{\n\tconst data = {\n\t\tTITLE: prepareValue(task.title),\n\t\tDESCRIPTION: prepareValue(task.description, mapDescription(task.description)),\n\t\tRESPONSIBLE_ID: prepareValue(task.responsibleId),\n\t\tGROUP_ID: prepareValue(task.groupId),\n\t\tDEADLINE_TS: prepareValue(task.deadlineTs, Math.floor(task.deadlineTs / 1000)),\n\t\tIS_IMPORTANT: prepareValue(task.isImportant, task.isImportant ? 'Y' : null),\n\t\tFILE_IDS: prepareValue(task.fileIds, task.fileIds?.length > 0 ? task.fileIds : null),\n\t\tCHECKLIST: CheckListMappers.mapModelToSliderData(checkLists),\n\t};\n\n\treturn Object.fromEntries(Object.entries(data).filter(([, value]) => value));\n}\n\nfunction prepareValue(value: any, mappedValue: any = value): any | undefined\n{\n\treturn Type.isUndefined(value) ? undefined : mappedValue;\n}\n\n// TODO: Temporary. Remove when removing old full card\nfunction mapDescription(description: ?string): ?string\n{\n\treturn description?.replaceAll('[p]\\n', '').replaceAll('[/p]', '');\n}\n","import { GroupMappers } from 'tasks.v2.provider.service.group-service';\nimport { FlowMappers } from 'tasks.v2.provider.service.flow-service';\nimport { UserMappers } from 'tasks.v2.provider.service.user-service';\nimport type { FlowModel } from 'tasks.v2.model.flows';\nimport type { GroupModel } from 'tasks.v2.model.groups';\nimport type { StageModel } from 'tasks.v2.model.stages';\nimport type { TaskModel } from 'tasks.v2.model.tasks';\nimport type { UserModel } from 'tasks.v2.model.users';\n\nimport { mapDtoToModel } from './mappers';\nimport type { TaskDto, UserDto } from './types';\n\nexport class TaskGetExtractor\n{\n\t#data: TaskDto;\n\n\tconstructor(data: TaskDto)\n\t{\n\t\tthis.#data = data;\n\t}\n\n\tgetTask(): TaskModel\n\t{\n\t\treturn mapDtoToModel(this.#data);\n\t}\n\n\tgetFlow(): FlowModel | null\n\t{\n\t\treturn this.#data.flow ? FlowMappers.mapDtoToModel(this.#data.flow) : null;\n\t}\n\n\tgetGroup(): GroupModel | null\n\t{\n\t\treturn this.#data.group ? GroupMappers.mapDtoToModel(this.#data.group) : null;\n\t}\n\n\tgetStages(): StageModel[]\n\t{\n\t\treturn this.#data.stage ? [GroupMappers.mapStageDtoToModel(this.#data.stage)] : [];\n\t}\n\n\tgetUsers(): UserModel[]\n\t{\n\t\treturn [\n\t\t\tthis.#data.creator,\n\t\t\tthis.#data.responsible,\n\t\t\t...this.#data.accomplices,\n\t\t\t...this.#data.auditors,\n\t\t].map((userDto: UserDto): UserModel => UserMappers.mapDtoToModel(userDto));\n\t}\n}\n","import { Runtime } from 'main.core';\nimport type { Store } from 'ui.vue3.vuex';\n\nimport { Model, TaskStatus } from 'tasks.v2.const';\nimport { Core } from 'tasks.v2.core';\nimport { apiClient } from 'tasks.v2.lib.api-client';\nimport { fileService } from 'tasks.v2.provider.service.file-service';\nimport type { TaskModel } from 'tasks.v2.model.tasks';\n\nimport { TaskGetExtractor } from './task-get-extractor';\nimport { mapModelToDto } from './mappers';\nimport type { TaskDto } from './types';\n\nclass TaskService\n{\n\tasync getById(id: number): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst data = await apiClient.post('Task.get', { task: { id } });\n\n\t\t\tawait this.#extractTask(data);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('TaskService: getById error', error);\n\t\t}\n\t}\n\n\tasync getRights(id: number): Promise<void>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst { rights } = await apiClient.post('Task.Access.get', { task: { id } });\n\n\t\t\tawait this.#updateStoreTask(id, { rights });\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('TaskService: getRights error', error);\n\t\t}\n\t}\n\n\tasync add(task: TaskModel): Promise<[number, Error | null]>\n\t{\n\t\ttry\n\t\t{\n\t\t\tconst data = await apiClient.post('Task.add', { task: mapModelToDto(task) });\n\t\t\tconst id = data.id;\n\n\t\t\tawait this.#extractTask(data);\n\n\t\t\treturn [id, null];\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tconsole.error('TaskService: add error', error);\n\n\t\t\treturn [0, new Error(error?.errors?.[0]?.message)];\n\t\t}\n\t}\n\n\tasync update(id: number, fields: TaskModel): Promise<void>\n\t{\n\t\tconst taskBeforeUpdate = this.#getStoreTask(id);\n\n\t\tawait this.#updateStoreTask(id, fields);\n\n\t\tif (!this.#isRealId(id))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tawait this.#updateScrumFields(id, fields, taskBeforeUpdate);\n\t\t\tawait this.#updateDeadlineFields(id, fields, taskBeforeUpdate);\n\t\t\tawait this.#updateTaskFields(id, fields, taskBeforeUpdate);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tawait this.#updateStoreTask(id, taskBeforeUpdate);\n\n\t\t\tconsole.error('TaskService: update error', error);\n\t\t}\n\t}\n\n\tasync delete(id: number): Promise<void>\n\t{\n\t\tconst taskBeforeDelete = this.#getStoreTask(id);\n\n\t\tawait this.#deleteStoreTask(id);\n\n\t\tif (!this.#isRealId(id))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tawait apiClient.post('Task.delete', { task: { id } });\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tvoid this.#insertStoreTask(taskBeforeDelete);\n\n\t\t\tconsole.error('TaskService: delete error', error);\n\t\t}\n\t}\n\n\t#isRealId(id: number): boolean\n\t{\n\t\treturn Number.isInteger(id) && id > 0;\n\t}\n\n\t#updateFields: { [taskId: number]: TaskModel } = {};\n\t#updatePromises: { [taskId: number]: Resolvable } = {};\n\t#updateServerTaskDebounced: { [taskId: number]: Function } = {};\n\n\tasync #updateTaskFields(id: number, fields: TaskModel, taskBeforeUpdate: TaskModel): Promise<void>\n\t{\n\t\tconst taskFields = this.#getTaskFields(fields);\n\t\tif (!this.#hasChanges(taskBeforeUpdate, taskFields))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#updateFields[id] = { ...this.#updateFields[id], ...taskFields };\n\n\t\tthis.#updatePromises[id] ??= new Resolvable();\n\t\tthis.#updateServerTaskDebounced[id] ??= Runtime.debounce(this.#updateServerTask, 500, this);\n\t\tthis.#updateServerTaskDebounced[id](id);\n\t\tawait this.#updatePromises[id];\n\t}\n\n\tasync #updateServerTask(id: number): Promise<void>\n\t{\n\t\tconst fields = this.#updateFields[id];\n\t\tdelete this.#updateFields[id];\n\n\t\tconst promise = this.#updatePromises[id];\n\t\tdelete this.#updatePromises[id];\n\n\t\tconst data = await apiClient.post('Task.update', { task: mapModelToDto({ id, ...fields }) });\n\t\tawait this.#extractTask(data);\n\n\t\tpromise.resolve();\n\t}\n\n\tasync #updateScrumFields(id: number, fields: TaskModel, taskBeforeUpdate: TaskModel): Promise<void>\n\t{\n\t\tconst scrumFields = this.#getFilteredFields(fields, this.#scrumFields);\n\t\tif (!this.#hasChanges(taskBeforeUpdate, scrumFields))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tawait apiClient.post('Scrum.updateTask', { taskId: id, fields: scrumFields });\n\t}\n\n\tasync start(id: number): Promise<void>\n\t{\n\t\tawait this.#updateStatus(id, 'Task.Status.start', TaskStatus.InProgress);\n\t}\n\n\tasync disapprove(id: number): Promise<void>\n\t{\n\t\tawait this.#updateStatus(id, 'Task.Status.disapprove', TaskStatus.Pending);\n\t}\n\n\tasync defer(id: number): Promise<void>\n\t{\n\t\tawait this.#updateStatus(id, 'Task.Status.defer', TaskStatus.Deferred);\n\t}\n\n\tasync approve(id: number): Promise<void>\n\t{\n\t\tawait this.#updateStatus(id, 'Task.Status.approve', TaskStatus.Completed);\n\t}\n\n\tasync pause(id: number): Promise<void>\n\t{\n\t\tawait this.#updateStatus(id, 'Task.Status.pause', TaskStatus.Pending);\n\t}\n\n\tasync complete(id: number): Promise<void>\n\t{\n\t\tconst status = this.#getStoreTask(id).needsControl ? TaskStatus.SupposedlyCompleted : TaskStatus.Completed;\n\n\t\tawait this.#updateStatus(id, 'Task.Status.complete', status);\n\t}\n\n\tasync renew(id: number): Promise<void>\n\t{\n\t\tawait this.#updateStatus(id, 'Task.Status.renew', TaskStatus.Pending);\n\t}\n\n\tasync #updateStatus(id: number, action: string, status: string): Promise<void>\n\t{\n\t\tconst taskBeforeUpdate = this.#getStoreTask(id);\n\n\t\tawait this.#updateStoreTask(id, { status });\n\n\t\tif (!this.#isRealId(id))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tconst data = await apiClient.post(action, { task: { id } });\n\n\t\t\tawait this.#extractTask(data);\n\t\t}\n\t\tcatch (error)\n\t\t{\n\t\t\tawait this.#updateStoreTask(id, taskBeforeUpdate);\n\n\t\t\tconsole.error(`TaskService: ${action} error`, error);\n\t\t}\n\t}\n\n\tasync #updateDeadlineFields(id: number, fields: TaskModel, taskBeforeUpdate: TaskModel): Promise<void>\n\t{\n\t\tconst deadlineFields = this.#getFilteredFields(fields, this.#deadlineFields);\n\t\tif (!this.#hasChanges(taskBeforeUpdate, deadlineFields))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tawait apiClient.post('Task.Deadline.update', { task: mapModelToDto({ id, ...deadlineFields }) });\n\t}\n\n\t#getTaskFields(fields: TaskModel): TaskModel\n\t{\n\t\treturn Object.fromEntries(Object.entries(fields).filter(([field]) => {\n\t\t\tconst scrumField = this.#scrumFields.has(field);\n\t\t\tconst statusField = this.#statusFields.has(field);\n\t\t\tconst deadlineField = this.#deadlineFields.has(field);\n\n\t\t\treturn !scrumField && !statusField && !deadlineField;\n\t\t}));\n\t}\n\n\t#getFilteredFields(fields: TaskModel, filterSet: Set): TaskModel\n\t{\n\t\treturn Object.fromEntries(Object.entries(fields).filter(([field]) => filterSet.has(field)));\n\t}\n\n\tget #scrumFields(): Set\n\t{\n\t\treturn new Set(['storyPoints', 'epicId']);\n\t}\n\n\tget #statusFields(): Set\n\t{\n\t\treturn new Set(['status']);\n\t}\n\n\tget #deadlineFields(): Set\n\t{\n\t\treturn new Set(['deadlineTs']);\n\t}\n\n\t#hasChanges(task: TaskModel, fields: TaskModel): boolean\n\t{\n\t\treturn Object.entries(fields).some(([field, value]) => JSON.stringify(task[field]) !== JSON.stringify(value));\n\t}\n\n\t#getStoreTask(id: number): TaskModel\n\t{\n\t\treturn { ...this.$store.getters[`${Model.Tasks}/getById`](id) };\n\t}\n\n\tasync #insertStoreTask(task: TaskModel): Promise<void>\n\t{\n\t\tawait this.$store.dispatch(`${Model.Tasks}/insert`, task);\n\t}\n\n\tasync #updateStoreTask(id: number, fields: TaskModel): Promise<void>\n\t{\n\t\tawait this.$store.dispatch(`${Model.Tasks}/update`, { id, fields });\n\t}\n\n\tasync #extractTask(data: TaskDto): Promise<void>\n\t{\n\t\tconst extractor = new TaskGetExtractor(data);\n\n\t\tawait Promise.all([\n\t\t\tthis.$store.dispatch(`${Model.Tasks}/upsert`, extractor.getTask()),\n\t\t\tthis.$store.dispatch(`${Model.Flows}/upsert`, extractor.getFlow()),\n\t\t\tthis.$store.dispatch(`${Model.Groups}/insert`, extractor.getGroup()),\n\t\t\tthis.$store.dispatch(`${Model.Stages}/upsertMany`, extractor.getStages()),\n\t\t\tthis.$store.dispatch(`${Model.Users}/upsertMany`, extractor.getUsers()),\n\t\t]);\n\n\t\tawait fileService.get(data.id).sync(data.fileIds);\n\t}\n\n\tasync #deleteStoreTask(id: number): Promise<void>\n\t{\n\t\tawait this.$store.dispatch(`${Model.Tasks}/delete`, id);\n\t}\n\n\tget $store(): Store\n\t{\n\t\treturn Core.getStore();\n\t}\n}\n\nexport const taskService = new TaskService();\n\nfunction Resolvable(): Promise\n{\n\tconst promise = new Promise((resolve) => {\n\t\tthis.resolve = resolve;\n\t});\n\n\tpromise.resolve = this.resolve;\n\n\treturn promise;\n}\n","import { mapModelToDto, mapDtoToModel, mapModelToSliderData } from './mappers';\n\nexport { taskService } from './task-service';\nexport const TaskMappers = { mapModelToDto, mapDtoToModel, mapModelToSliderData };\nexport type { TaskDto } from './types';\n"],"names":["mapModelToDto","task","id","title","prepareValue","description","mapDescription","creator","creatorId","createdTs","Math","floor","responsible","responsibleId","deadlineTs","needsControl","fileIds","checklist","group","groupId","stage","stageId","flow","flowId","priority","isImportant","status","statusChangedTs","accomplices","accomplicesIds","map","auditors","auditorsIds","chatId","parent","undefined","mapDtoToModel","taskDto","containsChecklist","rights","mapModelToSliderData","checkLists","data","TITLE","DESCRIPTION","RESPONSIBLE_ID","GROUP_ID","DEADLINE_TS","IS_IMPORTANT","FILE_IDS","length","CHECKLIST","CheckListMappers","Object","fromEntries","entries","filter","value","mappedValue","Type","isUndefined","replaceAll","TaskGetExtractor","constructor","getTask","getFlow","FlowMappers","getGroup","GroupMappers","getStages","mapStageDtoToModel","getUsers","userDto","UserMappers","TaskService","getById","apiClient","post","error","console","getRights","add","Error","errors","message","update","fields","taskBeforeUpdate","delete","taskBeforeDelete","start","TaskStatus","InProgress","disapprove","Pending","defer","Deferred","approve","Completed","pause","complete","SupposedlyCompleted","renew","$store","Core","getStore","Number","isInteger","taskFields","Resolvable","Runtime","debounce","promise","resolve","scrumFields","taskId","action","deadlineFields","field","scrumField","has","statusField","deadlineField","filterSet","Set","some","JSON","stringify","getters","Model","Tasks","dispatch","extractor","Promise","all","Flows","Groups","Stages","Users","fileService","get","sync","taskService","TaskMappers"],"mappings":"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"}