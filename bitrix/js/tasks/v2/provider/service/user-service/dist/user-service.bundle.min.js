this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};this.BX.Tasks.V2.Provider=this.BX.Tasks.V2.Provider||{};(function(e,s,t,r){"use strict";function i(e){return{id:e.id,name:e.name,image:e.image,type:e.type}}function a(e){return{id:e.id,name:e.name,image:e.image,type:e.type}}var o=babelHelpers.classPrivateFieldLooseKey("getUnloadedIds");class n{constructor(){Object.defineProperty(this,o,{value:c})}getUrl(e){return`/company/personal/user/${e}/`}async list(e){const t=babelHelpers.classPrivateFieldLooseBase(this,o)[o](e);if(t.length===0){return}try{const e=await r.apiClient.post("User.list",{ids:t});const i=e.map((e=>a(e)));await this.$store.dispatch(`${s.Model.Users}/upsertMany`,i)}catch(e){console.error("UserService: list error",e)}}hasUsers(e){return babelHelpers.classPrivateFieldLooseBase(this,o)[o](e).length===0}get $store(){return t.Core.getStore()}}function c(e){const t=this.$store.getters[`${s.Model.Users}/getByIds`](e);const r=new Set(t.map((({id:e})=>e)));return e.filter((e=>!r.has(e)))}const l=new n;const d={mapModelToDto:i,mapDtoToModel:a};e.UserMappers=d;e.userService=l})(this.BX.Tasks.V2.Provider.Service=this.BX.Tasks.V2.Provider.Service||{},BX.Tasks.V2.Const,BX.Tasks.V2,BX.Tasks.V2.Lib);
//# sourceMappingURL=user-service.bundle.map.js