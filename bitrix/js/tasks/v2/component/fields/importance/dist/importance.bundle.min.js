this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};this.BX.Tasks.V2.Component=this.BX.Tasks.V2.Component||{};(function(t,s,e,a,n,i){"use strict";const o={components:{BIcon:s.BIcon},props:{taskId:{type:[Number,String],required:true}},setup(){return{Outline:e.Outline}},computed:{task(){return this.$store.getters[`${n.Model.Tasks}/getById`](this.taskId)},readonly(){return!this.task.rights.edit}},methods:{handleClick(){if(this.readonly){return}const t=!this.task.isImportant;void i.taskService.update(this.taskId,{isImportant:t})}},template:`\n\t\t<div\n\t\t\tclass="tasks-field-importance"\n\t\t\t:class="{ '--active': task.isImportant, '--readonly': readonly }"\n\t\t\t:data-task-id="taskId"\n\t\t\t:data-task-field-id="'isImportant'"\n\t\t\t:data-task-field-value="task.isImportant"\n\t\t\t@click="handleClick"\n\t\t>\n\t\t\t<BIcon :name="task.isImportant ? Outline.FIRE_SOLID : Outline.FIRE" :hoverable="false"/>\n\t\t</div>\n\t`};t.Importance=o})(this.BX.Tasks.V2.Component.Fields=this.BX.Tasks.V2.Component.Fields||{},BX.UI.IconSet,BX.UI.IconSet,BX,BX.Tasks.V2.Const,BX.Tasks.V2.Provider.Service);
//# sourceMappingURL=importance.bundle.map.js