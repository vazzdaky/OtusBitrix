this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};this.BX.Tasks.V2.Component=this.BX.Tasks.V2.Component||{};(function(t,e,s,i,n,a,r,d,o){"use strict";const l=Object.freeze({id:"responsibleId",title:r.Loc.getMessage("TASKS_V2_RESPONSIBLE_TITLE"),dialogOptions:(t="tasks-card-participant")=>{const e=d.Core.getParams().limits;return{context:t,multiple:false,enableSearch:true,entities:[{id:o.EntitySelectorEntity.User,options:{emailUsers:true,inviteGuestLink:true,analyticsSource:"tasks",lockGuestLink:!e.mailUserIntegration,lockGuestLinkFeatureId:e.mailUserIntegrationFeatureId}},{id:"department"}]}}});const c={name:"TaskResponsible",components:{Participant:i.Participant,BIcon:s.BIcon},inject:["analytics","cardType"],props:{taskId:{type:[Number,String],required:true},context:{type:String,required:true},selectorWithActionMenu:{type:Boolean,default:false}},setup(){return{BIcon:s.BIcon,Outline:s.Outline}},data(){return{localContext:`${this.context}-${this.$options.name}`}},computed:{...e.mapGetters({currentUserId:`${o.Model.Interface}/currentUserId`}),task(){return this.$store.getters[`${o.Model.Tasks}/getById`](this.taskId)},dialogOptions(){return l.dialogOptions(this.localContext)},preselected(){return[["user",this.task.responsibleId||this.currentUserId]]},isEdit(){return Number.isInteger(this.taskId)&&this.taskId>0},isFlowFilledOnAdd(){return this.task.flowId>0&&!this.isEdit},dataset(){return{"data-task-id":this.taskId,"data-task-field-id":l.id,"data-task-field-value":this.task.responsibleId}},readonly(){return!this.task.rights.delegate}},methods:{handleHintClick(){void a.taskService.update(this.taskId,{creatorId:this.currentUserId})},updateTask(t){void this.$store.dispatch(`${o.Model.Users}/upsert`,t);if(this.task.responsibleId!==t.id){this.sendAnalytics()}void a.taskService.update(this.taskId,{responsibleId:t.id})},sendAnalytics(){n.analytics.sendAssigneeChange(this.analytics,{cardType:this.cardType})}},template:`\n\t\t<div v-if="isFlowFilledOnAdd" class="tasks-field-responsible-auto">\n\t\t\t<BIcon :name="Outline.BOTTLENECK" color="var(--ui-color-accent-main-primary)"></BIcon>\n\t\t\t<div>\n\t\t\t\t{{ loc('TASKS_V2_RESPONSIBLE_AUTO') }}\n\t\t\t</div>\n\t\t</div>\n\t\t<Participant\n\t\t\tv-else\n\t\t\t:taskId="taskId"\n\t\t\t:dialogOptions="dialogOptions"\n\t\t\t:preselected="preselected"\n\t\t\t:canChange="() => task.rights.delegate || task.creatorId === currentUserId"\n\t\t\t:cantChangeHint="loc('TASKS_V2_RESPONSIBLE_CANT_CHANGE')"\n\t\t\t:hintClickHandler="handleHintClick"\n\t\t\t:selectorWithActionMenu="selectorWithActionMenu"\n\t\t\t:dataset="dataset"\n\t\t\t:readonly="readonly"\n\t\t\t@update="updateTask"\n\t\t/>\n\t`};t.Responsible=c;t.responsibleMeta=l})(this.BX.Tasks.V2.Component.Fields=this.BX.Tasks.V2.Component.Fields||{},BX.Vue3.Vuex,BX.UI.IconSet,BX.Tasks.V2.Component.Elements,BX.Tasks.V2.Lib,BX.Tasks.V2.Provider.Service,BX,BX.Tasks.V2,BX.Tasks.V2.Const);
//# sourceMappingURL=responsible.bundle.map.js