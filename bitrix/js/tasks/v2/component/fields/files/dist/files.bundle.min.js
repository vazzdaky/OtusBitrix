this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};this.BX.Tasks.V2.Component=this.BX.Tasks.V2.Component||{};(function(t,e,i,s,n,l,o,d,a,r,u,p,h,c,f,S,m){"use strict";const k=Object.freeze({id:"fileIds",title:e.Loc.getMessage("TASKS_V2_FILES_TITLE")});const g={name:"TaskFiles",components:{BIcon:s.BIcon},props:{taskId:{type:[Number,String],required:true}},emits:["open"],setup(){return{Animated:o.Animated,Outline:o.Outline,filesMeta:k}},data(){return{files:m.fileService.get(this.taskId).getFiles()}},computed:{task(){return this.$store.getters[`${u.Model.Tasks}/getById`](this.taskId)},filesCount(){return this.task.fileIds.length},textFormatted(){if(this.filesCount>0){return this.loc("TASKS_V2_FILES_COUNT",{"#COUNT#":this.filesCount})}return this.loc("TASKS_V2_FILES_ADD")},isUploading(){return this.files.some((({status:t})=>[l.FileStatus.UPLOADING,l.FileStatus.LOADING].includes(t)))},readonly(){return!this.task.rights.edit}},methods:{handleAddClick(){m.fileService.get(this.taskId).browse({bindElement:this.$refs.add.$el})}},template:`\n\t\t<div\n\t\t\tclass="tasks-field-files"\n\t\t\t:data-task-id="taskId"\n\t\t\t:data-task-field-id="filesMeta.id"\n\t\t\t:data-task-files-count="filesCount"\n\t\t>\n\t\t\t<div\n\t\t\t\tclass="tasks-field-files-main"\n\t\t\t\tdata-task-files-open\n\t\t\t\t@click="$emit('open')"\n\t\t\t>\n\t\t\t\t<template v-if="isUploading">\n\t\t\t\t\t<BIcon class="tasks-field-files-icon" :name="Animated.LOADER_WAIT"/>\n\t\t\t\t\t<div class="tasks-field-files-text">{{ loc('TASKS_V2_FILES_LOADING') }}</div>\n\t\t\t\t</template>\n\t\t\t\t<template v-else>\n\t\t\t\t\t<BIcon class="tasks-field-files-icon" :name="Outline.ATTACH"/>\n\t\t\t\t\t<div class="tasks-field-files-text" :class="{ '--add': filesCount === 0 }">\n\t\t\t\t\t\t{{ textFormatted }}\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t\t<BIcon\n\t\t\t\tv-if="!readonly"\n\t\t\t\tclass="tasks-field-files-add"\n\t\t\t\t:name="Outline.PLUS_L"\n\t\t\t\tdata-task-files-plus\n\t\t\t\tref="add"\n\t\t\t\t@click="handleAddClick"\n\t\t\t/>\n\t\t</div>\n\t`};const I={components:{UiButton:f.Button},props:{taskId:{type:[Number,String],required:true}},setup(){return{ButtonSize:f.ButtonSize}},methods:{handleClick(){m.fileService.get(this.taskId).browse({bindElement:this.$el})}},template:`\n\t\t<span data-task-files-upload>\n\t\t\t<UiButton\n\t\t\t\t:text="loc('TASKS_V2_FILES_UPLOAD')"\n\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t@click="handleClick"\n\t\t\t/>\n\t\t</span>\n\t`};const A={name:"TaskFilesSheet",components:{UserFieldWidgetComponent:S.UserFieldWidgetComponent,UploadButton:I,BottomSheet:n.BottomSheet,BIcon:s.BIcon},props:{taskId:{type:[Number,String],required:true},isShown:{type:Boolean,required:true}},emits:["close"],setup(t){return{Outline:o.Outline,uploaderAdapter:m.fileService.get(t.taskId).getAdapter()}},data(){return{files:[]}},computed:{...i.mapGetters({titleFieldOffsetHeight:`${u.Model.Interface}/titleFieldOffsetHeight`}),task(){return this.$store.getters[`${u.Model.Tasks}/getById`](this.taskId)},readonly(){return!this.task.rights.edit},widgetOptions(){return{isEmbedded:true,withControlPanel:false,canCreateDocuments:false,tileWidgetOptions:{compact:true}}}},watch:{isShown(){if(!this.isShown){return}void this.loadFiles()},titleFieldOffsetHeight(){var t;(t=this.$refs.bottomSheet)==null?void 0:t.adjustPosition()}},methods:{async loadFiles(){this.files=await m.fileService.get(this.taskId).list(this.task.fileIds)}},template:`\n\t\t<BottomSheet :isShown="isShown" ref="bottomSheet">\n\t\t\t<div class="tasks-field-files-sheet" :data-task-id="taskId">\n\t\t\t\t<div class="tasks-field-files-header">\n\t\t\t\t\t<div class="tasks-field-files-title">{{ loc('TASKS_V2_FILES_TITLE') }}</div>\n\t\t\t\t\t<BIcon :name="Outline.CROSS_L" data-task-files-close @click="$emit('close')"/>\n\t\t\t\t</div>\n\t\t\t\t<div class="tasks-field-files-list">\n\t\t\t\t\t<UserFieldWidgetComponent :uploaderAdapter="uploaderAdapter" :widgetOptions="widgetOptions"/>\n\t\t\t\t</div>\n\t\t\t\t<div class="tasks-field-files-footer" v-if="!readonly">\n\t\t\t\t\t<UploadButton :taskId="taskId"/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</BottomSheet>\n\t`};const B={components:{Popup:c.Popup,UiButton:f.Button,UserFieldWidgetComponent:S.UserFieldWidgetComponent},props:{taskId:{type:[Number,String],required:true},getBindElement:{type:Function,required:true}},emits:["upload","close"],setup(t){return{ButtonSize:f.ButtonSize,AirButtonStyle:f.AirButtonStyle,ButtonIcon:f.ButtonIcon,uploaderAdapter:m.fileService.get(t.taskId).getAdapter()}},data(){return{files:m.fileService.get(this.taskId).getFiles()}},computed:{bindElement(){return this.getBindElement()},popupOptions(){return{id:"tasks-field-files-popup",bindElement:this.bindElement,minWidth:350,maxHeight:320,padding:18,bindOptions:{forceBindPosition:true,forceTop:true,position:"top"},closeByEsc:true,autoHideHandler:t=>{var e;const i=this.files.some((({isMenuShown:t})=>t));return((e=this.$refs.popup)==null?void 0:e.autoHideHandler(t))&&!i}}},widgetOptions(){return{isEmbedded:true,withControlPanel:false,canCreateDocuments:false,tileWidgetOptions:{enableDropzone:false,hideDropArea:true,compact:true,autoCollapse:false}}},filesCount(){return this.files.length}},watch:{filesCount(){if(this.filesCount===0){this.closePopup()}}},methods:{handleClearClick(){m.fileService.get(this.taskId).getAdapter().getUploader().removeFiles();this.closePopup()},handleUploadClick(){m.fileService.get(this.taskId).browseFiles()},handleMyDriveClick(){m.fileService.get(this.taskId).browseMyDrive()},closePopup(){this.$emit("close")}},template:`\n\t\t<Popup\n\t\t\t:options="popupOptions"\n\t\t\tref="popup"\n\t\t\t@close="closePopup"\n\t\t>\n\t\t\t<div class="tasks-field-files-popup">\n\t\t\t\t<div class="tasks-field-files-popup-files">\n\t\t\t\t\t<UserFieldWidgetComponent :uploaderAdapter="uploaderAdapter" :widgetOptions="widgetOptions"/>\n\t\t\t\t</div>\n\t\t\t\t<div class="tasks-field-files-popup-footer">\n\t\t\t\t\t<div class="tasks-field-files-popup-add-buttons">\n\t\t\t\t\t\t<UiButton\n\t\t\t\t\t\t\t:text="loc('TASKS_V2_FILES_UPLOAD_BUTTON')"\n\t\t\t\t\t\t\t:size="ButtonSize.EXTRA_SMALL"\n\t\t\t\t\t\t\t:style="AirButtonStyle.TINTED"\n\t\t\t\t\t\t\t:leftIcon="ButtonIcon.DOWNLOAD"\n\t\t\t\t\t\t\t@click="handleUploadClick"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<UiButton\n\t\t\t\t\t\t\t:text="loc('TASKS_V2_FILES_MY_DRIVE')"\n\t\t\t\t\t\t\t:size="ButtonSize.EXTRA_SMALL"\n\t\t\t\t\t\t\t:style="AirButtonStyle.TINTED"\n\t\t\t\t\t\t\t:leftIcon="ButtonIcon.CLOUD"\n\t\t\t\t\t\t\t@click="handleMyDriveClick"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<UiButton\n\t\t\t\t\t\t:text="loc('TASKS_V2_FILES_CLEAR')"\n\t\t\t\t\t\t:size="ButtonSize.EXTRA_SMALL"\n\t\t\t\t\t\t:style="AirButtonStyle.PLAIN_NO_ACCENT"\n\t\t\t\t\t\t:leftIcon="ButtonIcon.REMOVE"\n\t\t\t\t\t\t@click="handleClearClick"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Popup>\n\t`};const C={components:{Chip:r.Chip,FilesPopup:B},inject:["analytics","cardType"],props:{taskId:{type:[Number,String],required:true},isAutonomous:{type:Boolean,default:false}},setup(t){return{filesMeta:k,fileService:m.fileService.get(t.taskId)}},data(){return{files:this.fileService.getFiles(),isPopupShown:false,isPopupShownWithFiles:false}},computed:{task(){return this.$store.getters[`${u.Model.Tasks}/getById`](this.taskId)},group(){return this.$store.getters[`${u.Model.Groups}/getById`](this.task.groupId)},filesCount(){return this.task.fileIds.length},design(){return{[!this.isAutonomous&&!this.isSelected]:r.ChipDesign.Shadow,[!this.isAutonomous&&this.isSelected]:r.ChipDesign.ShadowAccent,[this.isAutonomous&&!this.isSelected]:r.ChipDesign.Outline,[this.isAutonomous&&this.isSelected]:r.ChipDesign.OutlineAccent,[this.hasError]:r.ChipDesign.OutlineAlert}.true},isSelected(){if(this.isAutonomous){return this.files.length>0}const t=this.$store.getters[`${u.Model.Tasks}/wasFieldFilled`](this.taskId,k.id);return t||this.files.length>0},icon(){if(this.isAutonomous&&this.isUploading){return o.Animated.LOADER_WAIT}return o.Outline.ATTACH},text(){if(this.isAutonomous&&this.filesCount>0){return this.loc("TASKS_V2_FILES_COUNT",{"#COUNT#":this.filesCount})}return k.title},isUploading(){return this.fileService.isUploading()},hasError(){return this.files.some((({status:t})=>[l.FileStatus.UPLOAD_FAILED,l.FileStatus.LOAD_FAILED].includes(t)))},readonly(){return!this.task.rights.edit},popupHasAlreadyBeenShown(){return this.filesCount>0&&this.isPopupShownWithFiles}},mounted(){this.fileService.subscribe("onFileAdd",this.handleFileAdd);this.fileService.subscribe("onFileComplete",this.handleFileComplete)},beforeUnmount(){this.fileService.unsubscribe("onFileAdd",this.handleFileAdd);this.fileService.unsubscribe("onFileComplete",this.handleFileComplete)},methods:{handleFileAdd(){if(this.isAutonomous&&this.popupHasAlreadyBeenShown){this.showPopup()}},handleFileComplete(t){this.sendAnalytics(t.getData())},sendAnalytics(t){var e;h.analytics.sendAttachFile(this.analytics,{cardType:this.cardType,collabId:((e=this.group)==null?void 0:e.type)===u.GroupType.Collab?this.group.id:null,fileOrigin:t.origin,fileSize:t.size,fileExtension:t.extension,filesCount:this.filesCount})},handleClick(){if(!this.isAutonomous&&this.isSelected){this.highlightField();return}if(this.files.length>0){this.isPopupShownWithFiles=true;this.showPopup()}else{this.browseFiles()}},showPopup(){this.isPopupShown=true},closePopup(){this.isPopupShown=false;if(!this.filesCount){this.isPopupShownWithFiles=false}},browseFiles(){this.fileService.browse({bindElement:this.$refs.chip.$el,onHideCallback:this.onFileBrowserClose})},highlightField(){void p.fieldHighlighter.setContainer(this.$root.$el).highlight(k.id)},onFileBrowserClose(){var t;(t=this.$refs.chip)==null?void 0:t.focus()}},template:`\n\t\t<Chip\n\t\t\tv-if="isSelected || !readonly"\n\t\t\t:design="design"\n\t\t\t:icon="icon"\n\t\t\t:text="text"\n\t\t\t:data-task-id="taskId"\n\t\t\t:data-task-chip-id="filesMeta.id"\n\t\t\tref="chip"\n\t\t\t@click="handleClick"\n\t\t/>\n\t\t<FilesPopup\n\t\t\tv-if="isPopupShown"\n\t\t\t:taskId="taskId"\n\t\t\t:getBindElement="() => $refs.chip.$el"\n\t\t\t@upload="browseFiles"\n\t\t\t@close="closePopup"\n\t\t/>\n\t`};t.Files=g;t.FilesSheet=A;t.FilesChip=C;t.filesMeta=k})(this.BX.Tasks.V2.Component.Fields=this.BX.Tasks.V2.Component.Fields||{},BX,BX.Vue3.Vuex,BX.UI.IconSet,BX.Tasks.V2.Component.Elements,BX.UI.Uploader,BX.UI.IconSet,BX,BX,BX.Tasks.V2.Component.Elements,BX.Tasks.V2.Const,BX.Tasks.V2.Lib,BX.Tasks.V2.Lib,BX.UI.Vue3.Components,BX.Vue3.Components,BX.Disk.Uploader,BX.Tasks.V2.Provider.Service);
//# sourceMappingURL=files.bundle.map.js