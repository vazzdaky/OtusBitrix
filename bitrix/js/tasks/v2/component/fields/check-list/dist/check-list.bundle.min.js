this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};this.BX.Tasks.V2.Component=this.BX.Tasks.V2.Component||{};(function(t,e,i,s,n,o,l,a,r,d,c,h,m,u,p,I,f,g,k,C,v,S,L,T,w,b,M){"use strict";var A=babelHelpers.classPrivateFieldLooseKey("interval");var _=babelHelpers.classPrivateFieldLooseKey("timerValue");var E=babelHelpers.classPrivateFieldLooseKey("counter");var P=babelHelpers.classPrivateFieldLooseKey("content");var $=babelHelpers.classPrivateFieldLooseKey("balloonWithTimer");var B=babelHelpers.classPrivateFieldLooseKey("startTimer");var y=babelHelpers.classPrivateFieldLooseKey("handleCancelClick");var O=babelHelpers.classPrivateFieldLooseKey("handleClosingBalloon");var H=babelHelpers.classPrivateFieldLooseKey("getBalloonContent");class F extends v.EventEmitter{constructor(t){super();Object.defineProperty(this,H,{value:D});Object.defineProperty(this,O,{value:N});Object.defineProperty(this,y,{value:R});Object.defineProperty(this,B,{value:x});Object.defineProperty(this,A,{writable:true,value:null});Object.defineProperty(this,_,{writable:true,value:5});Object.defineProperty(this,E,{writable:true,value:5});Object.defineProperty(this,P,{writable:true,value:""});Object.defineProperty(this,$,{writable:true,value:void 0});this.setEventNamespace("Tasks.V2.CheckList.CheckListNotifier");babelHelpers.classPrivateFieldLooseBase(this,P)[P]=t.content;babelHelpers.classPrivateFieldLooseBase(this,_)[_]=C.Type.isUndefined(t.timerValue)?babelHelpers.classPrivateFieldLooseBase(this,_)[_]:t.timerValue}showBalloonWithTimer(){babelHelpers.classPrivateFieldLooseBase(this,E)[E]=babelHelpers.classPrivateFieldLooseBase(this,_)[_];babelHelpers.classPrivateFieldLooseBase(this,$)[$]=a.UI.Notification.Center.notify({id:`check-list-balloon-${C.Text.getRandom()}`,content:babelHelpers.classPrivateFieldLooseBase(this,H)[H](),actions:[{title:C.Loc.getMessage("TASKS_V2_CHECK_LIST_BALLOON_CANCEL"),events:{mouseup:babelHelpers.classPrivateFieldLooseBase(this,y)[y].bind(this)}}],events:{onClose:babelHelpers.classPrivateFieldLooseBase(this,O)[O].bind(this)}});babelHelpers.classPrivateFieldLooseBase(this,B)[B]()}}function x(){babelHelpers.classPrivateFieldLooseBase(this,A)[A]=setInterval((()=>{babelHelpers.classPrivateFieldLooseBase(this,E)[E]--;babelHelpers.classPrivateFieldLooseBase(this,$)[$].update({content:babelHelpers.classPrivateFieldLooseBase(this,H)[H]()});if(babelHelpers.classPrivateFieldLooseBase(this,E)[E]<=0){babelHelpers.classPrivateFieldLooseBase(this,$)[$].close();this.emit("complete",true)}}),1e3)}function R(){babelHelpers.classPrivateFieldLooseBase(this,$)[$].close()}function N(){clearInterval(babelHelpers.classPrivateFieldLooseBase(this,A)[A]);this.emit("complete",false)}function D(){return babelHelpers.classPrivateFieldLooseBase(this,P)[P].replace("#countdown#",babelHelpers.classPrivateFieldLooseBase(this,E)[E])}const K=Object.freeze({Important:"important",Attachments:"attachments",Movement:"movement",Accomplice:"accomplice",Auditor:"auditor",Forward:"forward",Delete:"delete",Cancel:"cancel"});const U=Object.freeze({SetImportant:"setImportant",AttachFile:"attachFile",MoveRight:"moveRight",MoveLeft:"moveLeft",AssignAccomplice:"assignAccomplice",AssignAuditor:"assignAuditor",Forward:"forward",Delete:"delete",Cancel:"cancel"});const V=Object.freeze({defaultSections:[{name:K.Important,items:[{icon:b.Outline.FIRE,activeIcon:b.Outline.FIRE_SOLID,action:U.SetImportant,hint:"TASKS_V2_CHECK_LIST_ITEM_IMPORTANT_HINT",className:"--important",hoverable:false}]},{name:K.Attachments,items:[{icon:b.Outline.ATTACH,action:U.AttachFile,hint:"TASKS_V2_CHECK_LIST_ITEM_ATTACH_HINT"}]},{name:K.Movement,items:[{icon:b.Outline.POINT_RIGHT,action:U.MoveRight,hint:"TASKS_V2_CHECK_LIST_ITEM_MOVE_RIGHT_HINT"},{icon:b.Outline.POINT_LEFT,action:U.MoveLeft,hint:"TASKS_V2_CHECK_LIST_ITEM_MOVE_LEFT_HINT"}]},{name:K.Accomplice,items:[{icon:b.Outline.PERSON,action:U.AssignAccomplice,hint:"TASKS_V2_CHECK_LIST_ITEM_ACCOMPLICE_HINT"}]},{name:K.Auditor,items:[{icon:b.Outline.OBSERVER,action:U.AssignAuditor,hint:"TASKS_V2_CHECK_LIST_ITEM_AUDITOR_HINT"}]},{name:K.Forward,items:[{icon:b.Outline.FORWARD,action:U.Forward,hint:"TASKS_V2_CHECK_LIST_ITEM_FORWARD_HINT"}]},{name:K.Delete,items:[{icon:b.Outline.TRASHCAN,action:U.Delete,hint:"TASKS_V2_CHECK_LIST_ITEM_REMOVE_HINT"}]},{name:K.Cancel,items:[{icon:b.Outline.CROSS_L,action:U.Cancel,hint:"TASKS_V2_CHECK_LIST_ITEM_CANCEL_HINT"}]}]});const G={components:{BMenu:m.BMenu},data(){return{listShownItemPanels:[],itemPanelIsShown:false,checkListWasUpdated:false,itemId:null,itemPanelStyles:{top:"0",display:"flex"},isItemPanelFreeze:false,itemPanelTopOffset:0,itemPanelTopLimit:0,itemsRefs:{},isForwardMenuShown:false,forwardMenuSectionCode:"createSection",forwardBindElement:null,itemsToDelete:[],collapsedItems:new Map,shownPopups:new Set}},provide(){return{setItemsRef:this.setItemsRef,getItemsRef:this.getItemsRef}},computed:{isEdit(){return C.Type.isNumber(this.taskId)&&this.taskId>0},task(){return this.$store.getters[`${M.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${M.Model.CheckList}/getByIds`](this.task.checklist)},parentCheckLists(){return this.checkLists.filter((t=>t.parentId===0))},hasFewParentCheckLists(){return this.parentCheckLists.length>1},item(){return this.$store.getters[`${M.Model.CheckList}/getById`](this.itemId)},itemGroupModeSelected(){var t;if(!this.item){return false}return((t=this.item.groupMode)==null?void 0:t.selected)===true},siblings(){if(!this.item){return[]}return this.checkLists.filter((t=>t.parentId===this.item.parentId))},children(){if(!this.item){return[]}return this.checkLists.filter((t=>t.parentId===this.item.id))},visiblePanelActions(){if(!this.item){return[]}let t=[U.SetImportant,U.MoveRight,U.MoveLeft,U.AssignAccomplice,U.AssignAuditor,U.Forward,U.Delete];if(this.itemGroupModeSelected){t.push(U.Cancel)}else{t.push(U.AttachFile)}if(this.item.parentId===0){t=[U.AssignAccomplice,U.AssignAuditor]}const e=s.Core.getParams().limits;const i=new Set([U.AssignAccomplice,U.AssignAuditor]);return t.filter((t=>{const s=i.has(t)&&!e.stakeholders;return!s}))},disabledPanelActions(){if(!this.item){return[]}const t=[];const e=this.getItemLevel(this.item);const i=this.item.actions.modify===true;const s=this.item.actions.remove===true;const n={[U.SetImportant]:()=>i===false,[U.AttachFile]:()=>i===false,[U.MoveLeft]:()=>e===1||i===false,[U.MoveRight]:()=>e===5||this.item.sortIndex===0||i===false,[U.AssignAccomplice]:()=>i===false,[U.AssignAuditor]:()=>i===false,[U.Forward]:()=>i===false||this.item.title==="",[U.Delete]:()=>s===false||this.item.title===""};Object.entries(n).forEach((([e,i])=>{if(i()){t.push(e)}}));return t},activePanelActions(){if(!this.item){return[]}const t=[];if(this.item.isImportant){t.push(U.SetImportant)}return t},forwardMenuOptions(){return{id:`check-list-item-forward-menu-${this.item.id}`,bindElement:this.forwardBindElement,maxWidth:400,maxHeight:300,offsetLeft:-110,sections:[{code:this.forwardMenuSectionCode}],items:this.forwardMenuItems,targetContainer:document.body}},forwardMenuItems(){const t=this.parentCheckLists.filter((t=>t.id!==this.item.parentId)).map((t=>({title:t.title,dataset:{id:`ForwardMenuCheckList-${t.id}`},onClick:()=>{this.hideItemPanel();void this.forwardToChecklist(t.id)}})));return[...t,{sectionCode:this.forwardMenuSectionCode,title:this.loc("TASKS_V2_CHECK_LIST_ITEM_FORWARD_MENU_CREATE"),dataset:{id:`ForwardMenuCreateNew-${this.item.id}`},onClick:this.forwardToNewChecklist.bind(this)}]},stub(){return this.checkLists.length===0||this.emptyList===true},emptyList(){const t=this.parentCheckLists.filter((t=>!this.itemsToDelete.includes(t.id)));return t.length===0}},mounted(){C.Event.bind(this.$refs.list,"scroll",this.handleScroll)},beforeUnmount(){C.Event.unbind(this.$refs.list,"scroll",this.handleScroll)},methods:{handleScroll(){this.isForwardMenuShown=false;this.updatePanelPosition()},async saveCheckList(){if(this.checkListWasUpdated&&this.isEdit){await o.checkListService.save(this.taskId,this.checkLists)}if(!this.isDemoCheckListModified()){this.removeChecklists()}this.checkListWasUpdated=false},isDemoCheckListModified(){if(this.checkLists.length!==1){return true}const[t]=this.checkLists;const e=this.loc("TASKS_V2_CHECK_LIST_TITLE_NUMBER",{"#number#":1});return t.title!==e||t.accomplices.length>0||t.auditors.length>0},removeChecklists(){this.checkLists.filter((t=>t.parentId===0)).forEach((t=>{this.removeItem(t.id)}))},async addCheckList(t=false){const e=C.Text.getRandom();const i=C.Text.getRandom();const s=[this.getDataForNewCheckList(e)];if(!t){s.push({id:i,nodeId:i,parentId:e,sortIndex:0})}await this.$store.dispatch(`${M.Model.CheckList}/insertMany`,s);this.$store.dispatch(`${M.Model.Tasks}/update`,{id:this.taskId,fields:{checklist:[...this.task.checklist,e,i]}});return e},addFastCheckList(){const t=C.Text.getRandom();this.$store.dispatch(`${M.Model.CheckList}/insert`,this.getDataForNewCheckList(t));this.$store.dispatch(`${M.Model.Tasks}/update`,{id:this.taskId,fields:{checklist:[...this.task.checklist,t]}});void this.saveCheckList()},showForwardMenu(t){this.forwardBindElement=t;this.isForwardMenuShown=true},getCheckListsNumber(){return this.checkLists.filter((t=>t.parentId===0&&!this.itemsToDelete.includes(t.id))).length},getDataForNewCheckList(t){return{id:t,nodeId:t,title:this.loc("TASKS_V2_CHECK_LIST_TITLE_NUMBER",{"#number#":this.getCountForNewCheckList()}),sortIndex:this.getSortForNewCheckList()}},getSortForNewCheckList(){return this.getCheckListsNumber()},getCountForNewCheckList(){return this.getCheckListsNumber()+1},setItemsRef(t,e){this.itemsRefs[t]=e},getItemsRef(t){return this.itemsRefs[t]},focusToItem(t){void this.$nextTick((()=>{var e,i;(e=this.getItemsRef(t))==null?void 0:(i=e.$refs.growingTextArea)==null?void 0:i.focusTextarea()}))},showItem(t){void this.$nextTick((()=>{var e;(e=this.getItemsRef(t))==null?void 0:e.show()}))},hideItem(t){void this.$nextTick((()=>{var e;(e=this.getItemsRef(t))==null?void 0:e.hide()}))},addItem({id:t,sort:e}){if(this.hasActiveGroupMode()){return}this.itemId=t;const i=C.Text.getRandom();const s=e!=null?e:this.getSort();const n=this.item.parentId===0?this.item.id:this.item.parentId;this.resortSiblingsItems(s);this.$store.dispatch(`${M.Model.CheckList}/insert`,{id:i,nodeId:i,parentId:n,sortIndex:s});this.$store.dispatch(`${M.Model.Tasks}/update`,{id:this.taskId,fields:{checklist:[...this.task.checklist,i]}});this.syncParentCompletionState(i)},removeItem(t,e=true){var i,s;if(!this.task){return}this.itemId=t;if((i=this.item)!=null&&i.title){this.checkListWasUpdated=true}const n=((s=this.item)==null?void 0:s.parentId)||null;if(this.children.length>0){this.children.forEach((t=>{this.removeItem(t.id,false)}))}this.$store.dispatch(`${M.Model.Tasks}/update`,{id:this.taskId,fields:{checklist:this.task.checklist.filter((e=>e!==t))}});this.$store.dispatch(`${M.Model.CheckList}/delete`,t);if(e){this.resortSiblingsItems()}this.syncParentCompletionState(t,n);g.fileService.delete(t,g.EntityTypes.CheckListItem)},resortSiblingsItems(t){const e=[];if(C.Type.isUndefined(t)){const t=this.siblings.sort(((t,e)=>t.sortIndex-e.sortIndex));t.forEach(((t,i)=>{if(t.sortIndex!==i){e.push({...t,sortIndex:i})}}))}else{this.siblings.filter((e=>e.sortIndex>=t)).forEach((t=>{e.push({...t,sortIndex:t.sortIndex+1})}))}if(e.length>0){this.$store.dispatch(`${M.Model.CheckList}/upsertMany`,e)}},getSort(){if(this.item&&this.item.parentId===0){return this.children.length}return this.siblings.length},toggleCompleted({itemId:t,collapsed:e}){this.itemId=t;const i=this.getAllChildren();const s=i.filter((t=>t.isComplete===true));s.forEach((t=>{if(e===false){this.showItem(t.id)}else{this.hideItem(t.id)}}))},handleUpdate(){this.checkListWasUpdated=true},handleRemove(t){this.itemId=t;this.freeze();this.itemsToDelete=[...this.itemsToDelete,t];this.hideItem(t);const e=this.item.parentId===0?"TASKS_V2_CHECK_LIST_ITEM_REMOVE_BALLOON_PARENT":"TASKS_V2_CHECK_LIST_ITEM_REMOVE_BALLOON_CHILD";const i=new F({content:this.loc(e)});i.subscribeOnce("complete",(e=>{const i=e.getData();if(i){this.removeItem(t)}else{this.showItem(t)}this.itemsToDelete=this.itemsToDelete.filter((e=>e!==t));this.unfreeze()}));i.showBalloonWithTimer()},async handleGroupRemove(t){this.itemId=t;this.freeze();this.itemsToDelete=[...this.itemsToDelete,t];this.hideItemPanel(t);const e=this.getAllSelectedItems();const i=this.findNearestItem(false);if(i){await this.$store.dispatch(`${M.Model.CheckList}/update`,{id:i.id,fields:{groupMode:{active:true,selected:true}}});setTimeout((()=>{this.showItemPanel(i.id)}),0)}e.forEach((t=>{this.hideItem(t.id)}));const s=e.length>1?"TASKS_V2_CHECK_LIST_ITEM_REMOVE_BALLOON_CHILDREN":"TASKS_V2_CHECK_LIST_ITEM_REMOVE_BALLOON_CHILD";const n=new F({content:this.loc(s)});n.subscribeOnce("complete",(t=>{const s=t.getData();e.forEach((t=>{if(s){this.removeItem(t.id)}else{this.showItem(t.id)}this.itemsToDelete=this.itemsToDelete.filter((e=>e!==t.id))}));if(s){if(i&&!this.itemsToDelete.includes(i.id)){this.showItemPanel(i.id)}else{this.cancelGroupMode()}}else{this.showItemPanel(this.item.id)}this.unfreeze()}));n.showBalloonWithTimer()},handleToggleIsComplete(t){this.syncParentCompletionState(t)},handleFocus(t){this.showItemPanel(t)},handleBlur(t){this.itemId=t;if(this.isItemPanelFreeze===false){this.hideItemPanel(t)}},handleEmptyBlur(t){this.itemId=t;if(this.item.parentId===0){this.setDefaultCheckListTitle(t);return}if(this.isItemPanelFreeze===false){this.removeItem(t)}},handleGroupMode(t){this.itemId=t;const e=this.getFirstChild();if(!e){return}this.activateGroupMode(t);this.showItemPanel(e.id)},handleGroupModeSelect(t){this.itemId=t;if(this.itemGroupModeSelected){this.showItemPanel(t)}else{this.showItemPanelOnNearestSelectedItem(t)}},showItemPanel(t){this.itemId=t;this.itemPanelIsShown=true;if(!this.listShownItemPanels.includes(t)){this.listShownItemPanels=[...this.listShownItemPanels,t]}void this.$nextTick((()=>this.updatePanelPosition()))},hideItemPanel(t){this.itemPanelIsShown=false;if(this.hasActiveGroupMode()&&this.getAllSelectedItems().length===0){this.deactivateGroupMode()}this.listShownItemPanels=this.listShownItemPanels.filter((e=>e!==t));this.isItemPanelFreeze=false},showItemPanelOnNearestSelectedItem(t){const e=this.findNearestItem(true);if(e){this.showItemPanel(e.id)}else{this.hideItemPanel(t)}},updatePanelPosition(){if(this.itemPanelIsShown===false){return}const t=this.$refs.list.querySelector([`[data-id="${this.item.id}"]`]);const e=C.Dom.getPosition(this.$refs.panel.$el);const i=C.Dom.getRelativePosition(t,this.$refs.list);const s=this.item.parentId===0;const n=24;const o=e.width===0?304:e.width;const l=i.top-10;if(s){const t=i.width-o-n*2-80;const e=l>-30&&l<this.itemPanelTopLimit?"flex":"none";this.itemPanelStyles={top:`${l}px`,left:`${t}px`,display:e}}else{const t=i.width-o-n;const e=l>40&&l<this.itemPanelTopLimit?"flex":"none";this.itemPanelStyles={top:`${l}px`,left:`${t}px`,display:e}}},handlePanelAction({action:t,node:e}){var i;const s={[U.SetImportant]:t=>this.setImportant(t),[U.AttachFile]:t=>this.attachFile(t),[U.MoveRight]:t=>this.handleMoveRight(t),[U.MoveLeft]:t=>this.handleMoveLeft(t),[U.AssignAccomplice]:t=>{if(!this.isItemPanelFreeze){this.showParticipantDialog(t,"accomplices")}},[U.AssignAuditor]:t=>{if(!this.isItemPanelFreeze){this.showParticipantDialog(t,"auditors")}},[U.Forward]:t=>this.forward(t),[U.Delete]:t=>this.delete(t),[U.Cancel]:t=>this.cancelGroupMode(t)};(i=s[t])==null?void 0:i.call(s,e)},setImportant(){if(this.itemGroupModeSelected){const t=this.getAllSelectedItems().map((t=>({...t,isImportant:!t.isImportant})));this.$store.dispatch(`${M.Model.CheckList}/upsertMany`,t)}else{this.$store.dispatch(`${M.Model.CheckList}/update`,{id:this.item.id,fields:{isImportant:!this.item.isImportant}})}this.checkListWasUpdated=true},attachFile(t){this.isItemPanelFreeze=true;g.fileService.get(this.item.id,g.EntityTypes.CheckListItem).browse({bindElement:t});g.fileService.get(this.item.id,g.EntityTypes.CheckListItem).subscribeOnce("onFileComplete",(()=>{this.isItemPanelFreeze=false;this.focusToItem(this.item.id)}))},handleMoveRight(){if(this.itemGroupModeSelected){this.getAllSelectedItems().sort(((t,e)=>t.sortIndex-e.sortIndex)).forEach((t=>{this.moveRight(t)}))}else{this.moveRight(this.item)}},moveRight(t){var e;if(t.parentId===0||this.getItemLevel(t)>5){return}const i=this.checkLists.filter((e=>e.parentId===t.parentId)).sort(((t,e)=>(t.sortIndex||0)-(e.sortIndex||0)));const s=i.findIndex((e=>e.id===t.id));if(s<=0){return}let n=null;for(let e=s-1;e>=0;e--){const s=i[e];if(!this.isItemDescendant(s,t)){n=s;break}}if(!n){return}const o=this.checkLists.filter((t=>t.parentId===n.id)).sort(((t,e)=>t.sortIndex-e.sortIndex));const l=i.filter(((t,e)=>e>s)).map((t=>({...t,sortIndex:t.sortIndex-1})));l.push({...t,parentId:n.id,parentNodeId:n.nodeId,sortIndex:o.length>0?o[o.length-1].sortIndex+1:0});this.$store.dispatch(`${M.Model.CheckList}/upsertMany`,l);this.checkListWasUpdated=true;if(!((e=t.groupMode)!=null&&e.active)){this.focusToItem(t.id)}},handleMoveLeft(){if(this.itemGroupModeSelected){this.getAllSelectedItems().sort(((t,e)=>e.sortIndex-t.sortIndex)).forEach((t=>{this.moveLeft(t)}))}else{this.moveLeft(this.item)}},moveLeft(t){var e;if(t.parentId===0||this.getItemLevel(t)<=1){return}const i=this.checkLists.find((e=>e.id===t.parentId));if(!i){return}const s=i.parentId||0;const n=this.checkLists.filter((t=>t.parentId===s)).sort(((t,e)=>t.sortIndex-e.sortIndex));const o=n.findIndex((t=>t.id===i.id));const l=this.checkLists.filter((e=>e.parentId===t.parentId&&e.sortIndex>t.sortIndex)).map((t=>({...t,sortIndex:t.sortIndex-1})));let a=0;if(o===-1||o===n.length-1){a=n.length>0?n[n.length-1].sortIndex+1:0}else{a=n[o].sortIndex+1;const t=n.filter((t=>t.sortIndex>=a)).map((t=>({...t,sortIndex:t.sortIndex+1})));l.push(...t)}const r={...t,parentId:s,parentNodeId:i.parentNodeId||null,sortIndex:a};const d=[...l,r];this.$store.dispatch(`${M.Model.CheckList}/upsertMany`,d);this.checkListWasUpdated=true;if(!((e=t.groupMode)!=null&&e.active)){this.focusToItem(t.id)}},isItemDescendant(t,e){if(e.parentId===t.id){return true}if(e.parentId===0){return false}const i=this.checkLists.find((t=>t.id===e.parentId));if(!i){return false}return this.isItemDescendant(t,i)},assignAccomplice(t){this.showParticipantDialog(t,"accomplices")},assignAuditor(t){this.showParticipantDialog(t,"auditors")},async forward(t){if(this.hasFewParentCheckLists){this.showForwardMenu(t)}else{this.hideItemPanel();void this.forwardToNewChecklist()}this.checkListWasUpdated=true},async forwardToNewChecklist(){const t=await this.addCheckList(true);void this.forwardToChecklist(t)},async forwardToChecklist(t){if(this.itemGroupModeSelected){const e=this.getAllSelectedItems();const i=this.findNearestItem(false,e);if(i){this.showItemPanel(i.id)}else{this.cancelGroupMode()}const s=this.getAllSelectedItemsWithChildren();const n=new Set(e.map((t=>t.id)));const o=[];e.forEach((e=>{const i=!n.has(e.parentId);o.push({...e,parentId:i?t:e.parentId,groupMode:{active:false,selected:false}})}));s.forEach((t=>{if(!n.has(t.id)){o.push({...t,groupMode:{active:false,selected:false}})}}));await this.$store.dispatch(`${M.Model.CheckList}/upsertMany`,o);if(i){void this.$store.dispatch(`${M.Model.CheckList}/update`,{id:i.id,fields:{groupMode:{active:true,selected:true}}})}}else{this.$store.dispatch(`${M.Model.CheckList}/update`,{id:this.item.id,fields:{parentId:t}})}},delete(){if(this.itemGroupModeSelected){void this.handleGroupRemove(this.item.id)}else{this.hideItemPanel();this.handleRemove(this.item.id)}},cancelGroupMode(){this.deactivateGroupMode();this.hideItemPanel()},showParticipantDialog(t,i){var s,o,a;this.isItemPanelFreeze=true;const r=this.item.id;const d=this.preselectedParticipants(i);(s=this.selectors)!=null?s:this.selectors={};const c=`${i}-${r}`;(a=(o=this.selectors)[c])!=null?a:o[c]=new n.UserSelectorDialog({taskId:this.taskId,preselected:d,dialogOptions:{...l.participantMeta.dialogOptions(this.taskId,`check-list-${c}`),popupOptions:{events:{onShow:t=>{const i=t.getTarget();const s=i.getPopupContainer().offsetWidth;const n=10;const o=n-s/2;const l=e.Popup.getOption("angleLeftOffset")-e.Popup.getOption("angleMinTop");i.setAngle({offset:s/2-l});i.setOffset({offsetLeft:o+e.Popup.getOption("angleLeftOffset")})},onClose:()=>{const t=this.selectors[c].getDialog().getSelectedItems().map((t=>({id:t.getId(),name:t.getTitle(),image:t.getAvatar(),type:t.getEntityType()})));this.saveParticipants(r,i,t)}}}},events:{onHide:()=>{this.isItemPanelFreeze=false;if(!this.itemGroupModeSelected){this.focusToItem(r)}this.updatePanelPosition()}}});this.selectors[c].show(t)},preselectedParticipants(t){switch(t){case"accomplices":return this.item.accomplices.map((t=>["user",t.id]));case"auditors":return this.item.auditors.map((t=>["user",t.id]));default:return[]}},saveParticipants(t,e,i){if(this.itemGroupModeSelected){const t=this.getAllSelectedItems().map((t=>({...t,[e]:i})));this.$store.dispatch(`${M.Model.CheckList}/upsertMany`,t)}else{this.$store.dispatch(`${M.Model.CheckList}/update`,{id:t,fields:{[e]:i}})}const s=i.map((t=>t.id));const n={[`${e}Ids`]:s};this.$store.dispatch(`${M.Model.Tasks}/update`,{id:this.taskId,fields:n})},syncParentCompletionState(t,e){const i=this.checkLists.find((e=>e.id===t));if((!i||!i.parentId)&&!e){return}const s=e||i.parentId;const n=this.checkLists.find((t=>t.id===s));if(!n){return}const o=this.checkLists.filter((t=>t.parentId===n.id));const l=o.length===0;const a=o.every((t=>t.isComplete));const r=o.some((t=>!t.isComplete));const d=l||a&&!n.isComplete||r&&n.isComplete;if(!d){return}this.$store.dispatch(`${M.Model.CheckList}/update`,{id:n.id,fields:{isComplete:a&&!l}});if(n.parentId){this.syncParentCompletionState(n.id)}},activateGroupMode(t){this.itemId=t;const e=this.getAllChildren().map(((t,e)=>({...t,groupMode:{active:true,selected:e===0}})));e.push({...this.item,groupMode:{active:true,selected:false}});this.$store.dispatch(`${M.Model.CheckList}/upsertMany`,e)},deactivateGroupMode(){const t=this.getAllGroupModeItems().map((t=>({...t,groupMode:{active:false,selected:false}})));this.$store.dispatch(`${M.Model.CheckList}/upsertMany`,t)},getRootParent(t){if(!t||t.parentId===0){return t||null}const e=this.checkLists.find((e=>e.id===t.parentId));if(!e){return null}return this.getRootParent(e)},getAllChildren(){if(!this.item){return[]}const t=e=>{const i=this.checkLists.filter((t=>t.parentId===e)).sort(((t,e)=>t.sortIndex-e.sortIndex));let s=[...i];i.forEach((e=>{s=[...s,...t(e.id)]}));return s};return t(this.item.id)},getFirstChild(){if(!this.item){return null}const t=this.checkLists.filter((t=>t.parentId===this.item.id)).sort(((t,e)=>t.sortIndex-e.sortIndex));return t[0]||null},findNearestItem(t,e=[]){if(!this.item){return null}const i=this.getRootParent(this.item);if(!i){return null}const s=this.item.sortIndex;const n=new Set(e.map((t=>t.id)));const o=this.checkLists.sort(((t,e)=>t.sortIndex-e.sortIndex)).filter((e=>{var s,o;const l=n.has(e.parentId);return e.id!==this.item.id&&e.parentId!==0&&((s=e.groupMode)==null?void 0:s.selected)===t&&((o=this.getRootParent(e))==null?void 0:o.id)===i.id&&!l}));if(o.length===0){return null}return o.reduce(((t,e)=>e.sortIndex>s&&(e.sortIndex<t.sortIndex||t.sortIndex<=s)?e:t))},getAllGroupModeItems(){return this.checkLists.filter((t=>{var e;return((e=t.groupMode)==null?void 0:e.active)===true}))},getAllSelectedItems(){return this.checkLists.filter((t=>{var e;return t.parentId!==0&&((e=t.groupMode)==null?void 0:e.selected)===true}))},getAllSelectedItemsWithChildren(){const t=this.checkLists.filter((t=>{var e;return t.parentId!==0&&((e=t.groupMode)==null?void 0:e.selected)===true}));const e=t=>{const i=this.checkLists.filter((e=>t.includes(e.parentId)));return i.length>0?[...i,...e(i.map((t=>t.id)))]:i};return[...t,...e(t.map((t=>t.id)))]},hasActiveGroupMode(){return this.getAllGroupModeItems().length>0},handleShowPopup(t){const[e]=t.getCompatData();this.shownPopups.add(e.getId());this.freeze()},handleClosePopup(t){const[e]=t.getCompatData();this.shownPopups.delete(e.getId());this.unfreeze()},freeze(){var t;(t=this.$refs.popupComponent)==null?void 0:t.freeze()},unfreeze(){if(this.shownPopups.size===0&&this.itemsToDelete.length===0){var t;(t=this.$refs.popupComponent)==null?void 0:t.unfreeze()}},setDefaultCheckListTitle(t){this.$store.dispatch(`${M.Model.CheckList}/update`,{id:t,fields:{title:this.loc("TASKS_V2_CHECK_LIST_TITLE_NUMBER",{"#number#":this.getCheckListsNumber()})}})}}};const z=Object.freeze({id:"checklist",title:C.Loc.getMessage("TASKS_V2_CHECK_LIST_TITLE")});const X={name:"TaskCheckList",components:{BIcon:w.BIcon},mixins:[G],props:{taskId:{type:[Number,String],required:true}},emits:["open"],setup(){return{Animated:b.Animated,Outline:b.Outline,checkListMeta:z}},data(){return{}},computed:{task(){return this.$store.getters[`${M.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${M.Model.CheckList}/getByIds`](this.task.checklist)},isLoading(){return this.checkLists.length===0},containsChecklist(){return this.task.containsChecklist},parentCheckLists(){return this.checkLists.filter((t=>t.parentId===0))}},async created(){if(this.containsChecklist){void this.loadData()}},methods:{async loadData(){await o.checkListService.load(this.taskId)},getCompletedCount(t){return this.checkLists.filter((e=>e.parentId===t&&e.isComplete)).length},getTotalCount(t){return this.checkLists.filter((e=>e.parentId===t)).length},showCheckList(t){this.$emit("open",t)},renderCheckListStatus(t){return this.loc("TASKS_V2_CHECK_LIST_STATUS_LABEL",{"#completed#":this.getCompletedCount(t),"#total#":this.getTotalCount(t)})}},template:`\n\t\t<div\n\t\t\t:data-task-field-id="checkListMeta.id"\n\t\t\tclass="tasks-field-check-list"\n\t\t\t:class="{ '--default': isLoading }"\n\t\t>\n\t\t\t<div\n\t\t\t\tclass="tasks-field-check-list-content"\n\t\t\t\t:class="{ '--default': isLoading }"\n\t\t\t>\n\t\t\t\t<template v-if="isLoading">\n\t\t\t\t\t<div class="tasks-field-check-list-content-row">\n\t\t\t\t\t\t<BIcon :name="Animated.LOADER_WAIT"/>\n\t\t\t\t\t\t<div class="tasks-field-check-list-content-text">\n\t\t\t\t\t\t\t{{ loc('TASKS_V2_CHECK_LIST_LOADING') }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t\t<template v-else>\n\t\t\t\t\t<div class="tasks-field-check-list-content-list">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tv-for="checklist in parentCheckLists"\n\t\t\t\t\t\t\t:key="checklist.id"\n\t\t\t\t\t\t\tclass="tasks-field-check-list-content-list-item"\n\t\t\t\t\t\t\t@click="() => this.showCheckList(checklist.id)"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div class="tasks-field-check-list-content-list-item-icon">\n\t\t\t\t\t\t\t\t<BIcon :name="Outline.CHECK_LIST"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="tasks-field-check-list-content-list-item-title">\n\t\t\t\t\t\t\t\t{{ checklist.title }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclass="tasks-field-check-list-content-list-item-status"\n\t\t\t\t\t\t\t\tv-html="renderCheckListStatus(checklist.id)"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="tasks-field-check-list-content-list-item-arrow">\n\t\t\t\t\t\t\t\t<BIcon :name="Outline.CHEVRON_RIGHT_L"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="tasks-field-check-list-content-row --footer">\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclass="tasks-field-check-list-content-btn"\n\t\t\t\t\t\t\t@click="addFastCheckList"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<BIcon :name="Outline.PLUS_L"/>\n\t\t\t\t\t\t\t<div class="tasks-field-check-list-content-btn-text">\n\t\t\t\t\t\t\t\t{{ loc('TASKS_V2_CHECK_LIST_ADD_LABEL') }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t</div>\n\t\t</div>\n\t`};const W={components:{Chip:c.Chip},props:{taskId:{type:[Number,String],required:true},isAutonomous:{type:Boolean,default:false}},emits:["showCheckList"],setup(){return{Outline:b.Outline,checkListMeta:z}},computed:{task(){return this.$store.getters[`${M.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${M.Model.CheckList}/getByIds`](this.task.checklist)},isUploading(){var t;return(t=this.task.checklist)==null?void 0:t.some((t=>g.fileService.get(t,g.EntityTypes.CheckListItem).isUploading()))},design(){return{[!this.isAutonomous&&!this.isSelected]:c.ChipDesign.Shadow,[!this.isAutonomous&&this.isSelected]:c.ChipDesign.ShadowAccent,[this.isAutonomous&&!this.isSelected]:c.ChipDesign.Outline,[this.isAutonomous&&this.isSelected]:c.ChipDesign.OutlineAccent}.true},isSelected(){return this.checkLists.length>0},checkListItemCount(){return this.checkLists.filter((t=>t.parentId!==0)).length},text(){if(this.isAutonomous&&this.checkListItemCount>0){const t=this.getCompletedCount();return this.loc("TASKS_V2_CHECK_LIST_COUNT_TITLE",{"#count#":t,"#total#":this.checkListItemCount})}return this.loc("TASKS_V2_CHECK_LIST_CHIP_TITLE")},icon(){if(this.isUploading){return b.Animated.LOADER_WAIT}return b.Outline.CHECK_LIST}},mounted(){this.$bitrix.eventEmitter.subscribe(M.EventName.CloseCheckList,this.handleFieldClose)},beforeUnmount(){this.$bitrix.eventEmitter.unsubscribe(M.EventName.CloseCheckList,this.handleFieldClose)},methods:{handleClick(){if(this.isAutonomous){void this.showCheckList()}else{if(this.isSelected){this.highlightField()}else{void this.showCheckList()}}},async showCheckList(){if(!this.isSelected){await this.buildEmptyCheckList()}this.$emit("showCheckList")},async buildEmptyCheckList(){const t=C.Text.getRandom();const e=C.Text.getRandom();await this.$store.dispatch(`${M.Model.CheckList}/insertMany`,[{id:t,nodeId:t,title:this.loc("TASKS_V2_CHECK_LIST_TITLE_NUMBER",{"#number#":1})},{id:e,nodeId:e,parentId:t}]);await this.$store.dispatch(`${M.Model.Tasks}/update`,{id:this.taskId,fields:{checklist:[t,e]}})},highlightField(){void d.fieldHighlighter.setContainer(this.$root.$el).highlight(z.id)},getCompletedCount(){return this.checkLists.filter((t=>t.isComplete&&t.parentId!==0)).length},handleFieldClose(){if(this.isAutonomous){this.$refs.chip.focus()}}},template:`\n\t\t<Chip\n\t\t\t:design="design"\n\t\t\t:icon="icon"\n\t\t\t:text="text"\n\t\t\t:data-task-id="taskId"\n\t\t\t:data-task-chip-id="checkListMeta.id"\n\t\t\tref="chip"\n\t\t\t@click="handleClick"\n\t\t/>\n\t`};const j={name:"CheckListStub",template:`\n\t\t<div class="check-list-stub">\n\t\t\t<div class="check-list-stub-title">\n\t\t\t\t{{ loc('TASKS_V2_CHECK_LIST_STUB_TITLE') }}\n\t\t\t</div>\n\t\t\t<div class="check-list-stub-icon"></div>\n\t\t</div>\n\t`};const q={methods:{getItemLevel(t){let e=0;let i=t;const s=t=>this.checkLists.find((e=>e.id===t));while(i.parentId!==0){i=s(i.parentId);if(!i){break}e++}return e}}};const Y={props:{taskId:{type:[Number,String],required:true},id:{type:[Number,String],required:true},panelIsShown:{type:Boolean,default:false}},emits:["update","addItem","removeItem","focus","blur","emptyBlur","show","hide"],data(){return{isHovered:false,scrollContainer:null}},computed:{task(){return this.$store.getters[`${M.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${M.Model.CheckList}/getByIds`](this.task.checklist)},item(){return this.$store.getters[`${M.Model.CheckList}/getById`](this.id)},canModify(){return this.item.actions.modify===true},canRemove(){return this.item.actions.remove===true},canToggle(){return this.item.actions.toggle===true},hasAttachments(){return this.hasUsers},hasUsers(){return this.hasAccomplices||this.hasAuditors},hasAccomplices(){var t;return((t=this.accomplices)==null?void 0:t.length)>0},hasAuditors(){var t;return((t=this.auditors)==null?void 0:t.length)>0},accomplices(){return this.item.accomplices},auditors(){return this.item.auditors},files(){return this.item.attachments},textColor(){return this.item.isComplete?"var(--ui-color-base-4)":"var(--ui-color-base-1)"},groupMode(){var t;return((t=this.item.groupMode)==null?void 0:t.active)===true},groupModeSelected(){var t;return((t=this.item.groupMode)==null?void 0:t.selected)===true}},methods:{updateTitle(t=""){this.$store.dispatch(`${M.Model.CheckList}/update`,{id:this.id,fields:{title:t}});this.$emit("update")},clearTitle(){var t;(t=this.$refs.growingTextArea)==null?void 0:t.clearValue()},addItem(t){this.$emit("addItem",{id:this.id,sort:C.Type.isNumber(t)?t:null})},removeItem(){this.$emit("removeItem",this.id)},handleFocus(){this.$emit("focus",this.id)},handleBlur(){this.$emit("blur",this.id)},handleEmptyBlur(){this.$emit("emptyBlur",this.id)},show(){this.$emit("show",this.id)},hide(){this.$emit("hide",this.id)}}};const J={name:"CheckListParentItem",components:{BIcon:w.BIcon,BMenu:m.BMenu,GrowingTextArea:I.GrowingTextArea,UserAvatarList:f.UserAvatarList},mixins:[q,Y],inject:["setItemsRef"],emits:["toggleCompleted","toggleCollapse","startGroupMode"],setup(){return{Actions:b.Actions,Outline:b.Outline}},data(){return{isSticky:false,isMenuShown:false,menuRemoveSectionCode:"removeSection",areChildrenCollapsed:false,areCompletedCollapsed:false}},computed:{menuOptions(){return{id:`check-list-parent-item-action-menu-${this.id}`,bindElement:this.$refs.more.$el,minWidth:250,offsetLeft:-100,sections:[{code:this.menuRemoveSectionCode}],items:this.menuItems,targetContainer:document.body,closeByEsc:true}},menuItems(){return[{title:this.areCompletedCollapsed?this.loc("TASKS_V2_CHECK_LIST_ITEM_MENU_SHOW"):this.loc("TASKS_V2_CHECK_LIST_ITEM_MENU_HIDE"),icon:this.areCompletedCollapsed?b.Outline.OBSERVER:b.Outline.CROSSED_EYE,dataset:{id:`MenuProfileHide-${this.id}`},onClick:()=>{this.isMenuShown=false;this.areCompletedCollapsed=!this.areCompletedCollapsed;this.$emit("toggleCompleted",{itemId:this.id,collapsed:this.areCompletedCollapsed})}},{title:this.loc("TASKS_V2_CHECK_LIST_ITEM_MENU_GROUP"),icon:b.Outline.MULTICHOICE_ON,dataset:{id:`MenuProfileGroup-${this.id}`},onClick:()=>{if(this.areChildrenCollapsed===true){this.collapseChildrenItems()}this.$emit("startGroupMode",this.id);this.isMenuShown=false}},{sectionCode:this.menuRemoveSectionCode,design:"alert",title:this.loc("TASKS_V2_CHECK_LIST_ITEM_MENU_REMOVE"),icon:b.Outline.TRASHCAN,dataset:{id:`MenuProfileRemove-${this.id}`},onClick:this.removeItem.bind(this)}]},itemIcon(){return this.item.isComplete?b.Outline.CHECK_L:b.Outline.CHECK_LIST},checkListStatus(){const t=this.loc("TASKS_V2_CHECK_LIST_STATUS_LABEL");return t.replace("#completed#",this.getCompletedCount()).replace("#total#",this.getTotalCount())}},mounted(){var t;this.scrollContainer=(t=this.$parent.$el)==null?void 0:t.closest("[data-list]");if(this.setItemsRef){this.setItemsRef(this.id,this)}if(this.scrollContainer){C.Event.bind(this.scrollContainer,"scroll",this.handleScroll);void this.$nextTick(this.checkSticky);this.mutationObserver=new MutationObserver((()=>{this.checkSticky()}));this.mutationObserver.observe(this.scrollContainer,{childList:true,subtree:true})}},beforeUnmount(){if(this.scrollContainer){C.Event.unbind(this.scrollContainer,"scroll",this.handleScroll)}if(this.mutationObserver){this.mutationObserver.disconnect()}if(this.setItemsRef){this.setItemsRef(this.id,null)}},methods:{handleScroll(){this.checkSticky();this.isMenuShown=false},checkSticky(){if(!this.scrollContainer||!this.$refs.item){return}const t=this.$refs.item.getBoundingClientRect();const e=this.scrollContainer.getBoundingClientRect();const i=18;this.isSticky=t.top<=e.top+t.height-i},showMenu(){this.isMenuShown=true},getCompletedCount(){return this.checkLists.filter((t=>t.parentId===this.id&&t.isComplete)).length},getTotalCount(){return this.checkLists.filter((t=>t.parentId===this.id)).length},collapseChildrenItems(){this.areChildrenCollapsed=!this.areChildrenCollapsed;this.$emit("toggleCollapse",{parentId:this.id,areChildrenCollapsed:this.areChildrenCollapsed})}},template:`\n\t\t<div\n\t\t\tref="item"\n\t\t\tclass="check-list-widget-parent-item"\n\t\t\t:class="{\n\t\t\t\t'--complete': item.isComplete,\n\t\t\t\t'--collapsed': areChildrenCollapsed,\n\t\t\t}"\n\t\t\t:data-id="id"\n\t\t\t:data-parent="id"\n\t\t>\n\t\t\t<div class="check-list-widget-parent-item-label-container">\n\t\t\t\t<BIcon :name="itemIcon"/>\n\t\t\t</div>\n\t\t\t<div class="check-list-widget-parent-item-title-container">\n\t\t\t\t<GrowingTextArea\n\t\t\t\t\tclass="check-list-widget-parent-item-title"\n\t\t\t\t\t:data-check-list-id="'check-list-parent-item-title-' + id"\n\t\t\t\t\t:initialValue="item.title"\n\t\t\t\t\t:placeholderValue="loc('TASKS_V2_CHECK_LIST_ITEM_PLACEHOLDER')"\n\t\t\t\t\t:readonly="groupMode"\n\t\t\t\t\t:fontColor="textColor"\n\t\t\t\t\t:fontSize="17"\n\t\t\t\t\t:lineHeight="20"\n\t\t\t\t\t:fontWeight="500"\n\t\t\t\t\t@update="updateTitle"\n\t\t\t\t\t@focus="handleFocus"\n\t\t\t\t\t@blur="handleBlur"\n\t\t\t\t\t@emptyBlur="handleEmptyBlur"\n\t\t\t\t/>\n\t\t\t\t<template v-if="hasAttachments">\n\t\t\t\t\t<div class="check-list-widget-item-attach --parent">\n\t\t\t\t\t\t<div v-if="hasUsers" class="check-list-widget-item-attach-users">\n\t\t\t\t\t\t\t<div v-if="hasAccomplices" class="check-list-widget-item-attach-users-list">\n\t\t\t\t\t\t\t\t<BIcon :name="Outline.GROUP"/>\n\t\t\t\t\t\t\t\t<UserAvatarList :users="accomplices"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div v-if="hasAuditors" class="check-list-widget-item-attach-users-list">\n\t\t\t\t\t\t\t\t<BIcon :name="Outline.OBSERVER"/>\n\t\t\t\t\t\t\t\t<UserAvatarList :users="auditors"/>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</template>\n\t\t\t\t<div\n\t\t\t\t\tclass="check-list-widget-parent-item-title-status"\n\t\t\t\t\tv-html="checkListStatus"\n\t\t\t\t></div>\n\t\t\t</div>\n\t\t\t<div class="check-list-widget-parent-item-action">\n\t\t\t\t<div class="check-list-widget-parent-item-main-action">\n\t\t\t\t\t<BIcon ref="more" :name="Outline.MORE_L" @click="showMenu" />\n\t\t\t\t\t<BIcon\n\t\t\t\t\t\t:name="areChildrenCollapsed ? Actions.CHEVRON_DOWN : Actions.CHEVRON_UP"\n\t\t\t\t\t\t@click="collapseChildrenItems"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div v-if="isSticky" class="check-list-widget-parent-item-empty"></div>\n\t\t\t</div>\n\t\t\t<BMenu v-if="isMenuShown" :options="menuOptions" @close="isMenuShown = false"/>\n\t\t</div>\n\t`};const Q={name:"CheckListChildItem",components:{BIcon:w.BIcon,GrowingTextArea:I.GrowingTextArea,UserAvatarList:f.UserAvatarList,UserFieldWidgetComponent:p.UserFieldWidgetComponent},mixins:[q,Y],inject:["setItemsRef"],props:{itemOffset:{type:String,default:"0"}},emits:["toggleIsComplete","toggleGroupModeSelected"],setup(t){return{Outline:b.Outline,fileService:g.fileService.get(t.id,g.EntityTypes.CheckListItem),uploaderAdapter:g.fileService.get(t.id,g.EntityTypes.CheckListItem).getAdapter()}},data(){return{uploadingFiles:this.fileService.getFiles()}},computed:{widgetOptions(){return{isEmbedded:true,withControlPanel:false,canCreateDocuments:false,tileWidgetOptions:{compact:true,hideDropArea:true}}},hasAttachments(){return this.hasUsers||this.hasFilesAttach},hasFilesAttach(){return this.hasFiles||this.isUploading||this.hasUploadingError},hasFiles(){var t;return((t=this.files)==null?void 0:t.length)>0},isUploading(){return this.uploadingFiles.some((({status:t})=>[u.FileStatus.UPLOADING,u.FileStatus.LOADING].includes(t)))},hasUploadingError(){return this.uploadingFiles.some((({status:t})=>[u.FileStatus.UPLOAD_FAILED,u.FileStatus.LOAD_FAILED].includes(t)))}},created(){if(this.hasFilesAttach){void this.loadFiles()}},mounted(){if(this.setItemsRef){this.setItemsRef(this.id,this)}},beforeUnmount(){if(this.setItemsRef){this.setItemsRef(this.id,null)}},methods:{toggleIsComplete(){if(this.canToggle===false){return}this.$store.dispatch(`${M.Model.CheckList}/update`,{id:this.id,fields:{isComplete:!this.item.isComplete}});this.$emit("toggleIsComplete",this.id)},toggleGroupModeSelected(){this.$store.dispatch(`${M.Model.CheckList}/update`,{id:this.id,fields:{groupMode:{active:true,selected:!this.groupModeSelected}}});this.$emit("toggleGroupModeSelected",this.id)},focusToItem(){var t,e;(t=this.scrollContainer)!=null?t:this.scrollContainer=(e=this.$parent.$el)==null?void 0:e.closest("[data-list]");const i=200;this.scrollContainer.scrollTo({top:this.$refs.item.offsetTop-i,behavior:"smooth"})},focusToTextarea(t){const e=new Set([this.$refs.checkbox]);if(!e.has(t.target)){var i;(i=this.$refs.growingTextArea)==null?void 0:i.focusTextarea()}},async loadFiles(){await this.fileService.list(this.files.map((t=>{var e;return(e=t==null?void 0:t.id)!=null?e:t})))},handleEnter(){if(!this.item){return}this.addItem(this.item.sortIndex+1)},handleClick(){if(this.groupMode){this.toggleGroupModeSelected()}}},template:`\n\t\t<div\n\t\t\tref="item"\n\t\t\tclass="check-list-widget-child-item"\n\t\t\t:class="{\n\t\t\t\t'--extra-indent': hasUsers && !hasFilesAttach,\n\t\t\t\t'--complete': item.isComplete,\n\t\t\t\t'--group-mode': groupMode,\n\t\t\t\t'--group-mode-selected': groupModeSelected,\n\t\t\t}"\n\t\t\t:data-id="id"\n\t\t\t:style="{ marginLeft: itemOffset }"\n\t\t\t@mouseover="isHovered = true"\n\t\t\t@mouseleave="isHovered = false"\n\t\t\t@click="handleClick"\n\t\t>\n\t\t\t<div class="check-list-widget-child-item-base">\n\t\t\t\t<label\n\t\t\t\t\tclass="check-list-widget-child-item-checkbox"\n\t\t\t\t\t:class="{'--important': !item.isImportant}"\n\t\t\t\t\t@mousedown.stop\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\tref="checkbox"\n\t\t\t\t\t\ttype="checkbox"\n\t\t\t\t\t\t:checked="item.isComplete"\n\t\t\t\t\t\t:disabled="!canToggle || groupMode"\n\t\t\t\t\t\t@change="toggleIsComplete"\n\t\t\t\t\t>\n\t\t\t\t</label>\n\t\t\t\t<div\n\t\t\t\t\tv-if="item.isImportant"\n\t\t\t\t\tclass="check-list-widget-child-item-important"\n\t\t\t\t>\n\t\t\t\t\t<BIcon :name="Outline.FIRE_SOLID" :hoverable="false"/>\n\t\t\t\t</div>\n\t\t\t\t<GrowingTextArea\n\t\t\t\t\tref="growingTextArea"\n\t\t\t\t\tclass="check-list-widget-child-item-title"\n\t\t\t\t\t:data-check-list-id="'check-list-child-item-title-' + item.id"\n\t\t\t\t\t:initialValue="item.title"\n\t\t\t\t\t:placeholderValue="loc('TASKS_V2_CHECK_LIST_ITEM_PLACEHOLDER')"\n\t\t\t\t\t:readonly="groupMode"\n\t\t\t\t\t:fontColor="textColor"\n\t\t\t\t\t:fontSize="15"\n\t\t\t\t\t:lineHeight="20"\n\t\t\t\t\t@update="updateTitle"\n\t\t\t\t\t@focus="handleFocus"\n\t\t\t\t\t@blur="handleBlur"\n\t\t\t\t\t@emptyBlur="handleEmptyBlur"\n\t\t\t\t\t@emptyFocus="focusToItem"\n\t\t\t\t\t@enterBlur="handleEnter"\n\t\t\t\t/>\n\t\t\t\t<div\n\t\t\t\t\tv-if="isHovered && !panelIsShown && !groupMode"\n\t\t\t\t\tclass="check-list-widget-child-item-action"\n\t\t\t\t\t@click="removeItem"\n\t\t\t\t>\n\t\t\t\t\t<BIcon :name="Outline.TRASHCAN"/>\n\t\t\t\t</div>\n\t\t\t\t<div v-else-if="groupMode" class="check-list-widget-child-item-action-checkbox">\n\t\t\t\t\t<input\n\t\t\t\t\t\tref="checkbox"\n\t\t\t\t\t\ttype="checkbox"\n\t\t\t\t\t\t:checked="groupModeSelected"\n\t\t\t\t\t>\n\t\t\t\t</div>\n\t\t\t\t<div v-else class="check-list-widget-child-item-action-stub"></div>\n\t\t\t</div>\n\t\t\t<template v-if="hasAttachments">\n\t\t\t\t<div class="check-list-widget-item-attach">\n\t\t\t\t\t<div v-if="hasUsers" class="check-list-widget-item-attach-users">\n\t\t\t\t\t\t<div v-if="hasAccomplices" class="check-list-widget-item-attach-users-list">\n\t\t\t\t\t\t\t<BIcon :name="Outline.GROUP"/>\n\t\t\t\t\t\t\t<UserAvatarList :users="accomplices"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-if="hasAuditors" class="check-list-widget-item-attach-users-list">\n\t\t\t\t\t\t\t<BIcon :name="Outline.OBSERVER"/>\n\t\t\t\t\t\t\t<UserAvatarList :users="auditors"/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div v-if="hasFilesAttach" class="check-list-widget-item-attach-files">\n\t\t\t\t\t\t<div class="check-list-widget-item-attach-files-list">\n\t\t\t\t\t\t\t<UserFieldWidgetComponent\n\t\t\t\t\t\t\t\t:uploaderAdapter="uploaderAdapter"\n\t\t\t\t\t\t\t\t:widgetOptions="widgetOptions"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</template>\n\t\t</div>\n\t`};const Z={name:"CheckListAddItem",components:{BIcon:w.BIcon},mixins:[Y],emits:["addItem"],setup(){return{Outline:b.Outline}},template:`\n\t\t<div\n\t\t\tclass="check-list-widget-add-item"\n\t\t\t@click="addItem"\n\t\t>\n\t\t\t<div class="check-list-widget-add-item-icon">\n\t\t\t\t<BIcon :name="Outline.PLUS_L"/>\n\t\t\t</div>\n\t\t\t<div class="check-list-widget-add-item-title">\n\t\t\t\t{{ loc('TASKS_V2_CHECK_LIST_ITEM_ADD_BTN') }}\n\t\t\t</div>\n\t\t</div>\n\t`};const tt={name:"CheckListWidget",components:{CheckListParentItem:J,CheckListChildItem:Q,CheckListAddItem:Z},mixins:[q],props:{taskId:{type:[Number,String],required:true},checkListId:{type:[Number,String],default:0},parentId:{type:[Number,String],default:0},listShownItemPanels:{type:Array,default:()=>[]}},emits:["show","update","addItem","removeItem","toggleIsComplete","focus","blur","emptyBlur","toggleCompleted","startGroupMode","toggleGroupModeSelected"],data(){return{collapsedStates:{},hiddenStates:{}}},computed:{task(){return this.$store.getters[`${M.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${M.Model.CheckList}/getByIds`](this.task.checklist)},siblings(){return this.checkLists.filter((t=>t.parentId===this.parentId)).sort(((t,e)=>t.sortIndex-e.sortIndex))},getCollapsedClassForItem(){return t=>`check-list-widget-collapse ${this.collapsedStates[t]?"--collapsed":"--expanded"}`}},mounted(){if(this.checkListId){var t;this.scrollContainer=(t=this.$root.$el)==null?void 0:t.querySelector(["[data-list]"]);const e=this.scrollContainer.querySelector([`[data-parent="${this.checkListId}"]`]);const i=12;setTimeout((()=>{this.scrollContainer.scrollTop=e.offsetTop-i}),0)}this.$emit("show")},methods:{getItemOffset(t){if(t.parentId===0){return"0"}const e=this.getItemLevel(t);if(e===1){return"0"}return`${(e-1)*12}px`},toggleCollapse({parentId:t,areChildrenCollapsed:e}){this.collapsedStates[t]=e},handleShowItem(t){this.hiddenStates[t]=false},handleHideItem(t){this.hiddenStates[t]=true},isFirstVisibleItem(t,e){const i=this.siblings;const s=i.findIndex((t=>!this.hiddenStates[t.id]));return s!==-1&&s===e}},template:`\n\t\t<div class="check-list-widget-container">\n\t\t\t<ul class="check-list-widget">\n\t\t\t\t<li\n\t\t\t\t\tv-for="(item, index) in siblings"\n\t\t\t\t\t:key="item.id"\n\t\t\t\t\tclass="check-list-widget-item"\n\t\t\t\t\t:class="{\n\t\t\t\t\t\t'--first-visible': parentId === 0 && isFirstVisibleItem(item.title, index),\n\t\t\t\t\t\t'--hidden': hiddenStates[item.id],\n\t\t\t\t\t\t'--parent': parentId === 0\n\t\t\t\t\t}"\n\t\t\t\t>\n\t\t\t\t\t<CheckListParentItem\n\t\t\t\t\t\tv-if="item.parentId === 0"\n\t\t\t\t\t\t:id="item.id"\n\t\t\t\t\t\t:taskId="taskId"\n\t\t\t\t\t\t:panelIsShown="listShownItemPanels.includes(item.id)"\n\t\t\t\t\t\t@update="$emit('update')"\n\t\t\t\t\t\t@removeItem="(id) => $emit('removeItem', id)"\n\t\t\t\t\t\t@focus="(id) => $emit('focus', id)"\n\t\t\t\t\t\t@blur="(id) => $emit('blur', id)"\n\t\t\t\t\t\t@emptyBlur="(id) => $emit('emptyBlur', id)"\n\t\t\t\t\t\t@toggleCompleted="(data) => $emit('toggleCompleted', data)"\n\t\t\t\t\t\t@toggleCollapse="toggleCollapse"\n\t\t\t\t\t\t@startGroupMode="(id) => $emit('startGroupMode', id)"\n\t\t\t\t\t\t@show="handleShowItem"\n\t\t\t\t\t\t@hide="handleHideItem"\n\t\t\t\t\t/>\n\t\t\t\t\t<CheckListChildItem\n\t\t\t\t\t\tv-else\n\t\t\t\t\t\t:id="item.id"\n\t\t\t\t\t\t:taskId="taskId"\n\t\t\t\t\t\t:itemOffset="getItemOffset(item)"\n\t\t\t\t\t\t:panelIsShown="listShownItemPanels.includes(item.id)"\n\t\t\t\t\t\t@update="$emit('update')"\n\t\t\t\t\t\t@toggleIsComplete="(id) => $emit('toggleIsComplete', id)"\n\t\t\t\t\t\t@addItem="(data) => $emit('addItem', data)"\n\t\t\t\t\t\t@removeItem="(id) => $emit('removeItem', id)"\n\t\t\t\t\t\t@focus="(id) => $emit('focus', id)"\n\t\t\t\t\t\t@blur="(id) => $emit('blur', id)"\n\t\t\t\t\t\t@emptyBlur="(id) => $emit('emptyBlur', id)"\n\t\t\t\t\t\t@toggleGroupModeSelected="(id) => $emit('toggleGroupModeSelected', id)"\n\t\t\t\t\t\t@show="handleShowItem"\n\t\t\t\t\t\t@hide="handleHideItem"\n\t\t\t\t\t/>\n\t\t\t\t\t<CheckListWidget\n\t\t\t\t\t\tv-if="checkLists.some(child => child.parentId === item.id)"\n\t\t\t\t\t\t:taskId="taskId"\n\t\t\t\t\t\t:parentId="item.id"\n\t\t\t\t\t\t:listShownItemPanels="listShownItemPanels"\n\t\t\t\t\t\t:class="getCollapsedClassForItem(item.id)"\n\t\t\t\t\t\t@update="$emit('update')"\n\t\t\t\t\t\t@toggleIsComplete="(id) => $emit('toggleIsComplete', id)"\n\t\t\t\t\t\t@addItem="(data) => $emit('addItem', data)"\n\t\t\t\t\t\t@removeItem="(id) => $emit('removeItem', id)"\n\t\t\t\t\t\t@focus="(id) => $emit('focus', id)"\n\t\t\t\t\t\t@blur="(id) => $emit('blur', id)"\n\t\t\t\t\t\t@emptyBlur="(id) => $emit('emptyBlur', id)"\n\t\t\t\t\t\t@toggleCompleted="(data) => $emit('toggleCompleted', data)"\n\t\t\t\t\t\t@toggleCollapse="toggleCollapse"\n\t\t\t\t\t\t@startGroupMode="(id) => $emit('startGroupMode', id)"\n\t\t\t\t\t\t@toggleGroupModeSelected="(id) => $emit('toggleGroupModeSelected', id)"\n\t\t\t\t\t\t@show="handleShowItem"\n\t\t\t\t\t\t@hide="handleHideItem"\n\t\t\t\t\t/>\n\t\t\t\t\t<div class="check-list-widget-add-container" :class="getCollapsedClassForItem(item.id)">\n\t\t\t\t\t\t<CheckListAddItem\n\t\t\t\t\t\t\tv-if="item.parentId === 0"\n\t\t\t\t\t\t\t:taskId="taskId"\n\t\t\t\t\t\t\t:id="item.id"\n\t\t\t\t\t\t\t@update="$emit('update')"\n\t\t\t\t\t\t\t@addItem="(data) => $emit('addItem', data)"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t`};const et={name:"CheckListItemPanel",components:{BIcon:w.BIcon,Hint:k.Hint},props:{visibleSections:{type:Array,default:()=>V.defaultSections.map((t=>t.name))},visibleActions:{type:Array,default:()=>[]},disabledActions:{type:Array,default:()=>[]},activeActions:{type:Array,default:()=>[]}},emits:["action"],setup(){return{Outline:b.Outline}},data(){return{isHintShown:false,currentHintElement:null,currentHintText:"",hintTimeout:null}},computed:{hintOptions(){return{offsetLeft:this.currentHintElement?-C.Dom.getPosition(this.currentHintElement).width:0,bindOptions:{forceBindPosition:true,forceTop:true,position:"top"},angle:false}},hasSections(){return this.sections.length>0},sections(){const t=this.visibleActions;return V.defaultSections.filter((t=>this.visibleSections.includes(t.name))).map((e=>({...e,items:e.items.filter((e=>t.includes(e.action))).map((t=>({...t,disabled:this.isItemDisabled(t),active:this.isItemActive(t),hoverable:C.Type.isUndefined(t.hoverable)?true:t.hoverable})))}))).filter((t=>t.items.length>0))}},methods:{isItemDisabled(t){if(!C.Type.isUndefined(t.disabled)){return t.disabled}return this.disabledActions.includes(t.action)},isItemActive(t){if(!C.Type.isUndefined(t.active)){return t.active}return this.activeActions.includes(t.action)},getItemIcon(t){return t.active&&t.activeIcon?t.activeIcon:t.icon},getItemHint(t){if(t.disabled===true&&t.disabledHint){return this.loc(t.disabledHint)}if(t.hint){return this.loc(t.hint)}return""},handleItemClick(t,e){if(!e.disabled){this.$emit("action",{action:e.action,node:t.currentTarget})}},showHint(t,e){const i=this.getItemHint(e);if(!i){return}if(this.hintTimeout){clearTimeout(this.hintTimeout);this.hintTimeout=null}this.currentHintElement=t.currentTarget;this.currentHintText=i;this.hintTimeout=setTimeout((()=>{this.isHintShown=true}),1e3)},hideHint(){if(this.hintTimeout){clearTimeout(this.hintTimeout);this.hintTimeout=null}this.isHintShown=false;this.currentHintElement=null;this.currentHintText=""}},template:`\n\t\t<div v-if="hasSections" class="check-list-widget-item-panel" @mousedown.prevent>\n\t\t\t<div \n\t\t\t\tv-for="section in sections" \n\t\t\t\t:key="section.name"\n\t\t\t\tclass="check-list-widget-item-panel-section"\n\t\t\t\t:class="'--' + section.name"\n\t\t\t>\n\t\t\t\t<div \n\t\t\t\t\tv-for="item in section.items" \n\t\t\t\t\t:key="item.action" \n\t\t\t\t\tclass="check-list-widget-item-panel-section-item"\n\t\t\t\t\t:class="{\n\t\t\t\t\t\t'--disabled': item.disabled, \n\t\t\t\t\t\t'--active': item.active,\n\t\t\t\t\t\t[item.className]: !!item.className\n\t\t\t\t\t}"\n\t\t\t\t\t@mouseenter="showHint($event, item)"\n\t\t\t\t\t@mouseleave="hideHint()"\n\t\t\t\t\t@click="handleItemClick($event, item)"\n\t\t\t\t>\n\t\t\t\t\t<BIcon :name="getItemIcon(item)" :hoverable="item.hoverable"/>\n\t\t\t\t\t<span v-if="item.label">{{ loc(item.label) }}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Hint\n\t\t\t\tv-if="isHintShown"\n\t\t\t\t:bindElement="currentHintElement"\n\t\t\t\t:options="hintOptions"\n\t\t\t>\n\t\t\t\t{{ currentHintText }}\n\t\t\t</Hint>\n\t\t</div>\n\t`};const it={name:"TaskCheckListSheet",components:{BottomSheet:h.BottomSheet,CheckListWidget:tt,CheckListItemPanel:et,CheckListStub:j,UiButton:T.Button,BIcon:w.BIcon},mixins:[G,q],props:{taskId:{type:[Number,String],required:true},checkListId:{type:[Number,String],default:0},isShown:{type:Boolean,required:true}},emits:["close"],setup(){return{ButtonSize:T.ButtonSize,ButtonIcon:T.ButtonIcon,Outline:b.Outline}},data(){return{isExpanded:false,itemPanelTopOffset:2,itemPanelTopLimit:700}},computed:{...L.mapGetters({titleFieldOffsetHeight:`${M.Model.Interface}/titleFieldOffsetHeight`}),task(){return this.$store.getters[`${M.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${M.Model.CheckList}/getByIds`](this.task.checklist)}},watch:{titleFieldOffsetHeight(){var t;(t=this.$refs.bottomSheet)==null?void 0:t.adjustPosition()},async isShown(t){await this.$nextTick();if(t){C.Event.bind(this.$refs.list,"scroll",this.handleScroll)}else{C.Event.unbind(this.$refs.list,"scroll",this.handleScroll)}}},methods:{handleClose(){this.cancelGroupMode();void this.saveCheckList();this.$emit("close")}},template:`\n\t\t<BottomSheet\n\t\t\t:isShown="isShown"\n\t\t\t:isExpanded="isExpanded"\n\t\t\t:class="'--check-list'"\n\t\t\tref="bottomSheet"\n\t\t>\n\t\t\t<div ref="wrapper" class="tasks-field-check-list-sheet">\n\t\t\t\t<div ref="list" data-list class="tasks-field-check-list-list">\n\t\t\t\t\t<CheckListWidget\n\t\t\t\t\t\tv-show="!stub"\n\t\t\t\t\t\t:taskId="taskId"\n\t\t\t\t\t\t:checkListId="checkListId"\n\t\t\t\t\t\t:listShownItemPanels="listShownItemPanels"\n\t\t\t\t\t\t@update="handleUpdate"\n\t\t\t\t\t\t@toggleIsComplete="handleToggleIsComplete"\n\t\t\t\t\t\t@addItem="addItem"\n\t\t\t\t\t\t@removeItem="handleRemove"\n\t\t\t\t\t\t@focus="handleFocus"\n\t\t\t\t\t\t@blur="handleBlur"\n\t\t\t\t\t\t@emptyBlur="handleEmptyBlur"\n\t\t\t\t\t\t@toggleCompleted="toggleCompleted"\n\t\t\t\t\t\t@startGroupMode="handleGroupMode"\n\t\t\t\t\t\t@toggleGroupModeSelected="handleGroupModeSelect"\n\t\t\t\t\t/>\n\t\t\t\t\t<CheckListStub v-if="stub" />\n\t\t\t\t\t<div class="tasks-field-check-list-close-icon --sheet">\n\t\t\t\t\t\t<BIcon :name="Outline.CROSS_L" @click="handleClose"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="tasks-field-check-list-footer">\n\t\t\t\t\t<UiButton\n\t\t\t\t\t\t:text="loc('TASKS_V2_CHECK_LIST_ADD_BTN')"\n\t\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t\t:leftIcon="ButtonIcon.ADD"\n\t\t\t\t\t\t@click="addCheckList"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<CheckListItemPanel\n\t\t\t\t\tv-if="itemPanelIsShown"\n\t\t\t\t\tref="panel"\n\t\t\t\t\t:style="itemPanelStyles"\n\t\t\t\t\t:visibleActions="visiblePanelActions"\n\t\t\t\t\t:disabledActions="disabledPanelActions"\n\t\t\t\t\t:activeActions="activePanelActions"\n\t\t\t\t\t@action="handlePanelAction"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</BottomSheet>\n\t`};const st={name:"TaskCheckListPopup",components:{Popup:S.Popup,CheckListWidget:tt,CheckListItemPanel:et,CheckListStub:j,UiButton:T.Button,BIcon:w.BIcon},mixins:[G,q],props:{taskId:{type:[Number,String],required:true}},emits:["show","close","resize"],setup(){return{resizeObserver:null,AirButtonStyle:T.AirButtonStyle,ButtonSize:T.ButtonSize,ButtonIcon:T.ButtonIcon,Outline:b.Outline}},data(){return{itemPanelTopOffset:5,itemPanelTopLimit:450}},computed:{task(){return this.$store.getters[`${M.Model.Tasks}/getById`](this.taskId)},checkLists(){return this.$store.getters[`${M.Model.CheckList}/getByIds`](this.task.checklist)},popupId(){return`tasks-check-list-popup-${this.taskId}`},popupOptions(){return{className:"tasks-check-list-popup",width:580,height:500,borderRadius:"18px",offsetTop:0,padding:0,autoHide:true,closeByEsc:true,animation:{showClassName:"tasks-check-list-popup-show",closeClassName:"tasks-check-list-popup-close",closeAnimationType:"animation"},events:{onClose:this.handleClose.bind(this)}}},...L.mapGetters({titleFieldOffsetHeight:`${M.Model.Interface}/titleFieldOffsetHeight`})},watch:{async titleFieldOffsetHeight(){if(!this.$refs.popupComponent){return}await this.$nextTick();this.resize()}},created(){this.resizeObserver=new ResizeObserver((t=>{for(const e of t){if(e.target===this.$refs.wrapper){this.resize()}}}))},mounted(){C.Event.bind(window,"resize",this.resize);v.EventEmitter.subscribe("BX.Main.Popup:onShow",this.handleShowPopup);v.EventEmitter.subscribe("BX.Main.Popup:onClose",this.handleClosePopup)},beforeUnmount(){C.Event.unbind(window,"resize",this.resize);v.EventEmitter.unsubscribe("BX.Main.Popup:onShow",this.handleShowPopup);v.EventEmitter.unsubscribe("BX.Main.Popup:onClose",this.handleClosePopup)},methods:{resize(){var t;const e=(t=this.$refs.popupComponent)==null?void 0:t.getPopupInstance();if(e){this.$emit("resize");e.adjustPosition()}},handleShow(){var t;this.$emit("show",{popupInstance:this.$refs.popupComponent.getPopupInstance()});(t=this.$refs.popupComponent)==null?void 0:t.getPopupInstance().adjustPosition();setTimeout((()=>this.resizeObserver.observe(this.$refs.wrapper)),300)},handleClose(){this.cancelGroupMode();void this.saveCheckList();this.resizeObserver.disconnect();this.$bitrix.eventEmitter.emit(M.EventName.CloseCheckList);this.$emit("close")}},template:`\n\t\t<Popup :options="popupOptions" ref="popupComponent">\n\t\t\t<div ref="wrapper" class="tasks-check-list-popup-wrapper">\n\t\t\t\t<div ref="list" data-list class="tasks-check-list-popup-list">\n\t\t\t\t\t<CheckListWidget\n\t\t\t\t\t\tv-show="!stub"\n\t\t\t\t\t\t:taskId="taskId"\n\t\t\t\t\t\t:listShownItemPanels="listShownItemPanels"\n\t\t\t\t\t\t@update="handleUpdate"\n\t\t\t\t\t\t@toggleIsComplete="handleToggleIsComplete"\n\t\t\t\t\t\t@show="handleShow"\n\t\t\t\t\t\t@addItem="addItem"\n\t\t\t\t\t\t@removeItem="handleRemove"\n\t\t\t\t\t\t@focus="handleFocus"\n\t\t\t\t\t\t@blur="handleBlur"\n\t\t\t\t\t\t@emptyBlur="handleEmptyBlur"\n\t\t\t\t\t\t@toggleCompleted="toggleCompleted"\n\t\t\t\t\t\t@startGroupMode="handleGroupMode"\n\t\t\t\t\t\t@toggleGroupModeSelected="handleGroupModeSelect"\n\t\t\t\t\t/>\n\t\t\t\t\t<CheckListStub v-if="stub" />\n\t\t\t\t\t<div class="tasks-field-check-list-close-icon --popup">\n\t\t\t\t\t\t<BIcon :name="Outline.CROSS_L" @click="handleClose"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="tasks-check-list-popup-footer">\n\t\t\t\t\t<UiButton\n\t\t\t\t\t\t:text="loc('TASKS_V2_CHECK_LIST_NEW_BTN')"\n\t\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t\t:leftIcon="ButtonIcon.ADD"\n\t\t\t\t\t\t:style="AirButtonStyle.PLAIN_NO_ACCENT"\n\t\t\t\t\t\t@click="addCheckList"\n\t\t\t\t\t/>\n\t\t\t\t\t<UiButton\n\t\t\t\t\t\t:text="loc('TASKS_V2_CHECK_LIST_READY_BTN')"\n\t\t\t\t\t\t:size="ButtonSize.MEDIUM"\n\t\t\t\t\t\t@click="handleClose"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<CheckListItemPanel\n\t\t\t\t\tv-if="itemPanelIsShown"\n\t\t\t\t\tref="panel"\n\t\t\t\t\t:style="itemPanelStyles"\n\t\t\t\t\t:visibleActions="visiblePanelActions"\n\t\t\t\t\t:disabledActions="disabledPanelActions"\n\t\t\t\t\t:activeActions="activePanelActions"\n\t\t\t\t\t@action="handlePanelAction"\n\t\t\t\t/>\n\t\t\t\t<BMenu\n\t\t\t\t\tv-if="isForwardMenuShown"\n\t\t\t\t\t:options="forwardMenuOptions"\n\t\t\t\t\t@close="isForwardMenuShown = false"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</Popup>\n\t`};t.CheckList=X;t.CheckListChip=W;t.CheckListSheet=it;t.CheckListPopup=st;t.checkListMeta=z})(this.BX.Tasks.V2.Component.Fields=this.BX.Tasks.V2.Component.Fields||{},BX.Main,BX.UI.EntitySelector,BX.Tasks.V2,BX.Tasks.V2.Lib,BX.Tasks.V2.Provider.Service,BX.Tasks.V2.Component.Elements,BX,BX,BX.Tasks.V2.Lib,BX.Tasks.V2.Component.Elements,BX.Tasks.V2.Component.Elements,BX.UI.Vue3.Components,BX.UI.Uploader,BX.Disk.Uploader,BX.Tasks.V2.Component.Elements,BX.Tasks.V2.Component.Elements,BX.Tasks.V2.Provider.Service,BX.Tasks.V2.Component.Elements,BX,BX.Event,BX.UI.Vue3.Components,BX.Vue3.Vuex,BX.Vue3.Components,BX.UI.IconSet,BX.UI.IconSet,BX.Tasks.V2.Const);
//# sourceMappingURL=check-list.bundle.map.js