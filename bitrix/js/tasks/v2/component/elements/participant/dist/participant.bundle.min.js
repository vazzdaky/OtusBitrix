this.BX=this.BX||{};this.BX.Tasks=this.BX.Tasks||{};this.BX.Tasks.V2=this.BX.Tasks.V2||{};this.BX.Tasks.V2.Component=this.BX.Tasks.V2.Component||{};(function(t,e,n,s,i,o){"use strict";const r={name:"TaskParticipant",components:{UserCustomTagSelector:o.UserCustomTagSelector,Popup:e.Popup,RichLoc:n.RichLoc,Hint:i.Hint},props:{taskId:{type:[Number,String],required:true},dialogOptions:{type:Object,required:true},preselected:{type:Array,required:true},canChange:{type:Function,required:true},cantChangeHint:{type:String,required:true},hintClickHandler:{type:Function,required:true},selectorWithActionMenu:{type:Boolean,default:false},dataset:{type:Object,default:null},readonly:{type:Boolean,default:false}},emits:["update"],data(){return{isPopupShown:false}},computed:{task(){return this.$store.getters[`${s.Model.Tasks}/getById`](this.taskId)},userInfo(){var t;const[,e]=(t=this.preselected[0])!=null?t:[];return this.$store.getters[`${s.Model.Users}/getById`](e)}},methods:{handleUserSelected(t){this.$emit("update",t)},async onClick(){if(this.canChange()){return true}this.isPopupShown=true;return new Promise((t=>{this.resolvePopupClosePromise=t}))},handleHintClick(){this.hintClickHandler();this.resolvePopupClosePromise(true);this.isPopupShown=false},closeHint(){this.resolvePopupClosePromise(false);this.isPopupShown=false},handleKeydown(t){if(t.key==="Enter"&&!(t.ctrlKey||t.metaKey)){void this.$refs.selector.handleClick()}},focus(){this.$refs.container.focus()}},template:`\n\t\t<div class="tasks-field-participant" v-bind="dataset" ref="container" tabindex="0" @keydown="handleKeydown">\n\t\t\t<UserCustomTagSelector\n\t\t\t\t:dialogOptions="dialogOptions"\n\t\t\t\t:items="preselected"\n\t\t\t\t:userInfo="userInfo"\n\t\t\t\t:withActionMenu="selectorWithActionMenu"\n\t\t\t\t:clickHandler="onClick"\n\t\t\t\t:readonly="readonly"\n\t\t\t\tref="selector"\n\t\t\t\t@select="handleUserSelected"\n\t\t\t\t@unfreeze="focus"\n\t\t\t/>\n\t\t</div>\n\t\t<Hint\n\t\t\tv-if="isPopupShown"\n\t\t\t:bindElement="$refs.container"\n\t\t\t@close="closeHint"\n\t\t>\n\t\t\t<RichLoc :text="cantChangeHint" placeholder="[action]">\n\t\t\t\t<template #action="{ text }">\n\t\t\t\t\t<span @click="handleHintClick">{{ text }}</span>\n\t\t\t\t</template>\n\t\t\t</RichLoc>\n\t\t</Hint>\n\t`};t.Participant=r})(this.BX.Tasks.V2.Component.Elements=this.BX.Tasks.V2.Component.Elements||{},BX.UI.Vue3.Components,BX.UI.Vue3.Components,BX.Tasks.V2.Const,BX.Tasks.V2.Component.Elements,BX.Tasks.V2.Component.Elements);
//# sourceMappingURL=participant.bundle.map.js